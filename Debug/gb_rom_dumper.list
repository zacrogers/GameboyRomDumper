
gb_rom_dumper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007748  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078f4  080078f4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080078f4  080078f4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078f4  080078f4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078f8  080078f8  000178f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080078fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000123c  2000017c  08007a78  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  08007a78  000213b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a61  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e4  00000000  00000000  00035c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00038ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00039c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f47  00000000  00000000  0003a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a5d  00000000  00000000  00054817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087bf7  00000000  00000000  00067274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eee6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000363c  00000000  00000000  000eeec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800783c 	.word	0x0800783c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800783c 	.word	0x0800783c

0800014c <init_test_gb_metadata>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
void init_test_gb_metadata(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < ROM_TITLE_LEN; ++i)
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e00a      	b.n	800016e <init_test_gb_metadata+0x22>
	{
		gb_metadata.rom_title[i] = i+65;
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	79fa      	ldrb	r2, [r7, #7]
 800015c:	3241      	adds	r2, #65	; 0x41
 800015e:	b2d1      	uxtb	r1, r2
 8000160:	4a17      	ldr	r2, [pc, #92]	; (80001c0 <init_test_gb_metadata+0x74>)
 8000162:	4413      	add	r3, r2
 8000164:	460a      	mov	r2, r1
 8000166:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0; i < ROM_TITLE_LEN; ++i)
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	3301      	adds	r3, #1
 800016c:	71fb      	strb	r3, [r7, #7]
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	2b0f      	cmp	r3, #15
 8000172:	d9f1      	bls.n	8000158 <init_test_gb_metadata+0xc>
	}


	gb_metadata.manufacturers_code = 0x69;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <init_test_gb_metadata+0x74>)
 8000176:	2269      	movs	r2, #105	; 0x69
 8000178:	751a      	strb	r2, [r3, #20]
	gb_metadata.cgb_flag           = CGB_SUPPORT;
 800017a:	4b11      	ldr	r3, [pc, #68]	; (80001c0 <init_test_gb_metadata+0x74>)
 800017c:	2280      	movs	r2, #128	; 0x80
 800017e:	755a      	strb	r2, [r3, #21]
	gb_metadata.new_licensee_code  = CAPCOM;
 8000180:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <init_test_gb_metadata+0x74>)
 8000182:	2208      	movs	r2, #8
 8000184:	759a      	strb	r2, [r3, #22]
	gb_metadata.sgb_flag           = SGB_NO;
 8000186:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <init_test_gb_metadata+0x74>)
 8000188:	2200      	movs	r2, #0
 800018a:	75da      	strb	r2, [r3, #23]
	gb_metadata.cart_type          = MBC1_RAM_BATT;
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <init_test_gb_metadata+0x74>)
 800018e:	2203      	movs	r2, #3
 8000190:	761a      	strb	r2, [r3, #24]
	gb_metadata.rom_size           = ROM_512KB;
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <init_test_gb_metadata+0x74>)
 8000194:	2204      	movs	r2, #4
 8000196:	765a      	strb	r2, [r3, #25]
	gb_metadata.ram_size           = RAM_8KB;
 8000198:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <init_test_gb_metadata+0x74>)
 800019a:	2202      	movs	r2, #2
 800019c:	769a      	strb	r2, [r3, #26]
	gb_metadata.dest_code          = NO_JAP;
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <init_test_gb_metadata+0x74>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	76da      	strb	r2, [r3, #27]
	gb_metadata.old_licensee_code  = 0x00;
 80001a4:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <init_test_gb_metadata+0x74>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	771a      	strb	r2, [r3, #28]
	gb_metadata.mask_rom_ver_num   = 0x01;
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <init_test_gb_metadata+0x74>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	775a      	strb	r2, [r3, #29]
	gb_metadata.checksum           = 0x03;
 80001b0:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <init_test_gb_metadata+0x74>)
 80001b2:	2203      	movs	r2, #3
 80001b4:	779a      	strb	r2, [r3, #30]
}
 80001b6:	bf00      	nop
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	20000198 	.word	0x20000198

080001c4 <client_send_metadata>:

	return checksum;
}

bool client_send_metadata(gb_metadata_t *metadata)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
//	if(sizeof(*metadata) != METADATA_SIZE_BYTES)
//	{
//		return false;
//	}

	client_instruction_e instruction = START_SEND_METADATA;
 80001cc:	2300      	movs	r3, #0
 80001ce:	73fb      	strb	r3, [r7, #15]

	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)&start_delimiter, sizeof(uint8_t)));
 80001d0:	bf00      	nop
 80001d2:	2101      	movs	r1, #1
 80001d4:	4818      	ldr	r0, [pc, #96]	; (8000238 <client_send_metadata+0x74>)
 80001d6:	f006 ff27 	bl	8007028 <CDC_Transmit_FS>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d0f8      	beq.n	80001d2 <client_send_metadata+0xe>
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)&instruction,     sizeof(uint8_t)));
 80001e0:	bf00      	nop
 80001e2:	f107 030f 	add.w	r3, r7, #15
 80001e6:	2101      	movs	r1, #1
 80001e8:	4618      	mov	r0, r3
 80001ea:	f006 ff1d 	bl	8007028 <CDC_Transmit_FS>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d0f6      	beq.n	80001e2 <client_send_metadata+0x1e>
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)metadata,         sizeof(gb_metadata_t)));
 80001f4:	bf00      	nop
 80001f6:	211f      	movs	r1, #31
 80001f8:	6878      	ldr	r0, [r7, #4]
 80001fa:	f006 ff15 	bl	8007028 <CDC_Transmit_FS>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b01      	cmp	r3, #1
 8000202:	d0f8      	beq.n	80001f6 <client_send_metadata+0x32>

	instruction = END_SEND_METADATA;
 8000204:	2302      	movs	r3, #2
 8000206:	73fb      	strb	r3, [r7, #15]

	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)&instruction,     sizeof(uint8_t)));
 8000208:	bf00      	nop
 800020a:	f107 030f 	add.w	r3, r7, #15
 800020e:	2101      	movs	r1, #1
 8000210:	4618      	mov	r0, r3
 8000212:	f006 ff09 	bl	8007028 <CDC_Transmit_FS>
 8000216:	4603      	mov	r3, r0
 8000218:	2b01      	cmp	r3, #1
 800021a:	d0f6      	beq.n	800020a <client_send_metadata+0x46>
	// tx checksum
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)&end_delimiter,   sizeof(uint8_t)));
 800021c:	bf00      	nop
 800021e:	2101      	movs	r1, #1
 8000220:	4806      	ldr	r0, [pc, #24]	; (800023c <client_send_metadata+0x78>)
 8000222:	f006 ff01 	bl	8007028 <CDC_Transmit_FS>
 8000226:	4603      	mov	r3, r0
 8000228:	2b01      	cmp	r3, #1
 800022a:	d0f8      	beq.n	800021e <client_send_metadata+0x5a>

	return true;
 800022c:	2301      	movs	r3, #1
}
 800022e:	4618      	mov	r0, r3
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	080078da 	.word	0x080078da
 800023c:	080078db 	.word	0x080078db

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f000 fa09 	bl	800065c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f81f 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 f8bb 	bl	80003c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000252:	f000 f88b 	bl	800036c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000256:	f006 fe29 	bl	8006eac <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 800025a:	f000 f873 	bl	8000344 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  init_test_gb_metadata();
 800025e:	f7ff ff75 	bl	800014c <init_test_gb_metadata>


  char* msg = "GB rom dumper usb serial";
 8000262:	4b07      	ldr	r3, [pc, #28]	; (8000280 <main+0x40>)
 8000264:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(Onboard_LED_GPIO_Port, Onboard_LED_Pin);
 8000266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026a:	4806      	ldr	r0, [pc, #24]	; (8000284 <main+0x44>)
 800026c:	f000 fd42 	bl	8000cf4 <HAL_GPIO_TogglePin>
//	  while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)msg, strlen(msg)));
//	  while(USBD_BUSY == CDC_Transmit_FS(buf, 10));
	  client_send_metadata(&gb_metadata);
 8000270:	4805      	ldr	r0, [pc, #20]	; (8000288 <main+0x48>)
 8000272:	f7ff ffa7 	bl	80001c4 <client_send_metadata>
	  HAL_Delay(1000);
 8000276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027a:	f000 fa51 	bl	8000720 <HAL_Delay>
	  HAL_GPIO_TogglePin(Onboard_LED_GPIO_Port, Onboard_LED_Pin);
 800027e:	e7f2      	b.n	8000266 <main+0x26>
 8000280:	08007854 	.word	0x08007854
 8000284:	40011000 	.word	0x40011000
 8000288:	20000198 	.word	0x20000198

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b094      	sub	sp, #80	; 0x50
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f007 fac6 	bl	800782c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002bc:	2301      	movs	r3, #1
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fb2a 	bl	800293c <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ee:	f000 f8c3 	bl	8000478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	230f      	movs	r3, #15
 80002f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	2302      	movs	r3, #2
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000302:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	2101      	movs	r1, #1
 800030e:	4618      	mov	r0, r3
 8000310:	f002 fd94 	bl	8002e3c <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800031a:	f000 f8ad 	bl	8000478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800031e:	2310      	movs	r3, #16
 8000320:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000322:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000326:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4618      	mov	r0, r3
 800032c:	f002 ff0c 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000336:	f000 f89f 	bl	8000478 <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3750      	adds	r7, #80	; 0x50
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_CRC_Init+0x20>)
 800034a:	4a07      	ldr	r2, [pc, #28]	; (8000368 <MX_CRC_Init+0x24>)
 800034c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_CRC_Init+0x20>)
 8000350:	f000 fb17 	bl	8000982 <HAL_CRC_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800035a:	f000 f88d 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000042c 	.word	0x2000042c
 8000368:	40023000 	.word	0x40023000

0800036c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_I2C1_Init+0x50>)
 8000372:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <MX_I2C1_Init+0x54>)
 8000374:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_I2C1_Init+0x50>)
 8000378:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <MX_I2C1_Init+0x58>)
 800037a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_I2C1_Init+0x50>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_I2C1_Init+0x50>)
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_I2C1_Init+0x50>)
 800038a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800038e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <MX_I2C1_Init+0x50>)
 8000392:	2200      	movs	r2, #0
 8000394:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_I2C1_Init+0x50>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <MX_I2C1_Init+0x50>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_I2C1_Init+0x50>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_I2C1_Init+0x50>)
 80003aa:	f000 fcbd 	bl	8000d28 <HAL_I2C_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003b4:	f000 f860 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200003d8 	.word	0x200003d8
 80003c0:	40005400 	.word	0x40005400
 80003c4:	000186a0 	.word	0x000186a0

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b24      	ldr	r3, [pc, #144]	; (8000470 <MX_GPIO_Init+0xa8>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a23      	ldr	r2, [pc, #140]	; (8000470 <MX_GPIO_Init+0xa8>)
 80003e2:	f043 0310 	orr.w	r3, r3, #16
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b21      	ldr	r3, [pc, #132]	; (8000470 <MX_GPIO_Init+0xa8>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0310 	and.w	r3, r3, #16
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <MX_GPIO_Init+0xa8>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a1d      	ldr	r2, [pc, #116]	; (8000470 <MX_GPIO_Init+0xa8>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_GPIO_Init+0xa8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0320 	and.w	r3, r3, #32
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_GPIO_Init+0xa8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <MX_GPIO_Init+0xa8>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_GPIO_Init+0xa8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_GPIO_Init+0xa8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a11      	ldr	r2, [pc, #68]	; (8000470 <MX_GPIO_Init+0xa8>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_GPIO_Init+0xa8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Onboard_LED_GPIO_Port, Onboard_LED_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000442:	480c      	ldr	r0, [pc, #48]	; (8000474 <MX_GPIO_Init+0xac>)
 8000444:	f000 fc3e 	bl	8000cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Onboard_LED_Pin */
  GPIO_InitStruct.Pin = Onboard_LED_Pin;
 8000448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000456:	2302      	movs	r3, #2
 8000458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Onboard_LED_GPIO_Port, &GPIO_InitStruct);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_GPIO_Init+0xac>)
 8000462:	f000 faab 	bl	80009bc <HAL_GPIO_Init>

}
 8000466:	bf00      	nop
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	40011000 	.word	0x40011000

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	e7fe      	b.n	8000480 <Error_Handler+0x8>
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <HAL_MspInit+0x5c>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <HAL_MspInit+0x5c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <HAL_MspInit+0x5c>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <HAL_MspInit+0x5c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_MspInit+0x60>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <HAL_MspInit+0x60>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010000 	.word	0x40010000

080004e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <HAL_CRC_MspInit+0x34>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d10b      	bne.n	8000512 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <HAL_CRC_MspInit+0x38>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a08      	ldr	r2, [pc, #32]	; (8000520 <HAL_CRC_MspInit+0x38>)
 8000500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_CRC_MspInit+0x38>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40023000 	.word	0x40023000
 8000520:	40021000 	.word	0x40021000

08000524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a15      	ldr	r2, [pc, #84]	; (8000594 <HAL_I2C_MspInit+0x70>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d123      	bne.n	800058c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <HAL_I2C_MspInit+0x74>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800055c:	23c0      	movs	r3, #192	; 0xc0
 800055e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000560:	2312      	movs	r3, #18
 8000562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <HAL_I2C_MspInit+0x78>)
 8000570:	f000 fa24 	bl	80009bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_I2C_MspInit+0x74>)
 800057a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057e:	61d3      	str	r3, [r2, #28]
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40005400 	.word	0x40005400
 8000598:	40021000 	.word	0x40021000
 800059c:	40010c00 	.word	0x40010c00

080005a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <NMI_Handler+0x4>

080005a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <HardFault_Handler+0x4>

080005ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <MemManage_Handler+0x4>

080005b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <BusFault_Handler+0x4>

080005b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <UsageFault_Handler+0x4>

080005be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr

080005ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e6:	f000 f87f 	bl	80006e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005f6:	f000 fe0c 	bl	8001212 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200010cc 	.word	0x200010cc

08000604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000636:	f7ff ffe5 	bl	8000604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063a:	f007 f8d3 	bl	80077e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fdff 	bl	8000240 <main>
  bx lr
 8000642:	4770      	bx	lr
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800064c:	080078fc 	.word	0x080078fc
  ldr r2, =_sbss
 8000650:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000654:	200013b8 	.word	0x200013b8

08000658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_2_IRQHandler>
	...

0800065c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_Init+0x28>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <HAL_Init+0x28>)
 8000666:	f043 0310 	orr.w	r3, r3, #16
 800066a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f947 	bl	8000900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000672:	200f      	movs	r0, #15
 8000674:	f000 f808 	bl	8000688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000678:	f7ff ff04 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x54>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_InitTick+0x58>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f95f 	bl	800096a <HAL_SYSTICK_Config>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e00e      	b.n	80006d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	d80a      	bhi.n	80006d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006bc:	2200      	movs	r2, #0
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006c4:	f000 f927 	bl	8000916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c8:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <HAL_InitTick+0x5c>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ce:	2300      	movs	r3, #0
 80006d0:	e000      	b.n	80006d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000004 	.word	0x20000004

080006e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x1c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <HAL_IncTick+0x20>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	4a03      	ldr	r2, [pc, #12]	; (8000708 <HAL_IncTick+0x20>)
 80006fa:	6013      	str	r3, [r2, #0]
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	20000008 	.word	0x20000008
 8000708:	20000434 	.word	0x20000434

0800070c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <HAL_GetTick+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000434 	.word	0x20000434

08000720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000728:	f7ff fff0 	bl	800070c <HAL_GetTick>
 800072c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000738:	d005      	beq.n	8000746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_Delay+0x44>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4413      	add	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000746:	bf00      	nop
 8000748:	f7ff ffe0 	bl	800070c <HAL_GetTick>
 800074c:	4602      	mov	r2, r0
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	429a      	cmp	r2, r3
 8000756:	d8f7      	bhi.n	8000748 <HAL_Delay+0x28>
  {
  }
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000008 	.word	0x20000008

08000768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079a:	4a04      	ldr	r2, [pc, #16]	; (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db0b      	blt.n	80007f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 021f 	and.w	r2, r3, #31
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <__NVIC_EnableIRQ+0x34>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	2001      	movs	r0, #1
 80007ee:	fa00 f202 	lsl.w	r2, r0, r2
 80007f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100

08000804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	; (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	; (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f1c3 0307 	rsb	r3, r3, #7
 8000872:	2b04      	cmp	r3, #4
 8000874:	bf28      	it	cs
 8000876:	2304      	movcs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3304      	adds	r3, #4
 800087e:	2b06      	cmp	r3, #6
 8000880:	d902      	bls.n	8000888 <NVIC_EncodePriority+0x30>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b03      	subs	r3, #3
 8000886:	e000      	b.n	800088a <NVIC_EncodePriority+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43da      	mvns	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	401a      	ands	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43d9      	mvns	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	4313      	orrs	r3, r2
         );
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	; 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008cc:	d301      	bcc.n	80008d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00f      	b.n	80008f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <SysTick_Config+0x40>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008da:	210f      	movs	r1, #15
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e0:	f7ff ff90 	bl	8000804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <SysTick_Config+0x40>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <SysTick_Config+0x40>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	e000e010 	.word	0xe000e010

08000900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff2d 	bl	8000768 <__NVIC_SetPriorityGrouping>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000928:	f7ff ff42 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 800092c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff ff90 	bl	8000858 <NVIC_EncodePriority>
 8000938:	4602      	mov	r2, r0
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5f 	bl	8000804 <__NVIC_SetPriority>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff35 	bl	80007cc <__NVIC_EnableIRQ>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffa2 	bl	80008bc <SysTick_Config>
 8000978:	4603      	mov	r3, r0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e00e      	b.n	80009b2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	795b      	ldrb	r3, [r3, #5]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d105      	bne.n	80009aa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fd9f 	bl	80004e8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2201      	movs	r2, #1
 80009ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009bc:	b480      	push	{r7}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ce:	e169      	b.n	8000ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d0:	2201      	movs	r2, #1
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	69fa      	ldr	r2, [r7, #28]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	f040 8158 	bne.w	8000c9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	4a9a      	ldr	r2, [pc, #616]	; (8000c5c <HAL_GPIO_Init+0x2a0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d05e      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 80009f8:	4a98      	ldr	r2, [pc, #608]	; (8000c5c <HAL_GPIO_Init+0x2a0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d875      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 80009fe:	4a98      	ldr	r2, [pc, #608]	; (8000c60 <HAL_GPIO_Init+0x2a4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d058      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a04:	4a96      	ldr	r2, [pc, #600]	; (8000c60 <HAL_GPIO_Init+0x2a4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d86f      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a0a:	4a96      	ldr	r2, [pc, #600]	; (8000c64 <HAL_GPIO_Init+0x2a8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d052      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a10:	4a94      	ldr	r2, [pc, #592]	; (8000c64 <HAL_GPIO_Init+0x2a8>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d869      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a16:	4a94      	ldr	r2, [pc, #592]	; (8000c68 <HAL_GPIO_Init+0x2ac>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d04c      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a1c:	4a92      	ldr	r2, [pc, #584]	; (8000c68 <HAL_GPIO_Init+0x2ac>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d863      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a22:	4a92      	ldr	r2, [pc, #584]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d046      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a28:	4a90      	ldr	r2, [pc, #576]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d85d      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a2e:	2b12      	cmp	r3, #18
 8000a30:	d82a      	bhi.n	8000a88 <HAL_GPIO_Init+0xcc>
 8000a32:	2b12      	cmp	r3, #18
 8000a34:	d859      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a36:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <HAL_GPIO_Init+0x80>)
 8000a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3c:	08000ab7 	.word	0x08000ab7
 8000a40:	08000a91 	.word	0x08000a91
 8000a44:	08000aa3 	.word	0x08000aa3
 8000a48:	08000ae5 	.word	0x08000ae5
 8000a4c:	08000aeb 	.word	0x08000aeb
 8000a50:	08000aeb 	.word	0x08000aeb
 8000a54:	08000aeb 	.word	0x08000aeb
 8000a58:	08000aeb 	.word	0x08000aeb
 8000a5c:	08000aeb 	.word	0x08000aeb
 8000a60:	08000aeb 	.word	0x08000aeb
 8000a64:	08000aeb 	.word	0x08000aeb
 8000a68:	08000aeb 	.word	0x08000aeb
 8000a6c:	08000aeb 	.word	0x08000aeb
 8000a70:	08000aeb 	.word	0x08000aeb
 8000a74:	08000aeb 	.word	0x08000aeb
 8000a78:	08000aeb 	.word	0x08000aeb
 8000a7c:	08000aeb 	.word	0x08000aeb
 8000a80:	08000a99 	.word	0x08000a99
 8000a84:	08000aad 	.word	0x08000aad
 8000a88:	4a79      	ldr	r2, [pc, #484]	; (8000c70 <HAL_GPIO_Init+0x2b4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d013      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a8e:	e02c      	b.n	8000aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	623b      	str	r3, [r7, #32]
          break;
 8000a96:	e029      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	623b      	str	r3, [r7, #32]
          break;
 8000aa0:	e024      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	3308      	adds	r3, #8
 8000aa8:	623b      	str	r3, [r7, #32]
          break;
 8000aaa:	e01f      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	330c      	adds	r3, #12
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e01a      	b.n	8000aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d102      	bne.n	8000ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	623b      	str	r3, [r7, #32]
          break;
 8000ac2:	e013      	b.n	8000aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d105      	bne.n	8000ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000acc:	2308      	movs	r3, #8
 8000ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	611a      	str	r2, [r3, #16]
          break;
 8000ad6:	e009      	b.n	8000aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	615a      	str	r2, [r3, #20]
          break;
 8000ae2:	e003      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
          break;
 8000ae8:	e000      	b.n	8000aec <HAL_GPIO_Init+0x130>
          break;
 8000aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	2bff      	cmp	r3, #255	; 0xff
 8000af0:	d801      	bhi.n	8000af6 <HAL_GPIO_Init+0x13a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	e001      	b.n	8000afa <HAL_GPIO_Init+0x13e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3304      	adds	r3, #4
 8000afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d802      	bhi.n	8000b08 <HAL_GPIO_Init+0x14c>
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	e002      	b.n	8000b0e <HAL_GPIO_Init+0x152>
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	3b08      	subs	r3, #8
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	210f      	movs	r1, #15
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	401a      	ands	r2, r3
 8000b20:	6a39      	ldr	r1, [r7, #32]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 80b1 	beq.w	8000c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3c:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <HAL_GPIO_Init+0x2b8>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a4c      	ldr	r2, [pc, #304]	; (8000c74 <HAL_GPIO_Init+0x2b8>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b4a      	ldr	r3, [pc, #296]	; (8000c74 <HAL_GPIO_Init+0x2b8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b54:	4a48      	ldr	r2, [pc, #288]	; (8000c78 <HAL_GPIO_Init+0x2bc>)
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	220f      	movs	r2, #15
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a40      	ldr	r2, [pc, #256]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d013      	beq.n	8000ba8 <HAL_GPIO_Init+0x1ec>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a3f      	ldr	r2, [pc, #252]	; (8000c80 <HAL_GPIO_Init+0x2c4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d00d      	beq.n	8000ba4 <HAL_GPIO_Init+0x1e8>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a3e      	ldr	r2, [pc, #248]	; (8000c84 <HAL_GPIO_Init+0x2c8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_GPIO_Init+0x1e4>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <HAL_GPIO_Init+0x2cc>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d101      	bne.n	8000b9c <HAL_GPIO_Init+0x1e0>
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e006      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	e004      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	e002      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e000      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bac:	f002 0203 	and.w	r2, r2, #3
 8000bb0:	0092      	lsls	r2, r2, #2
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bba:	492f      	ldr	r1, [pc, #188]	; (8000c78 <HAL_GPIO_Init+0x2bc>)
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	492c      	ldr	r1, [pc, #176]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	600b      	str	r3, [r1, #0]
 8000be0:	e006      	b.n	8000bf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4928      	ldr	r1, [pc, #160]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	4922      	ldr	r1, [pc, #136]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	604b      	str	r3, [r1, #4]
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	491e      	ldr	r1, [pc, #120]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	4918      	ldr	r1, [pc, #96]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	608b      	str	r3, [r1, #8]
 8000c30:	e006      	b.n	8000c40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	4914      	ldr	r1, [pc, #80]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d021      	beq.n	8000c90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	490e      	ldr	r1, [pc, #56]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60cb      	str	r3, [r1, #12]
 8000c58:	e021      	b.n	8000c9e <HAL_GPIO_Init+0x2e2>
 8000c5a:	bf00      	nop
 8000c5c:	10320000 	.word	0x10320000
 8000c60:	10310000 	.word	0x10310000
 8000c64:	10220000 	.word	0x10220000
 8000c68:	10210000 	.word	0x10210000
 8000c6c:	10120000 	.word	0x10120000
 8000c70:	10110000 	.word	0x10110000
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40010c00 	.word	0x40010c00
 8000c84:	40011000 	.word	0x40011000
 8000c88:	40011400 	.word	0x40011400
 8000c8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_GPIO_Init+0x304>)
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4909      	ldr	r1, [pc, #36]	; (8000cc0 <HAL_GPIO_Init+0x304>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	fa22 f303 	lsr.w	r3, r2, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f47f ae8e 	bne.w	80009d0 <HAL_GPIO_Init+0x14>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	372c      	adds	r7, #44	; 0x2c
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd4:	787b      	ldrb	r3, [r7, #1]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cda:	887a      	ldrh	r2, [r7, #2]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ce0:	e003      	b.n	8000cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ce2:	887b      	ldrh	r3, [r7, #2]
 8000ce4:	041a      	lsls	r2, r3, #16
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	611a      	str	r2, [r3, #16]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	041a      	lsls	r2, r3, #16
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43d9      	mvns	r1, r3
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	400b      	ands	r3, r1
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	611a      	str	r2, [r3, #16]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
	...

08000d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e12b      	b.n	8000f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d106      	bne.n	8000d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fbe8 	bl	8000524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2224      	movs	r2, #36	; 0x24
 8000d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0201 	bic.w	r2, r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d8c:	f002 f9aa 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8000d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4a81      	ldr	r2, [pc, #516]	; (8000f9c <HAL_I2C_Init+0x274>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d807      	bhi.n	8000dac <HAL_I2C_Init+0x84>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4a80      	ldr	r2, [pc, #512]	; (8000fa0 <HAL_I2C_Init+0x278>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	bf94      	ite	ls
 8000da4:	2301      	movls	r3, #1
 8000da6:	2300      	movhi	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	e006      	b.n	8000dba <HAL_I2C_Init+0x92>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4a7d      	ldr	r2, [pc, #500]	; (8000fa4 <HAL_I2C_Init+0x27c>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	bf94      	ite	ls
 8000db4:	2301      	movls	r3, #1
 8000db6:	2300      	movhi	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e0e7      	b.n	8000f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4a78      	ldr	r2, [pc, #480]	; (8000fa8 <HAL_I2C_Init+0x280>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	0c9b      	lsrs	r3, r3, #18
 8000dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	4a6a      	ldr	r2, [pc, #424]	; (8000f9c <HAL_I2C_Init+0x274>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d802      	bhi.n	8000dfc <HAL_I2C_Init+0xd4>
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	e009      	b.n	8000e10 <HAL_I2C_Init+0xe8>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e02:	fb02 f303 	mul.w	r3, r2, r3
 8000e06:	4a69      	ldr	r2, [pc, #420]	; (8000fac <HAL_I2C_Init+0x284>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	099b      	lsrs	r3, r3, #6
 8000e0e:	3301      	adds	r3, #1
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6812      	ldr	r2, [r2, #0]
 8000e14:	430b      	orrs	r3, r1
 8000e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	495c      	ldr	r1, [pc, #368]	; (8000f9c <HAL_I2C_Init+0x274>)
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d819      	bhi.n	8000e64 <HAL_I2C_Init+0x13c>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1e59      	subs	r1, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e3e:	1c59      	adds	r1, r3, #1
 8000e40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000e44:	400b      	ands	r3, r1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00a      	beq.n	8000e60 <HAL_I2C_Init+0x138>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	1e59      	subs	r1, r3, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e5e:	e051      	b.n	8000f04 <HAL_I2C_Init+0x1dc>
 8000e60:	2304      	movs	r3, #4
 8000e62:	e04f      	b.n	8000f04 <HAL_I2C_Init+0x1dc>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d111      	bne.n	8000e90 <HAL_I2C_Init+0x168>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	1e58      	subs	r0, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6859      	ldr	r1, [r3, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	440b      	add	r3, r1
 8000e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e7e:	3301      	adds	r3, #1
 8000e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bf0c      	ite	eq
 8000e88:	2301      	moveq	r3, #1
 8000e8a:	2300      	movne	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	e012      	b.n	8000eb6 <HAL_I2C_Init+0x18e>
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1e58      	subs	r0, r3, #1
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6859      	ldr	r1, [r3, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	0099      	lsls	r1, r3, #2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf0c      	ite	eq
 8000eb0:	2301      	moveq	r3, #1
 8000eb2:	2300      	movne	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_I2C_Init+0x196>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e022      	b.n	8000f04 <HAL_I2C_Init+0x1dc>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10e      	bne.n	8000ee4 <HAL_I2C_Init+0x1bc>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	1e58      	subs	r0, r3, #1
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6859      	ldr	r1, [r3, #4]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	440b      	add	r3, r1
 8000ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee2:	e00f      	b.n	8000f04 <HAL_I2C_Init+0x1dc>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1e58      	subs	r0, r3, #1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6859      	ldr	r1, [r3, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	0099      	lsls	r1, r3, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	6809      	ldr	r1, [r1, #0]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69da      	ldr	r2, [r3, #28]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6911      	ldr	r1, [r2, #16]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68d2      	ldr	r2, [r2, #12]
 8000f3e:	4311      	orrs	r1, r2
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	430b      	orrs	r3, r1
 8000f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695a      	ldr	r2, [r3, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0201 	orr.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	000186a0 	.word	0x000186a0
 8000fa0:	001e847f 	.word	0x001e847f
 8000fa4:	003d08ff 	.word	0x003d08ff
 8000fa8:	431bde83 	.word	0x431bde83
 8000fac:	10624dd3 	.word	0x10624dd3

08000fb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af06      	add	r7, sp, #24
 8000fb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0fd      	b.n	80011be <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d106      	bne.n	8000fdc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f006 f95a 	bl	8007290 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 f989 	bl	8003300 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	687e      	ldr	r6, [r7, #4]
 8000ff6:	466d      	mov	r5, sp
 8000ff8:	f106 0410 	add.w	r4, r6, #16
 8000ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	602b      	str	r3, [r5, #0]
 8001004:	1d33      	adds	r3, r6, #4
 8001006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001008:	6838      	ldr	r0, [r7, #0]
 800100a:	f002 f953 	bl	80032b4 <USB_CoreInit>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e0ce      	b.n	80011be <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f002 f984 	bl	8003334 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e04c      	b.n	80010cc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	3301      	adds	r3, #1
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	b298      	uxth	r0, r3
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	3336      	adds	r3, #54	; 0x36
 8001070:	4602      	mov	r2, r0
 8001072:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	3303      	adds	r3, #3
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3338      	adds	r3, #56	; 0x38
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	333c      	adds	r3, #60	; 0x3c
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	3340      	adds	r3, #64	; 0x40
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3ad      	bcc.n	8001032 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e044      	b.n	8001166 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	440b      	add	r3, r1
 800112c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	440b      	add	r3, r1
 8001158:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	3301      	adds	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	d3b5      	bcc.n	80010dc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	687e      	ldr	r6, [r7, #4]
 8001178:	466d      	mov	r5, sp
 800117a:	f106 0410 	add.w	r4, r6, #16
 800117e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	602b      	str	r3, [r5, #0]
 8001186:	1d33      	adds	r3, r6, #4
 8001188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118a:	6838      	ldr	r0, [r7, #0]
 800118c:	f002 f8de 	bl	800334c <USB_DevInit>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2202      	movs	r2, #2
 800119a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00d      	b.n	80011be <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fa4f 	bl	800565a <USB_DevDisconnect>

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <HAL_PCD_Start+0x16>
 80011d8:	2302      	movs	r3, #2
 80011da:	e016      	b.n	800120a <HAL_PCD_Start+0x44>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 f873 	bl	80032d4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011ee:	2101      	movs	r1, #1
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f006 fac0 	bl	8007776 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f004 fa23 	bl	8005646 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b088      	sub	sp, #32
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f004 fa25 	bl	800566e <USB_ReadInterrupts>
 8001224:	4603      	mov	r3, r0
 8001226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800122a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800122e:	d102      	bne.n	8001236 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fb61 	bl	80018f8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f004 fa17 	bl	800566e <USB_ReadInterrupts>
 8001240:	4603      	mov	r3, r0
 8001242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124a:	d112      	bne.n	8001272 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800125e:	b292      	uxth	r2, r2
 8001260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f006 f88e 	bl	8007386 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800126a:	2100      	movs	r1, #0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f925 	bl	80014bc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f004 f9f9 	bl	800566e <USB_ReadInterrupts>
 800127c:	4603      	mov	r3, r0
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001286:	d10b      	bne.n	80012a0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001290:	b29a      	uxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800129a:	b292      	uxth	r2, r2
 800129c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f004 f9e2 	bl	800566e <USB_ReadInterrupts>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012b4:	d10b      	bne.n	80012ce <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012be:	b29a      	uxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012c8:	b292      	uxth	r2, r2
 80012ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 f9cb 	bl	800566e <USB_ReadInterrupts>
 80012d8:	4603      	mov	r3, r0
 80012da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012e2:	d126      	bne.n	8001332 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0204 	bic.w	r2, r2, #4
 80012f6:	b292      	uxth	r2, r2
 80012f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0208 	bic.w	r2, r2, #8
 800130e:	b292      	uxth	r2, r2
 8001310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f006 f86f 	bl	80073f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800132c:	b292      	uxth	r2, r2
 800132e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f004 f999 	bl	800566e <USB_ReadInterrupts>
 800133c:	4603      	mov	r3, r0
 800133e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001346:	f040 8084 	bne.w	8001452 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800134a:	2300      	movs	r3, #0
 800134c:	77fb      	strb	r3, [r7, #31]
 800134e:	e011      	b.n	8001374 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	441a      	add	r2, r3
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	8812      	ldrh	r2, [r2, #0]
 8001360:	b292      	uxth	r2, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	f107 0120 	add.w	r1, r7, #32
 8001368:	440b      	add	r3, r1
 800136a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800136e:	7ffb      	ldrb	r3, [r7, #31]
 8001370:	3301      	adds	r3, #1
 8001372:	77fb      	strb	r3, [r7, #31]
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	2b07      	cmp	r3, #7
 8001378:	d9ea      	bls.n	8001350 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001382:	b29a      	uxth	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	b292      	uxth	r2, r2
 800138e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800139a:	b29a      	uxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0201 	bic.w	r2, r2, #1
 80013a4:	b292      	uxth	r2, r2
 80013a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80013aa:	bf00      	nop
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f6      	beq.n	80013ac <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013d0:	b292      	uxth	r2, r2
 80013d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	77fb      	strb	r3, [r7, #31]
 80013da:	e010      	b.n	80013fe <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	4611      	mov	r1, r2
 80013e4:	7ffa      	ldrb	r2, [r7, #31]
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	440a      	add	r2, r1
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	f107 0120 	add.w	r1, r7, #32
 80013f0:	440b      	add	r3, r1
 80013f2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80013f6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	3301      	adds	r3, #1
 80013fc:	77fb      	strb	r3, [r7, #31]
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
 8001400:	2b07      	cmp	r3, #7
 8001402:	d9eb      	bls.n	80013dc <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800140c:	b29a      	uxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0208 	orr.w	r2, r2, #8
 8001416:	b292      	uxth	r2, r2
 8001418:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800142e:	b292      	uxth	r2, r2
 8001430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800143c:	b29a      	uxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0204 	orr.w	r2, r2, #4
 8001446:	b292      	uxth	r2, r2
 8001448:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f005 ffb9 	bl	80073c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f004 f909 	bl	800566e <USB_ReadInterrupts>
 800145c:	4603      	mov	r3, r0
 800145e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001466:	d10e      	bne.n	8001486 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001470:	b29a      	uxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800147a:	b292      	uxth	r2, r2
 800147c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f005 ff72 	bl	800736a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f004 f8ef 	bl	800566e <USB_ReadInterrupts>
 8001490:	4603      	mov	r3, r0
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800149a:	d10b      	bne.n	80014b4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014ae:	b292      	uxth	r2, r2
 80014b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_PCD_SetAddress+0x1a>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e013      	b.n	80014fe <HAL_PCD_SetAddress+0x42>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	78fa      	ldrb	r2, [r7, #3]
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	78fa      	ldrb	r2, [r7, #3]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 f896 	bl	8005620 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	4608      	mov	r0, r1
 8001510:	4611      	mov	r1, r2
 8001512:	461a      	mov	r2, r3
 8001514:	4603      	mov	r3, r0
 8001516:	70fb      	strb	r3, [r7, #3]
 8001518:	460b      	mov	r3, r1
 800151a:	803b      	strh	r3, [r7, #0]
 800151c:	4613      	mov	r3, r2
 800151e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da0e      	bge.n	800154a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2201      	movs	r2, #1
 8001546:	705a      	strb	r2, [r3, #1]
 8001548:	e00e      	b.n	8001568 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	f003 0207 	and.w	r2, r3, #7
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	b2da      	uxtb	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001574:	883a      	ldrh	r2, [r7, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	78ba      	ldrb	r2, [r7, #2]
 800157e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001592:	78bb      	ldrb	r3, [r7, #2]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d102      	bne.n	800159e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_PCD_EP_Open+0xa6>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e00e      	b.n	80015ca <HAL_PCD_EP_Open+0xc4>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fee6 	bl	800338c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015c8:	7afb      	ldrb	r3, [r7, #11]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da0e      	bge.n	8001604 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2201      	movs	r2, #1
 8001600:	705a      	strb	r2, [r3, #1]
 8001602:	e00e      	b.n	8001622 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	f003 0207 	and.w	r2, r3, #7
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	b2da      	uxtb	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_PCD_EP_Close+0x6a>
 8001638:	2302      	movs	r3, #2
 800163a:	e00e      	b.n	800165a <HAL_PCD_EP_Close+0x88>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	4618      	mov	r0, r3
 800164c:	f002 fa08 	bl	8003a60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	460b      	mov	r3, r1
 8001670:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001672:	7afb      	ldrb	r3, [r7, #11]
 8001674:	f003 0207 	and.w	r2, r3, #7
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2200      	movs	r2, #0
 80016a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016a2:	7afb      	ldrb	r3, [r7, #11]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016ae:	7afb      	ldrb	r3, [r7, #11]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d106      	bne.n	80016c6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6979      	ldr	r1, [r7, #20]
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fbba 	bl	8003e38 <USB_EPStartXfer>
 80016c4:	e005      	b.n	80016d2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6979      	ldr	r1, [r7, #20]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fbb3 	bl	8003e38 <USB_EPStartXfer>
  }

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	f003 0207 	and.w	r2, r3, #7
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	460b      	mov	r3, r1
 8001718:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800171a:	7afb      	ldrb	r3, [r7, #11]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2200      	movs	r2, #0
 800174e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2201      	movs	r2, #1
 8001754:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001756:	7afb      	ldrb	r3, [r7, #11]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	b2da      	uxtb	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001762:	7afb      	ldrb	r3, [r7, #11]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	2b00      	cmp	r3, #0
 800176a:	d106      	bne.n	800177a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6979      	ldr	r1, [r7, #20]
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fb60 	bl	8003e38 <USB_EPStartXfer>
 8001778:	e005      	b.n	8001786 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6979      	ldr	r1, [r7, #20]
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fb59 	bl	8003e38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	f003 0207 	and.w	r2, r3, #7
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d901      	bls.n	80017ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e04c      	b.n	8001848 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	da0e      	bge.n	80017d4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2201      	movs	r2, #1
 80017d0:	705a      	strb	r2, [r3, #1]
 80017d2:	e00c      	b.n	80017ee <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_PCD_EP_SetStall+0x7e>
 800180a:	2302      	movs	r3, #2
 800180c:	e01c      	b.n	8001848 <HAL_PCD_EP_SetStall+0xb8>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68f9      	ldr	r1, [r7, #12]
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fe02 	bl	8005426 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	2b00      	cmp	r3, #0
 800182a:	d108      	bne.n	800183e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001836:	4619      	mov	r1, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f003 ff27 	bl	800568c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	f003 020f 	and.w	r2, r3, #15
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	d901      	bls.n	800186e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e040      	b.n	80018f0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800186e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	da0e      	bge.n	8001894 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	705a      	strb	r2, [r3, #1]
 8001892:	e00e      	b.n	80018b2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	f003 0207 	and.w	r2, r3, #7
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_PCD_EP_ClrStall+0x82>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e00e      	b.n	80018f0 <HAL_PCD_EP_ClrStall+0xa0>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68f9      	ldr	r1, [r7, #12]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fdf0 	bl	80054c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001900:	e2ec      	b.n	8001edc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800190a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800190c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001918:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800191c:	2b00      	cmp	r3, #0
 800191e:	f040 8161 	bne.w	8001be4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2b00      	cmp	r3, #0
 800192a:	d152      	bne.n	80019d2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193c:	81fb      	strh	r3, [r7, #14]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800194c:	b29b      	uxth	r3, r3
 800194e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3328      	adds	r3, #40	; 0x28
 8001954:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800195e:	b29b      	uxth	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4413      	add	r3, r2
 800196a:	3302      	adds	r3, #2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	4413      	add	r3, r2
 8001974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	441a      	add	r2, r3
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001990:	2100      	movs	r1, #0
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f005 fccf 	bl	8007336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 829b 	beq.w	8001edc <PCD_EP_ISR_Handler+0x5e4>
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 8296 	bne.w	8001edc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b292      	uxth	r2, r2
 80019c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019d0:	e284      	b.n	8001edc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d034      	beq.n	8001a56 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4413      	add	r3, r2
 8001a00:	3306      	adds	r3, #6
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f003 fe7e 	bl	800572c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	823b      	strh	r3, [r7, #16]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	8a3a      	ldrh	r2, [r7, #16]
 8001a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f005 fc44 	bl	80072dc <HAL_PCD_SetupStageCallback>
 8001a54:	e242      	b.n	8001edc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a56:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f280 823e 	bge.w	8001edc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	83bb      	strh	r3, [r7, #28]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	8bba      	ldrh	r2, [r7, #28]
 8001a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	3306      	adds	r3, #6
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d019      	beq.n	8001ae6 <PCD_EP_ISR_Handler+0x1ee>
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	6959      	ldr	r1, [r3, #20]
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f003 fe2e 	bl	800572c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	441a      	add	r2, r3
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f005 fc0d 	bl	8007300 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 81f2 	bne.w	8001edc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d112      	bne.n	8001b46 <PCD_EP_ISR_Handler+0x24e>
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	801a      	strh	r2, [r3, #0]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	801a      	strh	r2, [r3, #0]
 8001b44:	e02f      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x2ae>
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8001b4c:	d813      	bhi.n	8001b76 <PCD_EP_ISR_Handler+0x27e>
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <PCD_EP_ISR_Handler+0x270>
 8001b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b64:	3301      	adds	r3, #1
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
 8001b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	029b      	lsls	r3, r3, #10
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	801a      	strh	r2, [r3, #0]
 8001b74:	e017      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x2ae>
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <PCD_EP_ISR_Handler+0x298>
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb6:	827b      	strh	r3, [r7, #18]
 8001bb8:	8a7b      	ldrh	r3, [r7, #18]
 8001bba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bbe:	827b      	strh	r3, [r7, #18]
 8001bc0:	8a7b      	ldrh	r3, [r7, #18]
 8001bc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bc6:	827b      	strh	r3, [r7, #18]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	8a7b      	ldrh	r3, [r7, #18]
 8001bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	8013      	strh	r3, [r2, #0]
 8001be2:	e17b      	b.n	8001edc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bf6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f280 80ea 	bge.w	8001dd4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c16:	4013      	ands	r3, r2
 8001c18:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c32:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	7b1b      	ldrb	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d122      	bne.n	8001c96 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	3306      	adds	r3, #6
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c78:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001c7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8087 	beq.w	8001d90 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	6959      	ldr	r1, [r3, #20]
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	88da      	ldrh	r2, [r3, #6]
 8001c8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c90:	f003 fd4c 	bl	800572c <USB_ReadPMA>
 8001c94:	e07c      	b.n	8001d90 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	78db      	ldrb	r3, [r3, #3]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d108      	bne.n	8001cb0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f927 	bl	8001ef8 <HAL_PCD_EP_DB_Receive>
 8001caa:	4603      	mov	r3, r0
 8001cac:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001cae:	e06f      	b.n	8001d90 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cca:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	441a      	add	r2, r3
 8001cda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d021      	beq.n	8001d4e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d32:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02a      	beq.n	8001d90 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	6959      	ldr	r1, [r3, #20]
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	891a      	ldrh	r2, [r3, #8]
 8001d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d48:	f003 fcf0 	bl	800572c <USB_ReadPMA>
 8001d4c:	e020      	b.n	8001d90 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	3306      	adds	r3, #6
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d76:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	6959      	ldr	r1, [r3, #20]
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	895a      	ldrh	r2, [r3, #10]
 8001d8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d8c:	f003 fcce 	bl	800572c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d96:	441a      	add	r2, r3
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001da2:	441a      	add	r2, r3
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <PCD_EP_ISR_Handler+0x4c2>
 8001db0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d206      	bcs.n	8001dc8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f005 fa9d 	bl	8007300 <HAL_PCD_DataOutStageCallback>
 8001dc6:	e005      	b.n	8001dd4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 f832 	bl	8003e38 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001dd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d07e      	beq.n	8001edc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001dde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0c:	843b      	strh	r3, [r7, #32]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	441a      	add	r2, r3
 8001e1c:	8c3b      	ldrh	r3, [r7, #32]
 8001e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	78db      	ldrb	r3, [r3, #3]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d00c      	beq.n	8001e4c <PCD_EP_ISR_Handler+0x554>
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	78db      	ldrb	r3, [r3, #3]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d146      	bne.n	8001ed0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d141      	bne.n	8001ed0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	3302      	adds	r3, #2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e74:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	8bfb      	ldrh	r3, [r7, #30]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d906      	bls.n	8001e8e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	8bfb      	ldrh	r3, [r7, #30]
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	619a      	str	r2, [r3, #24]
 8001e8c:	e002      	b.n	8001e94 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d106      	bne.n	8001eaa <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f005 fa47 	bl	8007336 <HAL_PCD_DataInStageCallback>
 8001ea8:	e018      	b.n	8001edc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	8bfb      	ldrh	r3, [r7, #30]
 8001eb0:	441a      	add	r2, r3
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	8bfb      	ldrh	r3, [r7, #30]
 8001ebc:	441a      	add	r2, r3
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 ffb5 	bl	8003e38 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ece:	e005      	b.n	8001edc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ed0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f91b 	bl	8002112 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f6ff ad0a 	blt.w	8001902 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3738      	adds	r7, #56	; 0x38
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d07e      	beq.n	800200e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	3302      	adds	r3, #2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f38:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	8b7b      	ldrh	r3, [r7, #26]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d306      	bcc.n	8001f52 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	8b7b      	ldrh	r3, [r7, #26]
 8001f4a:	1ad2      	subs	r2, r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	619a      	str	r2, [r3, #24]
 8001f50:	e002      	b.n	8001f58 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d123      	bne.n	8001fa8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7a:	833b      	strh	r3, [r7, #24]
 8001f7c:	8b3b      	ldrh	r3, [r7, #24]
 8001f7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f82:	833b      	strh	r3, [r7, #24]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	441a      	add	r2, r3
 8001f92:	8b3b      	ldrh	r3, [r7, #24]
 8001f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fcc:	82fb      	strh	r3, [r7, #22]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	441a      	add	r2, r3
 8001fdc:	8afb      	ldrh	r3, [r7, #22]
 8001fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ff2:	8b7b      	ldrh	r3, [r7, #26]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8087 	beq.w	8002108 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	6959      	ldr	r1, [r3, #20]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	891a      	ldrh	r2, [r3, #8]
 8002006:	8b7b      	ldrh	r3, [r7, #26]
 8002008:	f003 fb90 	bl	800572c <USB_ReadPMA>
 800200c:	e07c      	b.n	8002108 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	3306      	adds	r3, #6
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002036:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	8b7b      	ldrh	r3, [r7, #26]
 800203e:	429a      	cmp	r2, r3
 8002040:	d306      	bcc.n	8002050 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	8b7b      	ldrh	r3, [r7, #26]
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	619a      	str	r2, [r3, #24]
 800204e:	e002      	b.n	8002056 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d123      	bne.n	80020a6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002078:	83fb      	strh	r3, [r7, #30]
 800207a:	8bfb      	ldrh	r3, [r7, #30]
 800207c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002080:	83fb      	strh	r3, [r7, #30]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	441a      	add	r2, r3
 8002090:	8bfb      	ldrh	r3, [r7, #30]
 8002092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800209a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d11f      	bne.n	80020f0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ca:	83bb      	strh	r3, [r7, #28]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	441a      	add	r2, r3
 80020da:	8bbb      	ldrh	r3, [r7, #28]
 80020dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020f0:	8b7b      	ldrh	r3, [r7, #26]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	6959      	ldr	r1, [r3, #20]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	895a      	ldrh	r2, [r3, #10]
 8002102:	8b7b      	ldrh	r3, [r7, #26]
 8002104:	f003 fb12 	bl	800572c <USB_ReadPMA>
    }
  }

  return count;
 8002108:	8b7b      	ldrh	r3, [r7, #26]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3720      	adds	r7, #32
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b0a2      	sub	sp, #136	; 0x88
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	4613      	mov	r3, r2
 800211e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 81c7 	beq.w	80024ba <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002134:	b29b      	uxth	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	3302      	adds	r3, #2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002154:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002160:	429a      	cmp	r2, r3
 8002162:	d907      	bls.n	8002174 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800216c:	1ad2      	subs	r2, r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	619a      	str	r2, [r3, #24]
 8002172:	e002      	b.n	800217a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 80b9 	bne.w	80022f6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	785b      	ldrb	r3, [r3, #1]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d126      	bne.n	80021da <HAL_PCD_EP_DB_Transmit+0xc8>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	4413      	add	r3, r2
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	011a      	lsls	r2, r3, #4
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	4413      	add	r3, r2
 80021ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021be:	b29a      	uxth	r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	801a      	strh	r2, [r3, #0]
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	801a      	strh	r2, [r3, #0]
 80021d8:	e01a      	b.n	8002210 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	785b      	ldrb	r3, [r3, #1]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d116      	bne.n	8002210 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	4413      	add	r3, r2
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	011a      	lsls	r2, r3, #4
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	4413      	add	r3, r2
 8002204:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	2200      	movs	r2, #0
 800220e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	623b      	str	r3, [r7, #32]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	785b      	ldrb	r3, [r3, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d126      	bne.n	800226c <HAL_PCD_EP_DB_Transmit+0x15a>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222c:	b29b      	uxth	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	011a      	lsls	r2, r3, #4
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	4413      	add	r3, r2
 8002240:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002250:	b29a      	uxth	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	801a      	strh	r2, [r3, #0]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002264:	b29a      	uxth	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	801a      	strh	r2, [r3, #0]
 800226a:	e017      	b.n	800229c <HAL_PCD_EP_DB_Transmit+0x18a>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	785b      	ldrb	r3, [r3, #1]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d113      	bne.n	800229c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227c:	b29b      	uxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	4413      	add	r3, r2
 8002284:	623b      	str	r3, [r7, #32]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	011a      	lsls	r2, r3, #4
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	4413      	add	r3, r2
 8002290:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2200      	movs	r2, #0
 800229a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f005 f847 	bl	8007336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 82d4 	beq.w	800285c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	827b      	strh	r3, [r7, #18]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	441a      	add	r2, r3
 80022de:	8a7b      	ldrh	r3, [r7, #18]
 80022e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	8013      	strh	r3, [r2, #0]
 80022f4:	e2b2      	b.n	800285c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d021      	beq.n	8002344 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	441a      	add	r2, r3
 800232c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800233c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002340:	b29b      	uxth	r3, r3
 8002342:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800234a:	2b01      	cmp	r3, #1
 800234c:	f040 8286 	bne.w	800285c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002358:	441a      	add	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002366:	441a      	add	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	429a      	cmp	r2, r3
 8002376:	d309      	bcc.n	800238c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002384:	1ad2      	subs	r2, r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	621a      	str	r2, [r3, #32]
 800238a:	e015      	b.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d107      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002394:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002398:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023a2:	e009      	b.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	785b      	ldrb	r3, [r3, #1]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d155      	bne.n	800246c <HAL_PCD_EP_DB_Transmit+0x35a>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	4413      	add	r3, r2
 80023d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	011a      	lsls	r2, r3, #4
 80023de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e0:	4413      	add	r3, r2
 80023e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
 80023e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d112      	bne.n	8002414 <HAL_PCD_EP_DB_Transmit+0x302>
 80023ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fc:	801a      	strh	r2, [r3, #0]
 80023fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240c:	b29a      	uxth	r2, r3
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	e047      	b.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x392>
 8002414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002416:	2b3e      	cmp	r3, #62	; 0x3e
 8002418:	d811      	bhi.n	800243e <HAL_PCD_EP_DB_Transmit+0x32c>
 800241a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_PCD_EP_DB_Transmit+0x31e>
 800242a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242c:	3301      	adds	r3, #1
 800242e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002432:	b29b      	uxth	r3, r3
 8002434:	029b      	lsls	r3, r3, #10
 8002436:	b29a      	uxth	r2, r3
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	801a      	strh	r2, [r3, #0]
 800243c:	e032      	b.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x392>
 800243e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	64bb      	str	r3, [r7, #72]	; 0x48
 8002444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <HAL_PCD_EP_DB_Transmit+0x342>
 800244e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002450:	3b01      	subs	r3, #1
 8002452:	64bb      	str	r3, [r7, #72]	; 0x48
 8002454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002456:	b29b      	uxth	r3, r3
 8002458:	029b      	lsls	r3, r3, #10
 800245a:	b29b      	uxth	r3, r3
 800245c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002464:	b29a      	uxth	r2, r3
 8002466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002468:	801a      	strh	r2, [r3, #0]
 800246a:	e01b      	b.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x392>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d117      	bne.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x392>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	643b      	str	r3, [r7, #64]	; 0x40
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002488:	4413      	add	r3, r2
 800248a:	643b      	str	r3, [r7, #64]	; 0x40
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	011a      	lsls	r2, r3, #4
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	4413      	add	r3, r2
 8002496:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249e:	b29a      	uxth	r2, r3
 80024a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6959      	ldr	r1, [r3, #20]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	891a      	ldrh	r2, [r3, #8]
 80024b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f003 f8f5 	bl	80056a2 <USB_WritePMA>
 80024b8:	e1d0      	b.n	800285c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	3306      	adds	r3, #6
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d307      	bcc.n	8002502 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024fa:	1ad2      	subs	r2, r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	619a      	str	r2, [r3, #24]
 8002500:	e002      	b.n	8002508 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f040 80c4 	bne.w	800269a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d126      	bne.n	8002568 <HAL_PCD_EP_DB_Transmit+0x456>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002528:	b29b      	uxth	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252e:	4413      	add	r3, r2
 8002530:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	011a      	lsls	r2, r3, #4
 8002538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253a:	4413      	add	r3, r2
 800253c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002540:	66bb      	str	r3, [r7, #104]	; 0x68
 8002542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800254c:	b29a      	uxth	r2, r3
 800254e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002550:	801a      	strh	r2, [r3, #0]
 8002552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800255c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002560:	b29a      	uxth	r2, r3
 8002562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	e01a      	b.n	800259e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d116      	bne.n	800259e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	677b      	str	r3, [r7, #116]	; 0x74
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002584:	4413      	add	r3, r2
 8002586:	677b      	str	r3, [r7, #116]	; 0x74
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	011a      	lsls	r2, r3, #4
 800258e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002590:	4413      	add	r3, r2
 8002592:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002596:	673b      	str	r3, [r7, #112]	; 0x70
 8002598:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800259a:	2200      	movs	r2, #0
 800259c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	785b      	ldrb	r3, [r3, #1]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d12f      	bne.n	800260c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025bc:	b29b      	uxth	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c4:	4413      	add	r3, r2
 80025c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	011a      	lsls	r2, r3, #4
 80025d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025d4:	4413      	add	r3, r2
 80025d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f0:	801a      	strh	r2, [r3, #0]
 80025f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002602:	b29a      	uxth	r2, r3
 8002604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	e017      	b.n	800263c <HAL_PCD_EP_DB_Transmit+0x52a>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	785b      	ldrb	r3, [r3, #1]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d113      	bne.n	800263c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002622:	4413      	add	r3, r2
 8002624:	67bb      	str	r3, [r7, #120]	; 0x78
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	011a      	lsls	r2, r3, #4
 800262c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800262e:	4413      	add	r3, r2
 8002630:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002634:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002638:	2200      	movs	r2, #0
 800263a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4619      	mov	r1, r3
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f004 fe77 	bl	8007336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 8104 	bne.w	800285c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	441a      	add	r2, r3
 8002680:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800268c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002694:	b29b      	uxth	r3, r3
 8002696:	8013      	strh	r3, [r2, #0]
 8002698:	e0e0      	b.n	800285c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d121      	bne.n	80026e8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	f040 80b4 	bne.w	800285c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026fc:	441a      	add	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270a:	441a      	add	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d309      	bcc.n	8002730 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002728:	1ad2      	subs	r2, r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	621a      	str	r2, [r3, #32]
 800272e:	e015      	b.n	800275c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d107      	bne.n	8002748 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800273c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002746:	e009      	b.n	800275c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	667b      	str	r3, [r7, #100]	; 0x64
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d155      	bne.n	8002816 <HAL_PCD_EP_DB_Transmit+0x704>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002778:	b29b      	uxth	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277e:	4413      	add	r3, r2
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	011a      	lsls	r2, r3, #4
 8002788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800278a:	4413      	add	r3, r2
 800278c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002790:	65bb      	str	r3, [r7, #88]	; 0x58
 8002792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002794:	2b00      	cmp	r3, #0
 8002796:	d112      	bne.n	80027be <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ba:	801a      	strh	r2, [r3, #0]
 80027bc:	e044      	b.n	8002848 <HAL_PCD_EP_DB_Transmit+0x736>
 80027be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c0:	2b3e      	cmp	r3, #62	; 0x3e
 80027c2:	d811      	bhi.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80027c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c6:	085b      	lsrs	r3, r3, #1
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
 80027ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_PCD_EP_DB_Transmit+0x6c8>
 80027d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d6:	3301      	adds	r3, #1
 80027d8:	657b      	str	r3, [r7, #84]	; 0x54
 80027da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027dc:	b29b      	uxth	r3, r3
 80027de:	029b      	lsls	r3, r3, #10
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	e02f      	b.n	8002848 <HAL_PCD_EP_DB_Transmit+0x736>
 80027e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	657b      	str	r3, [r7, #84]	; 0x54
 80027ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <HAL_PCD_EP_DB_Transmit+0x6ec>
 80027f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fa:	3b01      	subs	r3, #1
 80027fc:	657b      	str	r3, [r7, #84]	; 0x54
 80027fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002800:	b29b      	uxth	r3, r3
 8002802:	029b      	lsls	r3, r3, #10
 8002804:	b29b      	uxth	r3, r3
 8002806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800280a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800280e:	b29a      	uxth	r2, r3
 8002810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	e018      	b.n	8002848 <HAL_PCD_EP_DB_Transmit+0x736>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	785b      	ldrb	r3, [r3, #1]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d114      	bne.n	8002848 <HAL_PCD_EP_DB_Transmit+0x736>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800282c:	4413      	add	r3, r2
 800282e:	667b      	str	r3, [r7, #100]	; 0x64
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	011a      	lsls	r2, r3, #4
 8002836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002838:	4413      	add	r3, r2
 800283a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800283e:	663b      	str	r3, [r7, #96]	; 0x60
 8002840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002842:	b29a      	uxth	r2, r3
 8002844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002846:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6959      	ldr	r1, [r3, #20]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	895a      	ldrh	r2, [r3, #10]
 8002854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002856:	b29b      	uxth	r3, r3
 8002858:	f002 ff23 	bl	80056a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002876:	823b      	strh	r3, [r7, #16]
 8002878:	8a3b      	ldrh	r3, [r7, #16]
 800287a:	f083 0310 	eor.w	r3, r3, #16
 800287e:	823b      	strh	r3, [r7, #16]
 8002880:	8a3b      	ldrh	r3, [r7, #16]
 8002882:	f083 0320 	eor.w	r3, r3, #32
 8002886:	823b      	strh	r3, [r7, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	8a3b      	ldrh	r3, [r7, #16]
 8002898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3788      	adds	r7, #136	; 0x88
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b087      	sub	sp, #28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	817b      	strh	r3, [r7, #10]
 80028c4:	4613      	mov	r3, r2
 80028c6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028c8:	897b      	ldrh	r3, [r7, #10]
 80028ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d4:	897b      	ldrh	r3, [r7, #10]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e009      	b.n	8002900 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028ec:	897a      	ldrh	r2, [r7, #10]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4413      	add	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002900:	893b      	ldrh	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d107      	bne.n	8002916 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	b29a      	uxth	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	80da      	strh	r2, [r3, #6]
 8002914:	e00b      	b.n	800292e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2201      	movs	r2, #1
 800291a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	b29a      	uxth	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	b29a      	uxth	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
	...

0800293c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e26c      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8087 	beq.w	8002a6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800295c:	4b92      	ldr	r3, [pc, #584]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b04      	cmp	r3, #4
 8002966:	d00c      	beq.n	8002982 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002968:	4b8f      	ldr	r3, [pc, #572]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d112      	bne.n	800299a <HAL_RCC_OscConfig+0x5e>
 8002974:	4b8c      	ldr	r3, [pc, #560]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002980:	d10b      	bne.n	800299a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002982:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d06c      	beq.n	8002a68 <HAL_RCC_OscConfig+0x12c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d168      	bne.n	8002a68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e246      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x76>
 80029a4:	4b80      	ldr	r3, [pc, #512]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a7f      	ldr	r2, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	e02e      	b.n	8002a10 <HAL_RCC_OscConfig+0xd4>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x98>
 80029ba:	4b7b      	ldr	r3, [pc, #492]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7a      	ldr	r2, [pc, #488]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b78      	ldr	r3, [pc, #480]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a77      	ldr	r2, [pc, #476]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e01d      	b.n	8002a10 <HAL_RCC_OscConfig+0xd4>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0xbc>
 80029de:	4b72      	ldr	r3, [pc, #456]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a71      	ldr	r2, [pc, #452]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b6f      	ldr	r3, [pc, #444]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6e      	ldr	r2, [pc, #440]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0xd4>
 80029f8:	4b6b      	ldr	r3, [pc, #428]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6a      	ldr	r2, [pc, #424]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a67      	ldr	r2, [pc, #412]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fd fe78 	bl	800070c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fd fe74 	bl	800070c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1fa      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0xe4>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fd fe64 	bl	800070c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7fd fe60 	bl	800070c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1e6      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x10c>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d063      	beq.n	8002b3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a76:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a82:	4b49      	ldr	r3, [pc, #292]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d11c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x18c>
 8002a8e:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d116      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x176>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1ba      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4939      	ldr	r1, [pc, #228]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	e03a      	b.n	8002b3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad0:	4b36      	ldr	r3, [pc, #216]	; (8002bac <HAL_RCC_OscConfig+0x270>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fd fe19 	bl	800070c <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ade:	f7fd fe15 	bl	800070c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e19b      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4927      	ldr	r1, [pc, #156]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
 8002b10:	e015      	b.n	8002b3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_RCC_OscConfig+0x270>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fd fdf8 	bl	800070c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b20:	f7fd fdf4 	bl	800070c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e17a      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d03a      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d019      	beq.n	8002b86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7fd fdd8 	bl	800070c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b60:	f7fd fdd4 	bl	800070c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e15a      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f000 fac4 	bl	800310c <RCC_Delay>
 8002b84:	e01c      	b.n	8002bc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_RCC_OscConfig+0x274>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8c:	f7fd fdbe 	bl	800070c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b92:	e00f      	b.n	8002bb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b94:	f7fd fdba 	bl	800070c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d908      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e140      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	42420000 	.word	0x42420000
 8002bb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	4b9e      	ldr	r3, [pc, #632]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e9      	bne.n	8002b94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a6 	beq.w	8002d1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd2:	4b97      	ldr	r3, [pc, #604]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b94      	ldr	r3, [pc, #592]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4a93      	ldr	r2, [pc, #588]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be8:	61d3      	str	r3, [r2, #28]
 8002bea:	4b91      	ldr	r3, [pc, #580]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	4b8e      	ldr	r3, [pc, #568]	; (8002e34 <HAL_RCC_OscConfig+0x4f8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d118      	bne.n	8002c38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c06:	4b8b      	ldr	r3, [pc, #556]	; (8002e34 <HAL_RCC_OscConfig+0x4f8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a8a      	ldr	r2, [pc, #552]	; (8002e34 <HAL_RCC_OscConfig+0x4f8>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c12:	f7fd fd7b 	bl	800070c <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1a:	f7fd fd77 	bl	800070c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b64      	cmp	r3, #100	; 0x64
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0fd      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	4b81      	ldr	r3, [pc, #516]	; (8002e34 <HAL_RCC_OscConfig+0x4f8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x312>
 8002c40:	4b7b      	ldr	r3, [pc, #492]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4a7a      	ldr	r2, [pc, #488]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6213      	str	r3, [r2, #32]
 8002c4c:	e02d      	b.n	8002caa <HAL_RCC_OscConfig+0x36e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x334>
 8002c56:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4a75      	ldr	r2, [pc, #468]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	6213      	str	r3, [r2, #32]
 8002c62:	4b73      	ldr	r3, [pc, #460]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4a72      	ldr	r2, [pc, #456]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	6213      	str	r3, [r2, #32]
 8002c6e:	e01c      	b.n	8002caa <HAL_RCC_OscConfig+0x36e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b05      	cmp	r3, #5
 8002c76:	d10c      	bne.n	8002c92 <HAL_RCC_OscConfig+0x356>
 8002c78:	4b6d      	ldr	r3, [pc, #436]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a6c      	ldr	r2, [pc, #432]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	6213      	str	r3, [r2, #32]
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a69      	ldr	r2, [pc, #420]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	e00b      	b.n	8002caa <HAL_RCC_OscConfig+0x36e>
 8002c92:	4b67      	ldr	r3, [pc, #412]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4a66      	ldr	r2, [pc, #408]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6213      	str	r3, [r2, #32]
 8002c9e:	4b64      	ldr	r3, [pc, #400]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4a63      	ldr	r2, [pc, #396]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d015      	beq.n	8002cde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7fd fd2b 	bl	800070c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fd fd27 	bl	800070c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0ab      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	4b57      	ldr	r3, [pc, #348]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ee      	beq.n	8002cba <HAL_RCC_OscConfig+0x37e>
 8002cdc:	e014      	b.n	8002d08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fd fd15 	bl	800070c <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fd fd11 	bl	800070c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e095      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfc:	4b4c      	ldr	r3, [pc, #304]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ee      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d105      	bne.n	8002d1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0e:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4a47      	ldr	r2, [pc, #284]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8081 	beq.w	8002e26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d24:	4b42      	ldr	r3, [pc, #264]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d061      	beq.n	8002df4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d146      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d38:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_OscConfig+0x4fc>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7fd fce5 	bl	800070c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d46:	f7fd fce1 	bl	800070c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e067      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d58:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d108      	bne.n	8002d80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d6e:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	492d      	ldr	r1, [pc, #180]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d80:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a19      	ldr	r1, [r3, #32]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	430b      	orrs	r3, r1
 8002d92:	4927      	ldr	r1, [pc, #156]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_RCC_OscConfig+0x4fc>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fd fcb5 	bl	800070c <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fd fcb1 	bl	800070c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e037      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x46a>
 8002dc4:	e02f      	b.n	8002e26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <HAL_RCC_OscConfig+0x4fc>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fd fc9e 	bl	800070c <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fd fc9a 	bl	800070c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e020      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x498>
 8002df2:	e018      	b.n	8002e26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e013      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCC_OscConfig+0x4f4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40007000 	.word	0x40007000
 8002e38:	42420060 	.word	0x42420060

08002e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0d0      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d910      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 0207 	bic.w	r2, r3, #7
 8002e66:	4965      	ldr	r1, [pc, #404]	; (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b63      	ldr	r3, [pc, #396]	; (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b8      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e98:	4b59      	ldr	r3, [pc, #356]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a58      	ldr	r2, [pc, #352]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ea2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb0:	4b53      	ldr	r3, [pc, #332]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b50      	ldr	r3, [pc, #320]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	494d      	ldr	r1, [pc, #308]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d040      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d115      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07f      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b41      	ldr	r3, [pc, #260]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e073      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b3d      	ldr	r3, [pc, #244]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06b      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b39      	ldr	r3, [pc, #228]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4936      	ldr	r1, [pc, #216]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7fd fbee 	bl	800070c <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fd fbea 	bl	800070c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e053      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d210      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 0207 	bic.w	r2, r3, #7
 8002f72:	4922      	ldr	r1, [pc, #136]	; (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e032      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4916      	ldr	r1, [pc, #88]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fb6:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	490e      	ldr	r1, [pc, #56]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fca:	f000 f821 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	490a      	ldr	r1, [pc, #40]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	5ccb      	ldrb	r3, [r1, r3]
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe2:	4a09      	ldr	r2, [pc, #36]	; (8003008 <HAL_RCC_ClockConfig+0x1cc>)
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_ClockConfig+0x1d0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fb4c 	bl	8000688 <HAL_InitTick>

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40022000 	.word	0x40022000
 8003000:	40021000 	.word	0x40021000
 8003004:	080078dc 	.word	0x080078dc
 8003008:	20000000 	.word	0x20000000
 800300c:	20000004 	.word	0x20000004

08003010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003010:	b490      	push	{r4, r7}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003016:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003018:	1d3c      	adds	r4, r7, #4
 800301a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800301c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003020:	f240 2301 	movw	r3, #513	; 0x201
 8003024:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d002      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x40>
 800304a:	2b08      	cmp	r3, #8
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x46>
 800304e:	e02d      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003052:	623b      	str	r3, [r7, #32]
      break;
 8003054:	e02d      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	0c9b      	lsrs	r3, r3, #18
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003062:	4413      	add	r3, r2
 8003064:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003068:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	0c5b      	lsrs	r3, r3, #17
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003082:	4413      	add	r3, r2
 8003084:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003088:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800308e:	fb02 f203 	mul.w	r2, r2, r3
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
 800309a:	e004      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	623b      	str	r3, [r7, #32]
      break;
 80030aa:	e002      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ae:	623b      	str	r3, [r7, #32]
      break;
 80030b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b2:	6a3b      	ldr	r3, [r7, #32]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3728      	adds	r7, #40	; 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc90      	pop	{r4, r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	08007870 	.word	0x08007870
 80030c4:	40021000 	.word	0x40021000
 80030c8:	007a1200 	.word	0x007a1200
 80030cc:	003d0900 	.word	0x003d0900

080030d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d4:	4b02      	ldr	r3, [pc, #8]	; (80030e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	20000000 	.word	0x20000000

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030e8:	f7ff fff2 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4903      	ldr	r1, [pc, #12]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	080078ec 	.word	0x080078ec

0800310c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <RCC_Delay+0x34>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <RCC_Delay+0x38>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0a5b      	lsrs	r3, r3, #9
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003128:	bf00      	nop
  }
  while (Delay --);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e5a      	subs	r2, r3, #1
 800312e:	60fa      	str	r2, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f9      	bne.n	8003128 <RCC_Delay+0x1c>
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	20000000 	.word	0x20000000
 8003144:	10624dd3 	.word	0x10624dd3

08003148 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d07d      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003164:	2300      	movs	r3, #0
 8003166:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003168:	4b4f      	ldr	r3, [pc, #316]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10d      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003174:	4b4c      	ldr	r3, [pc, #304]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4a4b      	ldr	r2, [pc, #300]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317e:	61d3      	str	r3, [r2, #28]
 8003180:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318c:	2301      	movs	r3, #1
 800318e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	4b46      	ldr	r3, [pc, #280]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d118      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319c:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a42      	ldr	r2, [pc, #264]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a8:	f7fd fab0 	bl	800070c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	e008      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b0:	f7fd faac 	bl	800070c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e06d      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b3a      	ldr	r3, [pc, #232]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02e      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d027      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031ec:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031f6:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031fc:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003202:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d014      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fd fa7b 	bl	800070c <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fd fa77 	bl	800070c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e036      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324a:	4313      	orrs	r3, r2
 800324c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	490b      	ldr	r1, [pc, #44]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	4904      	ldr	r1, [pc, #16]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40007000 	.word	0x40007000
 80032b0:	42420440 	.word	0x42420440

080032b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032b4:	b084      	sub	sp, #16
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	f107 0014 	add.w	r0, r7, #20
 80032c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	b004      	add	sp, #16
 80032d2:	4770      	bx	lr

080032d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80032e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80032e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003308:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800330c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	b29b      	uxth	r3, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	b29b      	uxth	r3, r3
 800331e:	4013      	ands	r3, r2
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800334c:	b084      	sub	sp, #16
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	f107 0014 	add.w	r0, r7, #20
 800335a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	b004      	add	sp, #16
 800338a:	4770      	bx	lr

0800338c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800338c:	b480      	push	{r7}
 800338e:	b09b      	sub	sp, #108	; 0x6c
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	78db      	ldrb	r3, [r3, #3]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d81f      	bhi.n	80033fe <USB_ActivateEndpoint+0x72>
 80033be:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <USB_ActivateEndpoint+0x38>)
 80033c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c4:	080033d5 	.word	0x080033d5
 80033c8:	080033f1 	.word	0x080033f1
 80033cc:	08003407 	.word	0x08003407
 80033d0:	080033e3 	.word	0x080033e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80033d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80033d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80033e0:	e012      	b.n	8003408 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80033e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80033e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80033ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80033ee:	e00b      	b.n	8003408 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80033f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80033f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80033fc:	e004      	b.n	8003408 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003404:	e000      	b.n	8003408 <USB_ActivateEndpoint+0x7c>
      break;
 8003406:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	441a      	add	r2, r3
 8003412:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800341e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003426:	b29b      	uxth	r3, r3
 8003428:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003440:	b29a      	uxth	r2, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	4313      	orrs	r3, r2
 800344a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	441a      	add	r2, r3
 8003458:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800345c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346c:	b29b      	uxth	r3, r3
 800346e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	7b1b      	ldrb	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 8149 	bne.w	800370c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	785b      	ldrb	r3, [r3, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8084 	beq.w	800358c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800348e:	b29b      	uxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	4413      	add	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	011a      	lsls	r2, r3, #4
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	88db      	ldrh	r3, [r3, #6]
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	81fb      	strh	r3, [r7, #14]
 80034c6:	89fb      	ldrh	r3, [r7, #14]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01b      	beq.n	8003508 <USB_ActivateEndpoint+0x17c>
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	81bb      	strh	r3, [r7, #12]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	89bb      	ldrh	r3, [r7, #12]
 80034f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003500:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003504:	b29b      	uxth	r3, r3
 8003506:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	78db      	ldrb	r3, [r3, #3]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d020      	beq.n	8003552 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003526:	813b      	strh	r3, [r7, #8]
 8003528:	893b      	ldrh	r3, [r7, #8]
 800352a:	f083 0320 	eor.w	r3, r3, #32
 800352e:	813b      	strh	r3, [r7, #8]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	893b      	ldrh	r3, [r7, #8]
 800353c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354c:	b29b      	uxth	r3, r3
 800354e:	8013      	strh	r3, [r2, #0]
 8003550:	e27f      	b.n	8003a52 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003568:	817b      	strh	r3, [r7, #10]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	441a      	add	r2, r3
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800357a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800357e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003586:	b29b      	uxth	r3, r3
 8003588:	8013      	strh	r3, [r2, #0]
 800358a:	e262      	b.n	8003a52 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003596:	b29b      	uxth	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	4413      	add	r3, r2
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	011a      	lsls	r2, r3, #4
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	88db      	ldrh	r3, [r3, #6]
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	4413      	add	r3, r2
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	011a      	lsls	r2, r3, #4
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	4413      	add	r3, r2
 80035de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035e2:	623b      	str	r3, [r7, #32]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d112      	bne.n	8003612 <USB_ActivateEndpoint+0x286>
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	801a      	strh	r2, [r3, #0]
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800360a:	b29a      	uxth	r2, r3
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	e02f      	b.n	8003672 <USB_ActivateEndpoint+0x2e6>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b3e      	cmp	r3, #62	; 0x3e
 8003618:	d813      	bhi.n	8003642 <USB_ActivateEndpoint+0x2b6>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	663b      	str	r3, [r7, #96]	; 0x60
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <USB_ActivateEndpoint+0x2a8>
 800362e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003630:	3301      	adds	r3, #1
 8003632:	663b      	str	r3, [r7, #96]	; 0x60
 8003634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003636:	b29b      	uxth	r3, r3
 8003638:	029b      	lsls	r3, r3, #10
 800363a:	b29a      	uxth	r2, r3
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	801a      	strh	r2, [r3, #0]
 8003640:	e017      	b.n	8003672 <USB_ActivateEndpoint+0x2e6>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	663b      	str	r3, [r7, #96]	; 0x60
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <USB_ActivateEndpoint+0x2d0>
 8003656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003658:	3b01      	subs	r3, #1
 800365a:	663b      	str	r3, [r7, #96]	; 0x60
 800365c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800365e:	b29b      	uxth	r3, r3
 8003660:	029b      	lsls	r3, r3, #10
 8003662:	b29b      	uxth	r3, r3
 8003664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366c:	b29a      	uxth	r2, r3
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	83fb      	strh	r3, [r7, #30]
 8003680:	8bfb      	ldrh	r3, [r7, #30]
 8003682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01b      	beq.n	80036c2 <USB_ActivateEndpoint+0x336>
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a0:	83bb      	strh	r3, [r7, #28]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	441a      	add	r2, r3
 80036ac:	8bbb      	ldrh	r3, [r7, #28]
 80036ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036be:	b29b      	uxth	r3, r3
 80036c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d8:	837b      	strh	r3, [r7, #26]
 80036da:	8b7b      	ldrh	r3, [r7, #26]
 80036dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036e0:	837b      	strh	r3, [r7, #26]
 80036e2:	8b7b      	ldrh	r3, [r7, #26]
 80036e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036e8:	837b      	strh	r3, [r7, #26]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	441a      	add	r2, r3
 80036f4:	8b7b      	ldrh	r3, [r7, #26]
 80036f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003706:	b29b      	uxth	r3, r3
 8003708:	8013      	strh	r3, [r2, #0]
 800370a:	e1a2      	b.n	8003a52 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800371e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003722:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	441a      	add	r2, r3
 8003730:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003744:	b29b      	uxth	r3, r3
 8003746:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	65bb      	str	r3, [r7, #88]	; 0x58
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003758:	4413      	add	r3, r2
 800375a:	65bb      	str	r3, [r7, #88]	; 0x58
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	011a      	lsls	r2, r3, #4
 8003762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003764:	4413      	add	r3, r2
 8003766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800376a:	657b      	str	r3, [r7, #84]	; 0x54
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	891b      	ldrh	r3, [r3, #8]
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377a:	801a      	strh	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	653b      	str	r3, [r7, #80]	; 0x50
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003786:	b29b      	uxth	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378c:	4413      	add	r3, r2
 800378e:	653b      	str	r3, [r7, #80]	; 0x50
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	011a      	lsls	r2, r3, #4
 8003796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003798:	4413      	add	r3, r2
 800379a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	895b      	ldrh	r3, [r3, #10]
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	785b      	ldrb	r3, [r3, #1]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f040 8091 	bne.w	80038dc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80037c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80037ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d01b      	beq.n	800380a <USB_ActivateEndpoint+0x47e>
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	441a      	add	r2, r3
 80037f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003806:	b29b      	uxth	r3, r3
 8003808:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	873b      	strh	r3, [r7, #56]	; 0x38
 8003818:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01b      	beq.n	800385a <USB_ActivateEndpoint+0x4ce>
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003838:	86fb      	strh	r3, [r7, #54]	; 0x36
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	441a      	add	r2, r3
 8003844:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800384a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800384e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003852:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003856:	b29b      	uxth	r3, r3
 8003858:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003870:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003872:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003874:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003878:	86bb      	strh	r3, [r7, #52]	; 0x34
 800387a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800387c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003880:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	441a      	add	r2, r3
 800388c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800388e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800389a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800389e:	b29b      	uxth	r3, r3
 80038a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	441a      	add	r2, r3
 80038c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80038c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	8013      	strh	r3, [r2, #0]
 80038da:	e0ba      	b.n	8003a52 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80038ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01d      	beq.n	8003934 <USB_ActivateEndpoint+0x5a8>
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800392c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003930:	b29b      	uxth	r3, r3
 8003932:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003944:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01d      	beq.n	800398c <USB_ActivateEndpoint+0x600>
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003966:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	441a      	add	r2, r3
 8003974:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800397c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003984:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003988:	b29b      	uxth	r3, r3
 800398a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	78db      	ldrb	r3, [r3, #3]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d024      	beq.n	80039de <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80039ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039b2:	f083 0320 	eor.w	r3, r3, #32
 80039b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	441a      	add	r2, r3
 80039c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d8:	b29b      	uxth	r3, r3
 80039da:	8013      	strh	r3, [r2, #0]
 80039dc:	e01d      	b.n	8003a1a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a30:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	441a      	add	r2, r3
 8003a3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003a52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	376c      	adds	r7, #108	; 0x6c
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b08d      	sub	sp, #52	; 0x34
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	7b1b      	ldrb	r3, [r3, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 808e 	bne.w	8003b90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	785b      	ldrb	r3, [r3, #1]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d044      	beq.n	8003b06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	81bb      	strh	r3, [r7, #12]
 8003a8a:	89bb      	ldrh	r3, [r7, #12]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01b      	beq.n	8003acc <USB_DeactivateEndpoint+0x6c>
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	817b      	strh	r3, [r7, #10]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	441a      	add	r2, r3
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae2:	813b      	strh	r3, [r7, #8]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	893b      	ldrh	r3, [r7, #8]
 8003af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	8013      	strh	r3, [r2, #0]
 8003b04:	e192      	b.n	8003e2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	827b      	strh	r3, [r7, #18]
 8003b14:	8a7b      	ldrh	r3, [r7, #18]
 8003b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01b      	beq.n	8003b56 <USB_DeactivateEndpoint+0xf6>
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b34:	823b      	strh	r3, [r7, #16]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	441a      	add	r2, r3
 8003b40:	8a3b      	ldrh	r3, [r7, #16]
 8003b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6c:	81fb      	strh	r3, [r7, #14]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	441a      	add	r2, r3
 8003b78:	89fb      	ldrh	r3, [r7, #14]
 8003b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	8013      	strh	r3, [r2, #0]
 8003b8e:	e14d      	b.n	8003e2c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 80a5 	bne.w	8003ce4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	843b      	strh	r3, [r7, #32]
 8003ba8:	8c3b      	ldrh	r3, [r7, #32]
 8003baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01b      	beq.n	8003bea <USB_DeactivateEndpoint+0x18a>
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc8:	83fb      	strh	r3, [r7, #30]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	441a      	add	r2, r3
 8003bd4:	8bfb      	ldrh	r3, [r7, #30]
 8003bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	83bb      	strh	r3, [r7, #28]
 8003bf8:	8bbb      	ldrh	r3, [r7, #28]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01b      	beq.n	8003c3a <USB_DeactivateEndpoint+0x1da>
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c18:	837b      	strh	r3, [r7, #26]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	441a      	add	r2, r3
 8003c24:	8b7b      	ldrh	r3, [r7, #26]
 8003c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c50:	833b      	strh	r3, [r7, #24]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	441a      	add	r2, r3
 8003c5c:	8b3b      	ldrh	r3, [r7, #24]
 8003c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c88:	82fb      	strh	r3, [r7, #22]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	441a      	add	r2, r3
 8003c94:	8afb      	ldrh	r3, [r7, #22]
 8003c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc0:	82bb      	strh	r3, [r7, #20]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	441a      	add	r2, r3
 8003ccc:	8abb      	ldrh	r3, [r7, #20]
 8003cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	8013      	strh	r3, [r2, #0]
 8003ce2:	e0a3      	b.n	8003e2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003cf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01b      	beq.n	8003d34 <USB_DeactivateEndpoint+0x2d4>
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003d42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01b      	beq.n	8003d84 <USB_DeactivateEndpoint+0x324>
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	853b      	strh	r3, [r7, #40]	; 0x28
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	441a      	add	r2, r3
 8003d6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	441a      	add	r2, r3
 8003da6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	441a      	add	r2, r3
 8003dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	441a      	add	r2, r3
 8003e16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3734      	adds	r7, #52	; 0x34
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b0cc      	sub	sp, #304	; 0x130
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	1d3b      	adds	r3, r7, #4
 8003e40:	6018      	str	r0, [r3, #0]
 8003e42:	463b      	mov	r3, r7
 8003e44:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e46:	463b      	mov	r3, r7
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	f040 872e 	bne.w	8004cae <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003e52:	463b      	mov	r3, r7
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	463b      	mov	r3, r7
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d905      	bls.n	8003e6e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003e62:	463b      	mov	r3, r7
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003e6c:	e004      	b.n	8003e78 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003e6e:	463b      	mov	r3, r7
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003e78:	463b      	mov	r3, r7
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	7b1b      	ldrb	r3, [r3, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d134      	bne.n	8003eec <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003e82:	463b      	mov	r3, r7
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6959      	ldr	r1, [r3, #20]
 8003e88:	463b      	mov	r3, r7
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	88da      	ldrh	r2, [r3, #6]
 8003e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	1d38      	adds	r0, r7, #4
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	f001 fc03 	bl	80056a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e9c:	f107 0310 	add.w	r3, r7, #16
 8003ea0:	1d3a      	adds	r2, r7, #4
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f107 0310 	add.w	r3, r7, #16
 8003eb6:	f107 0210 	add.w	r2, r7, #16
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	463b      	mov	r3, r7
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	011a      	lsls	r2, r3, #4
 8003ec8:	f107 0310 	add.w	r3, r7, #16
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	801a      	strh	r2, [r3, #0]
 8003ee8:	f000 beac 	b.w	8004c44 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003eec:	463b      	mov	r3, r7
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	78db      	ldrb	r3, [r3, #3]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	f040 838c 	bne.w	8004610 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003ef8:	463b      	mov	r3, r7
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6a1a      	ldr	r2, [r3, #32]
 8003efe:	463b      	mov	r3, r7
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	f240 8330 	bls.w	800456a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	463b      	mov	r3, r7
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	463b      	mov	r3, r7
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003f4e:	463b      	mov	r3, r7
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f58:	1ad2      	subs	r2, r2, r3
 8003f5a:	463b      	mov	r3, r7
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	463b      	mov	r3, r7
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 819e 	beq.w	80042b8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f80:	1d3a      	adds	r2, r7, #4
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	463b      	mov	r3, r7
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d17a      	bne.n	8004086 <USB_EPStartXfer+0x24e>
 8003f90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f94:	1d3a      	adds	r2, r7, #4
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003faa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	440a      	add	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	463b      	mov	r3, r7
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	011a      	lsls	r2, r3, #4
 8003fbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d11a      	bne.n	800400c <USB_EPStartXfer+0x1d4>
 8003fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004000:	b29a      	uxth	r2, r3
 8004002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	e062      	b.n	80040d2 <USB_EPStartXfer+0x29a>
 800400c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004010:	2b3e      	cmp	r3, #62	; 0x3e
 8004012:	d819      	bhi.n	8004048 <USB_EPStartXfer+0x210>
 8004014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800401e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <USB_EPStartXfer+0x1fc>
 800402a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800402e:	3301      	adds	r3, #1
 8004030:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004034:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004038:	b29b      	uxth	r3, r3
 800403a:	029b      	lsls	r3, r3, #10
 800403c:	b29a      	uxth	r2, r3
 800403e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	801a      	strh	r2, [r3, #0]
 8004046:	e044      	b.n	80040d2 <USB_EPStartXfer+0x29a>
 8004048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <USB_EPStartXfer+0x230>
 800405e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004062:	3b01      	subs	r3, #1
 8004064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004068:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800406c:	b29b      	uxth	r3, r3
 800406e:	029b      	lsls	r3, r3, #10
 8004070:	b29b      	uxth	r3, r3
 8004072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407a:	b29a      	uxth	r2, r3
 800407c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	e025      	b.n	80040d2 <USB_EPStartXfer+0x29a>
 8004086:	463b      	mov	r3, r7
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	785b      	ldrb	r3, [r3, #1]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d120      	bne.n	80040d2 <USB_EPStartXfer+0x29a>
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004098:	b29b      	uxth	r3, r3
 800409a:	4619      	mov	r1, r3
 800409c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	440a      	add	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	463b      	mov	r3, r7
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	011a      	lsls	r2, r3, #4
 80040b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4413      	add	r3, r2
 80040ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80040be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80040d2:	463b      	mov	r3, r7
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	895b      	ldrh	r3, [r3, #10]
 80040d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040dc:	463b      	mov	r3, r7
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6959      	ldr	r1, [r3, #20]
 80040e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80040ec:	1d38      	adds	r0, r7, #4
 80040ee:	6800      	ldr	r0, [r0, #0]
 80040f0:	f001 fad7 	bl	80056a2 <USB_WritePMA>
            ep->xfer_buff += len;
 80040f4:	463b      	mov	r3, r7
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040fe:	441a      	add	r2, r3
 8004100:	463b      	mov	r3, r7
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004106:	463b      	mov	r3, r7
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6a1a      	ldr	r2, [r3, #32]
 800410c:	463b      	mov	r3, r7
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	429a      	cmp	r2, r3
 8004114:	d909      	bls.n	800412a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004116:	463b      	mov	r3, r7
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a1a      	ldr	r2, [r3, #32]
 800411c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004120:	1ad2      	subs	r2, r2, r3
 8004122:	463b      	mov	r3, r7
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	621a      	str	r2, [r3, #32]
 8004128:	e008      	b.n	800413c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800412a:	463b      	mov	r3, r7
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004134:	463b      	mov	r3, r7
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800413c:	463b      	mov	r3, r7
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d17a      	bne.n	800423c <USB_EPStartXfer+0x404>
 8004146:	f107 0318 	add.w	r3, r7, #24
 800414a:	1d3a      	adds	r2, r7, #4
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	1d3b      	adds	r3, r7, #4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004158:	b29b      	uxth	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	f107 0318 	add.w	r3, r7, #24
 8004160:	f107 0218 	add.w	r2, r7, #24
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	440a      	add	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	463b      	mov	r3, r7
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	011a      	lsls	r2, r3, #4
 8004172:	f107 0318 	add.w	r3, r7, #24
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4413      	add	r3, r2
 800417a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800417e:	f107 0314 	add.w	r3, r7, #20
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d11a      	bne.n	80041c2 <USB_EPStartXfer+0x38a>
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800419a:	b29a      	uxth	r2, r3
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	801a      	strh	r2, [r3, #0]
 80041a4:	f107 0314 	add.w	r3, r7, #20
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	801a      	strh	r2, [r3, #0]
 80041c0:	e067      	b.n	8004292 <USB_EPStartXfer+0x45a>
 80041c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041c6:	2b3e      	cmp	r3, #62	; 0x3e
 80041c8:	d819      	bhi.n	80041fe <USB_EPStartXfer+0x3c6>
 80041ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <USB_EPStartXfer+0x3b2>
 80041e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041e4:	3301      	adds	r3, #1
 80041e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	029b      	lsls	r3, r3, #10
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	e049      	b.n	8004292 <USB_EPStartXfer+0x45a>
 80041fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <USB_EPStartXfer+0x3e6>
 8004214:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004218:	3b01      	subs	r3, #1
 800421a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800421e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004222:	b29b      	uxth	r3, r3
 8004224:	029b      	lsls	r3, r3, #10
 8004226:	b29b      	uxth	r3, r3
 8004228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004230:	b29a      	uxth	r2, r3
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	801a      	strh	r2, [r3, #0]
 800423a:	e02a      	b.n	8004292 <USB_EPStartXfer+0x45a>
 800423c:	463b      	mov	r3, r7
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d125      	bne.n	8004292 <USB_EPStartXfer+0x45a>
 8004246:	f107 0320 	add.w	r3, r7, #32
 800424a:	1d3a      	adds	r2, r7, #4
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004258:	b29b      	uxth	r3, r3
 800425a:	4619      	mov	r1, r3
 800425c:	f107 0320 	add.w	r3, r7, #32
 8004260:	f107 0220 	add.w	r2, r7, #32
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	440a      	add	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	463b      	mov	r3, r7
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	011a      	lsls	r2, r3, #4
 8004272:	f107 0320 	add.w	r3, r7, #32
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4413      	add	r3, r2
 800427a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800427e:	f107 031c 	add.w	r3, r7, #28
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004288:	b29a      	uxth	r2, r3
 800428a:	f107 031c 	add.w	r3, r7, #28
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004292:	463b      	mov	r3, r7
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	891b      	ldrh	r3, [r3, #8]
 8004298:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800429c:	463b      	mov	r3, r7
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6959      	ldr	r1, [r3, #20]
 80042a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80042ac:	1d38      	adds	r0, r7, #4
 80042ae:	6800      	ldr	r0, [r0, #0]
 80042b0:	f001 f9f7 	bl	80056a2 <USB_WritePMA>
 80042b4:	f000 bcc6 	b.w	8004c44 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042b8:	463b      	mov	r3, r7
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d164      	bne.n	800438c <USB_EPStartXfer+0x554>
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042c8:	1d3b      	adds	r3, r7, #4
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d6:	4413      	add	r3, r2
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80042da:	463b      	mov	r3, r7
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	011a      	lsls	r2, r3, #4
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e4:	4413      	add	r3, r2
 80042e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
 80042ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d112      	bne.n	800431a <USB_EPStartXfer+0x4e2>
 80042f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042fe:	b29a      	uxth	r2, r3
 8004300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004302:	801a      	strh	r2, [r3, #0]
 8004304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004312:	b29a      	uxth	r2, r3
 8004314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004316:	801a      	strh	r2, [r3, #0]
 8004318:	e057      	b.n	80043ca <USB_EPStartXfer+0x592>
 800431a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800431e:	2b3e      	cmp	r3, #62	; 0x3e
 8004320:	d817      	bhi.n	8004352 <USB_EPStartXfer+0x51a>
 8004322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800432c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <USB_EPStartXfer+0x50a>
 8004338:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800433c:	3301      	adds	r3, #1
 800433e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004342:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004346:	b29b      	uxth	r3, r3
 8004348:	029b      	lsls	r3, r3, #10
 800434a:	b29a      	uxth	r2, r3
 800434c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	e03b      	b.n	80043ca <USB_EPStartXfer+0x592>
 8004352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800435c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <USB_EPStartXfer+0x53a>
 8004368:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800436c:	3b01      	subs	r3, #1
 800436e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004372:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004376:	b29b      	uxth	r3, r3
 8004378:	029b      	lsls	r3, r3, #10
 800437a:	b29b      	uxth	r3, r3
 800437c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004384:	b29a      	uxth	r2, r3
 8004386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	e01e      	b.n	80043ca <USB_EPStartXfer+0x592>
 800438c:	463b      	mov	r3, r7
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d119      	bne.n	80043ca <USB_EPStartXfer+0x592>
 8004396:	1d3b      	adds	r3, r7, #4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	653b      	str	r3, [r7, #80]	; 0x50
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043aa:	4413      	add	r3, r2
 80043ac:	653b      	str	r3, [r7, #80]	; 0x50
 80043ae:	463b      	mov	r3, r7
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	011a      	lsls	r2, r3, #4
 80043b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b8:	4413      	add	r3, r2
 80043ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80043ca:	463b      	mov	r3, r7
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	891b      	ldrh	r3, [r3, #8]
 80043d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043d4:	463b      	mov	r3, r7
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6959      	ldr	r1, [r3, #20]
 80043da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80043e4:	1d38      	adds	r0, r7, #4
 80043e6:	6800      	ldr	r0, [r0, #0]
 80043e8:	f001 f95b 	bl	80056a2 <USB_WritePMA>
            ep->xfer_buff += len;
 80043ec:	463b      	mov	r3, r7
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043f6:	441a      	add	r2, r3
 80043f8:	463b      	mov	r3, r7
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80043fe:	463b      	mov	r3, r7
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	463b      	mov	r3, r7
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	d909      	bls.n	8004422 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800440e:	463b      	mov	r3, r7
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6a1a      	ldr	r2, [r3, #32]
 8004414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	463b      	mov	r3, r7
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	621a      	str	r2, [r3, #32]
 8004420:	e008      	b.n	8004434 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004422:	463b      	mov	r3, r7
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800442c:	463b      	mov	r3, r7
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2200      	movs	r2, #0
 8004432:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004434:	1d3b      	adds	r3, r7, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	643b      	str	r3, [r7, #64]	; 0x40
 800443a:	463b      	mov	r3, r7
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d164      	bne.n	800450e <USB_EPStartXfer+0x6d6>
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	63bb      	str	r3, [r7, #56]	; 0x38
 800444a:	1d3b      	adds	r3, r7, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	4413      	add	r3, r2
 800445a:	63bb      	str	r3, [r7, #56]	; 0x38
 800445c:	463b      	mov	r3, r7
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	011a      	lsls	r2, r3, #4
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	4413      	add	r3, r2
 8004468:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
 800446e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d112      	bne.n	800449c <USB_EPStartXfer+0x664>
 8004476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004480:	b29a      	uxth	r2, r3
 8004482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004494:	b29a      	uxth	r2, r3
 8004496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004498:	801a      	strh	r2, [r3, #0]
 800449a:	e054      	b.n	8004546 <USB_EPStartXfer+0x70e>
 800449c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044a0:	2b3e      	cmp	r3, #62	; 0x3e
 80044a2:	d817      	bhi.n	80044d4 <USB_EPStartXfer+0x69c>
 80044a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80044ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d004      	beq.n	80044c4 <USB_EPStartXfer+0x68c>
 80044ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044be:	3301      	adds	r3, #1
 80044c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80044c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	029b      	lsls	r3, r3, #10
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d0:	801a      	strh	r2, [r3, #0]
 80044d2:	e038      	b.n	8004546 <USB_EPStartXfer+0x70e>
 80044d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80044de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <USB_EPStartXfer+0x6bc>
 80044ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044ee:	3b01      	subs	r3, #1
 80044f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80044f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	029b      	lsls	r3, r3, #10
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004506:	b29a      	uxth	r2, r3
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	e01b      	b.n	8004546 <USB_EPStartXfer+0x70e>
 800450e:	463b      	mov	r3, r7
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	785b      	ldrb	r3, [r3, #1]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d116      	bne.n	8004546 <USB_EPStartXfer+0x70e>
 8004518:	1d3b      	adds	r3, r7, #4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004520:	b29b      	uxth	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004526:	4413      	add	r3, r2
 8004528:	643b      	str	r3, [r7, #64]	; 0x40
 800452a:	463b      	mov	r3, r7
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	011a      	lsls	r2, r3, #4
 8004532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004534:	4413      	add	r3, r2
 8004536:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800453c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004540:	b29a      	uxth	r2, r3
 8004542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004544:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004546:	463b      	mov	r3, r7
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	895b      	ldrh	r3, [r3, #10]
 800454c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004550:	463b      	mov	r3, r7
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6959      	ldr	r1, [r3, #20]
 8004556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800455a:	b29b      	uxth	r3, r3
 800455c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004560:	1d38      	adds	r0, r7, #4
 8004562:	6800      	ldr	r0, [r0, #0]
 8004564:	f001 f89d 	bl	80056a2 <USB_WritePMA>
 8004568:	e36c      	b.n	8004c44 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800456a:	463b      	mov	r3, r7
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	463b      	mov	r3, r7
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	463b      	mov	r3, r7
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80045a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045b8:	1d3b      	adds	r3, r7, #4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045cc:	4413      	add	r3, r2
 80045ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045d0:	463b      	mov	r3, r7
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	011a      	lsls	r2, r3, #4
 80045d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045da:	4413      	add	r3, r2
 80045dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80045e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80045ec:	463b      	mov	r3, r7
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	891b      	ldrh	r3, [r3, #8]
 80045f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045f6:	463b      	mov	r3, r7
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6959      	ldr	r1, [r3, #20]
 80045fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004600:	b29b      	uxth	r3, r3
 8004602:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004606:	1d38      	adds	r0, r7, #4
 8004608:	6800      	ldr	r0, [r0, #0]
 800460a:	f001 f84a 	bl	80056a2 <USB_WritePMA>
 800460e:	e319      	b.n	8004c44 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004610:	1d3b      	adds	r3, r7, #4
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	463b      	mov	r3, r7
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	463b      	mov	r3, r7
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004648:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800464c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004650:	b29b      	uxth	r3, r3
 8004652:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004654:	463b      	mov	r3, r7
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6a1a      	ldr	r2, [r3, #32]
 800465a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800465e:	1ad2      	subs	r2, r2, r3
 8004660:	463b      	mov	r3, r7
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	463b      	mov	r3, r7
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8162 	beq.w	8004946 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800468a:	463b      	mov	r3, r7
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d164      	bne.n	800475e <USB_EPStartXfer+0x926>
 8004694:	1d3b      	adds	r3, r7, #4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	67bb      	str	r3, [r7, #120]	; 0x78
 800469a:	1d3b      	adds	r3, r7, #4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a8:	4413      	add	r3, r2
 80046aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ac:	463b      	mov	r3, r7
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	011a      	lsls	r2, r3, #4
 80046b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046b6:	4413      	add	r3, r2
 80046b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046bc:	677b      	str	r3, [r7, #116]	; 0x74
 80046be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d112      	bne.n	80046ec <USB_EPStartXfer+0x8b4>
 80046c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e057      	b.n	800479c <USB_EPStartXfer+0x964>
 80046ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046f0:	2b3e      	cmp	r3, #62	; 0x3e
 80046f2:	d817      	bhi.n	8004724 <USB_EPStartXfer+0x8ec>
 80046f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80046fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <USB_EPStartXfer+0x8dc>
 800470a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800470e:	3301      	adds	r3, #1
 8004710:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004714:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004718:	b29b      	uxth	r3, r3
 800471a:	029b      	lsls	r3, r3, #10
 800471c:	b29a      	uxth	r2, r3
 800471e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	e03b      	b.n	800479c <USB_EPStartXfer+0x964>
 8004724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800472e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <USB_EPStartXfer+0x90c>
 800473a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800473e:	3b01      	subs	r3, #1
 8004740:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004744:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004748:	b29b      	uxth	r3, r3
 800474a:	029b      	lsls	r3, r3, #10
 800474c:	b29b      	uxth	r3, r3
 800474e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004756:	b29a      	uxth	r2, r3
 8004758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800475a:	801a      	strh	r2, [r3, #0]
 800475c:	e01e      	b.n	800479c <USB_EPStartXfer+0x964>
 800475e:	463b      	mov	r3, r7
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d119      	bne.n	800479c <USB_EPStartXfer+0x964>
 8004768:	1d3b      	adds	r3, r7, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004778:	4413      	add	r3, r2
 800477a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800477e:	463b      	mov	r3, r7
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	011a      	lsls	r2, r3, #4
 8004786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800478a:	4413      	add	r3, r2
 800478c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004790:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004796:	b29a      	uxth	r2, r3
 8004798:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800479a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800479c:	463b      	mov	r3, r7
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	895b      	ldrh	r3, [r3, #10]
 80047a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047a6:	463b      	mov	r3, r7
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6959      	ldr	r1, [r3, #20]
 80047ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80047b6:	1d38      	adds	r0, r7, #4
 80047b8:	6800      	ldr	r0, [r0, #0]
 80047ba:	f000 ff72 	bl	80056a2 <USB_WritePMA>
          ep->xfer_buff += len;
 80047be:	463b      	mov	r3, r7
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047c8:	441a      	add	r2, r3
 80047ca:	463b      	mov	r3, r7
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80047d0:	463b      	mov	r3, r7
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	463b      	mov	r3, r7
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d909      	bls.n	80047f4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80047e0:	463b      	mov	r3, r7
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ea:	1ad2      	subs	r2, r2, r3
 80047ec:	463b      	mov	r3, r7
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	621a      	str	r2, [r3, #32]
 80047f2:	e008      	b.n	8004806 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80047f4:	463b      	mov	r3, r7
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80047fe:	463b      	mov	r3, r7
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 821a 	beq.w	8004c44 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004810:	463b      	mov	r3, r7
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d164      	bne.n	80048e4 <USB_EPStartXfer+0xaac>
 800481a:	1d3b      	adds	r3, r7, #4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004820:	1d3b      	adds	r3, r7, #4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004828:	b29b      	uxth	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800482e:	4413      	add	r3, r2
 8004830:	66bb      	str	r3, [r7, #104]	; 0x68
 8004832:	463b      	mov	r3, r7
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	011a      	lsls	r2, r3, #4
 800483a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800483c:	4413      	add	r3, r2
 800483e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004842:	667b      	str	r3, [r7, #100]	; 0x64
 8004844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d112      	bne.n	8004872 <USB_EPStartXfer+0xa3a>
 800484c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004856:	b29a      	uxth	r2, r3
 8004858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486a:	b29a      	uxth	r2, r3
 800486c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	e057      	b.n	8004922 <USB_EPStartXfer+0xaea>
 8004872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004876:	2b3e      	cmp	r3, #62	; 0x3e
 8004878:	d817      	bhi.n	80048aa <USB_EPStartXfer+0xa72>
 800487a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487e:	085b      	lsrs	r3, r3, #1
 8004880:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <USB_EPStartXfer+0xa62>
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004894:	3301      	adds	r3, #1
 8004896:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489e:	b29b      	uxth	r3, r3
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	e03b      	b.n	8004922 <USB_EPStartXfer+0xaea>
 80048aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80048b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <USB_EPStartXfer+0xa92>
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c4:	3b01      	subs	r3, #1
 80048c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	029b      	lsls	r3, r3, #10
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048dc:	b29a      	uxth	r2, r3
 80048de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e0:	801a      	strh	r2, [r3, #0]
 80048e2:	e01e      	b.n	8004922 <USB_EPStartXfer+0xaea>
 80048e4:	463b      	mov	r3, r7
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	785b      	ldrb	r3, [r3, #1]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d119      	bne.n	8004922 <USB_EPStartXfer+0xaea>
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	673b      	str	r3, [r7, #112]	; 0x70
 80048f4:	1d3b      	adds	r3, r7, #4
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004902:	4413      	add	r3, r2
 8004904:	673b      	str	r3, [r7, #112]	; 0x70
 8004906:	463b      	mov	r3, r7
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	011a      	lsls	r2, r3, #4
 800490e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004910:	4413      	add	r3, r2
 8004912:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004916:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800491c:	b29a      	uxth	r2, r3
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004922:	463b      	mov	r3, r7
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	891b      	ldrh	r3, [r3, #8]
 8004928:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800492c:	463b      	mov	r3, r7
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6959      	ldr	r1, [r3, #20]
 8004932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004936:	b29b      	uxth	r3, r3
 8004938:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800493c:	1d38      	adds	r0, r7, #4
 800493e:	6800      	ldr	r0, [r0, #0]
 8004940:	f000 feaf 	bl	80056a2 <USB_WritePMA>
 8004944:	e17e      	b.n	8004c44 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004946:	463b      	mov	r3, r7
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	785b      	ldrb	r3, [r3, #1]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d16f      	bne.n	8004a30 <USB_EPStartXfer+0xbf8>
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004958:	1d3b      	adds	r3, r7, #4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004960:	b29b      	uxth	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004968:	4413      	add	r3, r2
 800496a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800496e:	463b      	mov	r3, r7
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	011a      	lsls	r2, r3, #4
 8004976:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800497a:	4413      	add	r3, r2
 800497c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d116      	bne.n	80049ba <USB_EPStartXfer+0xb82>
 800498c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004998:	b29a      	uxth	r2, r3
 800499a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800499e:	801a      	strh	r2, [r3, #0]
 80049a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	e05f      	b.n	8004a7a <USB_EPStartXfer+0xc42>
 80049ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049be:	2b3e      	cmp	r3, #62	; 0x3e
 80049c0:	d818      	bhi.n	80049f4 <USB_EPStartXfer+0xbbc>
 80049c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80049cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <USB_EPStartXfer+0xbaa>
 80049d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80049dc:	3301      	adds	r3, #1
 80049de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80049e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	029b      	lsls	r3, r3, #10
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049f0:	801a      	strh	r2, [r3, #0]
 80049f2:	e042      	b.n	8004a7a <USB_EPStartXfer+0xc42>
 80049f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80049fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <USB_EPStartXfer+0xbdc>
 8004a0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004a14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	029b      	lsls	r3, r3, #10
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	e024      	b.n	8004a7a <USB_EPStartXfer+0xc42>
 8004a30:	463b      	mov	r3, r7
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	785b      	ldrb	r3, [r3, #1]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d11f      	bne.n	8004a7a <USB_EPStartXfer+0xc42>
 8004a3a:	1d3b      	adds	r3, r7, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a42:	1d3b      	adds	r3, r7, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a52:	4413      	add	r3, r2
 8004a54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a58:	463b      	mov	r3, r7
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	011a      	lsls	r2, r3, #4
 8004a60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a64:	4413      	add	r3, r2
 8004a66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	891b      	ldrh	r3, [r3, #8]
 8004a80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a84:	463b      	mov	r3, r7
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6959      	ldr	r1, [r3, #20]
 8004a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a94:	1d38      	adds	r0, r7, #4
 8004a96:	6800      	ldr	r0, [r0, #0]
 8004a98:	f000 fe03 	bl	80056a2 <USB_WritePMA>
          ep->xfer_buff += len;
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa6:	441a      	add	r2, r3
 8004aa8:	463b      	mov	r3, r7
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004aae:	463b      	mov	r3, r7
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a1a      	ldr	r2, [r3, #32]
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d909      	bls.n	8004ad2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8004abe:	463b      	mov	r3, r7
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac8:	1ad2      	subs	r2, r2, r3
 8004aca:	463b      	mov	r3, r7
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	621a      	str	r2, [r3, #32]
 8004ad0:	e008      	b.n	8004ae4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8004ad2:	463b      	mov	r3, r7
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004adc:	463b      	mov	r3, r7
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80ab 	beq.w	8004c44 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004af6:	463b      	mov	r3, r7
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d16f      	bne.n	8004be0 <USB_EPStartXfer+0xda8>
 8004b00:	1d3b      	adds	r3, r7, #4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b18:	4413      	add	r3, r2
 8004b1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b1e:	463b      	mov	r3, r7
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	011a      	lsls	r2, r3, #4
 8004b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d116      	bne.n	8004b6a <USB_EPStartXfer+0xd32>
 8004b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b4e:	801a      	strh	r2, [r3, #0]
 8004b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b66:	801a      	strh	r2, [r3, #0]
 8004b68:	e05b      	b.n	8004c22 <USB_EPStartXfer+0xdea>
 8004b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b70:	d818      	bhi.n	8004ba4 <USB_EPStartXfer+0xd6c>
 8004b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <USB_EPStartXfer+0xd5a>
 8004b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	029b      	lsls	r3, r3, #10
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ba0:	801a      	strh	r2, [r3, #0]
 8004ba2:	e03e      	b.n	8004c22 <USB_EPStartXfer+0xdea>
 8004ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <USB_EPStartXfer+0xd8c>
 8004bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	029b      	lsls	r3, r3, #10
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bdc:	801a      	strh	r2, [r3, #0]
 8004bde:	e020      	b.n	8004c22 <USB_EPStartXfer+0xdea>
 8004be0:	463b      	mov	r3, r7
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d11b      	bne.n	8004c22 <USB_EPStartXfer+0xdea>
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c00:	463b      	mov	r3, r7
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	011a      	lsls	r2, r3, #4
 8004c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c22:	463b      	mov	r3, r7
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	895b      	ldrh	r3, [r3, #10]
 8004c28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6959      	ldr	r1, [r3, #20]
 8004c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c3c:	1d38      	adds	r0, r7, #4
 8004c3e:	6800      	ldr	r0, [r0, #0]
 8004c40:	f000 fd2f 	bl	80056a2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c44:	1d3b      	adds	r3, r7, #4
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	463b      	mov	r3, r7
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f107 020a 	add.w	r2, r7, #10
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c62:	8013      	strh	r3, [r2, #0]
 8004c64:	f107 030a 	add.w	r3, r7, #10
 8004c68:	f107 020a 	add.w	r2, r7, #10
 8004c6c:	8812      	ldrh	r2, [r2, #0]
 8004c6e:	f082 0210 	eor.w	r2, r2, #16
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	f107 030a 	add.w	r3, r7, #10
 8004c78:	f107 020a 	add.w	r2, r7, #10
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	f082 0220 	eor.w	r2, r2, #32
 8004c82:	801a      	strh	r2, [r3, #0]
 8004c84:	1d3b      	adds	r3, r7, #4
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	463b      	mov	r3, r7
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	f107 030a 	add.w	r3, r7, #10
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	8013      	strh	r3, [r2, #0]
 8004cac:	e3b5      	b.n	800541a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004cae:	463b      	mov	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	7b1b      	ldrb	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f040 8090 	bne.w	8004dda <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004cba:	463b      	mov	r3, r7
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	463b      	mov	r3, r7
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d90e      	bls.n	8004ce8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8004cca:	463b      	mov	r3, r7
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cde:	1ad2      	subs	r2, r2, r3
 8004ce0:	463b      	mov	r3, r7
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	619a      	str	r2, [r3, #24]
 8004ce6:	e008      	b.n	8004cfa <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8004ce8:	463b      	mov	r3, r7
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d12:	4413      	add	r3, r2
 8004d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d18:	463b      	mov	r3, r7
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	011a      	lsls	r2, r3, #4
 8004d20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d24:	4413      	add	r3, r2
 8004d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d116      	bne.n	8004d64 <USB_EPStartXfer+0xf2c>
 8004d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	e32c      	b.n	80053be <USB_EPStartXfer+0x1586>
 8004d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d68:	2b3e      	cmp	r3, #62	; 0x3e
 8004d6a:	d818      	bhi.n	8004d9e <USB_EPStartXfer+0xf66>
 8004d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d70:	085b      	lsrs	r3, r3, #1
 8004d72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d004      	beq.n	8004d8c <USB_EPStartXfer+0xf54>
 8004d82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d86:	3301      	adds	r3, #1
 8004d88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	029b      	lsls	r3, r3, #10
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d9a:	801a      	strh	r2, [r3, #0]
 8004d9c:	e30f      	b.n	80053be <USB_EPStartXfer+0x1586>
 8004d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <USB_EPStartXfer+0xf86>
 8004db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004db8:	3b01      	subs	r3, #1
 8004dba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004dbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	029b      	lsls	r3, r3, #10
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dd6:	801a      	strh	r2, [r3, #0]
 8004dd8:	e2f1      	b.n	80053be <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004dda:	463b      	mov	r3, r7
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	78db      	ldrb	r3, [r3, #3]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	f040 818f 	bne.w	8005104 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004de6:	463b      	mov	r3, r7
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d175      	bne.n	8004edc <USB_EPStartXfer+0x10a4>
 8004df0:	1d3b      	adds	r3, r7, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e08:	4413      	add	r3, r2
 8004e0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e0e:	463b      	mov	r3, r7
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	011a      	lsls	r2, r3, #4
 8004e16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e24:	463b      	mov	r3, r7
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d116      	bne.n	8004e5c <USB_EPStartXfer+0x1024>
 8004e2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	e065      	b.n	8004f28 <USB_EPStartXfer+0x10f0>
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b3e      	cmp	r3, #62	; 0x3e
 8004e64:	d81a      	bhi.n	8004e9c <USB_EPStartXfer+0x1064>
 8004e66:	463b      	mov	r3, r7
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e72:	463b      	mov	r3, r7
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <USB_EPStartXfer+0x1052>
 8004e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e84:	3301      	adds	r3, #1
 8004e86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	029b      	lsls	r3, r3, #10
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e98:	801a      	strh	r2, [r3, #0]
 8004e9a:	e045      	b.n	8004f28 <USB_EPStartXfer+0x10f0>
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <USB_EPStartXfer+0x1088>
 8004eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	029b      	lsls	r3, r3, #10
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ed8:	801a      	strh	r2, [r3, #0]
 8004eda:	e025      	b.n	8004f28 <USB_EPStartXfer+0x10f0>
 8004edc:	463b      	mov	r3, r7
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d120      	bne.n	8004f28 <USB_EPStartXfer+0x10f0>
 8004ee6:	1d3b      	adds	r3, r7, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004eee:	1d3b      	adds	r3, r7, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004efe:	4413      	add	r3, r2
 8004f00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	011a      	lsls	r2, r3, #4
 8004f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f10:	4413      	add	r3, r2
 8004f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	1d3b      	adds	r3, r7, #4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f30:	463b      	mov	r3, r7
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d175      	bne.n	8005026 <USB_EPStartXfer+0x11ee>
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f52:	4413      	add	r3, r2
 8004f54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f58:	463b      	mov	r3, r7
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	011a      	lsls	r2, r3, #4
 8004f60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f64:	4413      	add	r3, r2
 8004f66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f6e:	463b      	mov	r3, r7
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d116      	bne.n	8004fa6 <USB_EPStartXfer+0x116e>
 8004f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	e061      	b.n	800506a <USB_EPStartXfer+0x1232>
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b3e      	cmp	r3, #62	; 0x3e
 8004fae:	d81a      	bhi.n	8004fe6 <USB_EPStartXfer+0x11ae>
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <USB_EPStartXfer+0x119c>
 8004fca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fce:	3301      	adds	r3, #1
 8004fd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fd4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	e041      	b.n	800506a <USB_EPStartXfer+0x1232>
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <USB_EPStartXfer+0x11d2>
 8005000:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005004:	3b01      	subs	r3, #1
 8005006:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800500a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800500e:	b29b      	uxth	r3, r3
 8005010:	029b      	lsls	r3, r3, #10
 8005012:	b29b      	uxth	r3, r3
 8005014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501c:	b29a      	uxth	r2, r3
 800501e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	e021      	b.n	800506a <USB_EPStartXfer+0x1232>
 8005026:	463b      	mov	r3, r7
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d11c      	bne.n	800506a <USB_EPStartXfer+0x1232>
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005038:	b29b      	uxth	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005040:	4413      	add	r3, r2
 8005042:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	011a      	lsls	r2, r3, #4
 800504e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005052:	4413      	add	r3, r2
 8005054:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005058:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800505c:	463b      	mov	r3, r7
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	b29a      	uxth	r2, r3
 8005064:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005068:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 81a4 	beq.w	80053be <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005076:	1d3b      	adds	r3, r7, #4
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800508a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800508e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <USB_EPStartXfer+0x126a>
 8005096:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10d      	bne.n	80050be <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80050a2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f040 8187 	bne.w	80053be <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80050b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 8180 	bne.w	80053be <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80050be:	1d3b      	adds	r3, r7, #4
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	463b      	mov	r3, r7
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80050dc:	1d3b      	adds	r3, r7, #4
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	463b      	mov	r3, r7
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80050ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050fe:	b29b      	uxth	r3, r3
 8005100:	8013      	strh	r3, [r2, #0]
 8005102:	e15c      	b.n	80053be <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005104:	463b      	mov	r3, r7
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	78db      	ldrb	r3, [r3, #3]
 800510a:	2b01      	cmp	r3, #1
 800510c:	f040 8155 	bne.w	80053ba <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005110:	463b      	mov	r3, r7
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	463b      	mov	r3, r7
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	429a      	cmp	r2, r3
 800511e:	d90e      	bls.n	800513e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005120:	463b      	mov	r3, r7
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800512a:	463b      	mov	r3, r7
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699a      	ldr	r2, [r3, #24]
 8005130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005134:	1ad2      	subs	r2, r2, r3
 8005136:	463b      	mov	r3, r7
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	619a      	str	r2, [r3, #24]
 800513c:	e008      	b.n	8005150 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800513e:	463b      	mov	r3, r7
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2200      	movs	r2, #0
 800514e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005150:	463b      	mov	r3, r7
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d16f      	bne.n	800523a <USB_EPStartXfer+0x1402>
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005162:	1d3b      	adds	r3, r7, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005172:	4413      	add	r3, r2
 8005174:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	011a      	lsls	r2, r3, #4
 8005180:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005184:	4413      	add	r3, r2
 8005186:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800518a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800518e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005192:	2b00      	cmp	r3, #0
 8005194:	d116      	bne.n	80051c4 <USB_EPStartXfer+0x138c>
 8005196:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051c0:	801a      	strh	r2, [r3, #0]
 80051c2:	e05f      	b.n	8005284 <USB_EPStartXfer+0x144c>
 80051c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c8:	2b3e      	cmp	r3, #62	; 0x3e
 80051ca:	d818      	bhi.n	80051fe <USB_EPStartXfer+0x13c6>
 80051cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d0:	085b      	lsrs	r3, r3, #1
 80051d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <USB_EPStartXfer+0x13b4>
 80051e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e6:	3301      	adds	r3, #1
 80051e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	029b      	lsls	r3, r3, #10
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051fa:	801a      	strh	r2, [r3, #0]
 80051fc:	e042      	b.n	8005284 <USB_EPStartXfer+0x144c>
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <USB_EPStartXfer+0x13e6>
 8005214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005218:	3b01      	subs	r3, #1
 800521a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800521e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005222:	b29b      	uxth	r3, r3
 8005224:	029b      	lsls	r3, r3, #10
 8005226:	b29b      	uxth	r3, r3
 8005228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005230:	b29a      	uxth	r2, r3
 8005232:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	e024      	b.n	8005284 <USB_EPStartXfer+0x144c>
 800523a:	463b      	mov	r3, r7
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d11f      	bne.n	8005284 <USB_EPStartXfer+0x144c>
 8005244:	1d3b      	adds	r3, r7, #4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800524c:	1d3b      	adds	r3, r7, #4
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005254:	b29b      	uxth	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	4413      	add	r3, r2
 800525e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005262:	463b      	mov	r3, r7
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	011a      	lsls	r2, r3, #4
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526e:	4413      	add	r3, r2
 8005270:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005274:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527c:	b29a      	uxth	r2, r3
 800527e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	1d3b      	adds	r3, r7, #4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800528c:	463b      	mov	r3, r7
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d16f      	bne.n	8005376 <USB_EPStartXfer+0x153e>
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ae:	4413      	add	r3, r2
 80052b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052b4:	463b      	mov	r3, r7
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c0:	4413      	add	r3, r2
 80052c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d116      	bne.n	8005300 <USB_EPStartXfer+0x14c8>
 80052d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052de:	b29a      	uxth	r2, r3
 80052e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e05e      	b.n	80053be <USB_EPStartXfer+0x1586>
 8005300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005304:	2b3e      	cmp	r3, #62	; 0x3e
 8005306:	d818      	bhi.n	800533a <USB_EPStartXfer+0x1502>
 8005308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <USB_EPStartXfer+0x14f0>
 800531e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005322:	3301      	adds	r3, #1
 8005324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005328:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800532c:	b29b      	uxth	r3, r3
 800532e:	029b      	lsls	r3, r3, #10
 8005330:	b29a      	uxth	r2, r3
 8005332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e041      	b.n	80053be <USB_EPStartXfer+0x1586>
 800533a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	2b00      	cmp	r3, #0
 800534e:	d104      	bne.n	800535a <USB_EPStartXfer+0x1522>
 8005350:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005354:	3b01      	subs	r3, #1
 8005356:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800535a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800535e:	b29b      	uxth	r3, r3
 8005360:	029b      	lsls	r3, r3, #10
 8005362:	b29b      	uxth	r3, r3
 8005364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536c:	b29a      	uxth	r2, r3
 800536e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	e023      	b.n	80053be <USB_EPStartXfer+0x1586>
 8005376:	463b      	mov	r3, r7
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d11e      	bne.n	80053be <USB_EPStartXfer+0x1586>
 8005380:	1d3b      	adds	r3, r7, #4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005388:	b29b      	uxth	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005390:	4413      	add	r3, r2
 8005392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005396:	463b      	mov	r3, r7
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	011a      	lsls	r2, r3, #4
 800539e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	e001      	b.n	80053be <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e02e      	b.n	800541c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053be:	1d3b      	adds	r3, r7, #4
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	463b      	mov	r3, r7
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80053dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80053e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053e4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80053e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80053ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053f0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80053f4:	1d3b      	adds	r3, r7, #4
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	463b      	mov	r3, r7
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005426:	b480      	push	{r7}
 8005428:	b085      	sub	sp, #20
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	785b      	ldrb	r3, [r3, #1]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d020      	beq.n	800547a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	b29b      	uxth	r3, r3
 8005446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544e:	81bb      	strh	r3, [r7, #12]
 8005450:	89bb      	ldrh	r3, [r7, #12]
 8005452:	f083 0310 	eor.w	r3, r3, #16
 8005456:	81bb      	strh	r3, [r7, #12]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	89bb      	ldrh	r3, [r7, #12]
 8005464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005474:	b29b      	uxth	r3, r3
 8005476:	8013      	strh	r3, [r2, #0]
 8005478:	e01f      	b.n	80054ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800548c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005490:	81fb      	strh	r3, [r7, #14]
 8005492:	89fb      	ldrh	r3, [r7, #14]
 8005494:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005498:	81fb      	strh	r3, [r7, #14]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	441a      	add	r2, r3
 80054a4:	89fb      	ldrh	r3, [r7, #14]
 80054a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	7b1b      	ldrb	r3, [r3, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f040 809d 	bne.w	8005614 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d04c      	beq.n	800557c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	823b      	strh	r3, [r7, #16]
 80054f0:	8a3b      	ldrh	r3, [r7, #16]
 80054f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01b      	beq.n	8005532 <USB_EPClearStall+0x6c>
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005510:	81fb      	strh	r3, [r7, #14]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	441a      	add	r2, r3
 800551c:	89fb      	ldrh	r3, [r7, #14]
 800551e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800552e:	b29b      	uxth	r3, r3
 8005530:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	78db      	ldrb	r3, [r3, #3]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d06c      	beq.n	8005614 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005550:	81bb      	strh	r3, [r7, #12]
 8005552:	89bb      	ldrh	r3, [r7, #12]
 8005554:	f083 0320 	eor.w	r3, r3, #32
 8005558:	81bb      	strh	r3, [r7, #12]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	441a      	add	r2, r3
 8005564:	89bb      	ldrh	r3, [r7, #12]
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]
 800557a:	e04b      	b.n	8005614 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	82fb      	strh	r3, [r7, #22]
 800558a:	8afb      	ldrh	r3, [r7, #22]
 800558c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01b      	beq.n	80055cc <USB_EPClearStall+0x106>
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	82bb      	strh	r3, [r7, #20]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	8abb      	ldrh	r3, [r7, #20]
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e2:	827b      	strh	r3, [r7, #18]
 80055e4:	8a7b      	ldrh	r3, [r7, #18]
 80055e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055ea:	827b      	strh	r3, [r7, #18]
 80055ec:	8a7b      	ldrh	r3, [r7, #18]
 80055ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055f2:	827b      	strh	r3, [r7, #18]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	8a7b      	ldrh	r3, [r7, #18]
 8005600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005610:	b29b      	uxth	r3, r3
 8005612:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr

08005620 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2280      	movs	r2, #128	; 0x80
 8005636:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr

0800565a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr

0800566e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800567c:	b29b      	uxth	r3, r3
 800567e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005680:	68fb      	ldr	r3, [r7, #12]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b08d      	sub	sp, #52	; 0x34
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	4611      	mov	r1, r2
 80056ae:	461a      	mov	r2, r3
 80056b0:	460b      	mov	r3, r1
 80056b2:	80fb      	strh	r3, [r7, #6]
 80056b4:	4613      	mov	r3, r2
 80056b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80056b8:	88bb      	ldrh	r3, [r7, #4]
 80056ba:	3301      	adds	r3, #1
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056c8:	88fb      	ldrh	r3, [r7, #6]
 80056ca:	005a      	lsls	r2, r3, #1
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056da:	e01e      	b.n	800571a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	3301      	adds	r3, #1
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	3302      	adds	r3, #2
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	3302      	adds	r3, #2
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	3301      	adds	r3, #1
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	3b01      	subs	r3, #1
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1dd      	bne.n	80056dc <USB_WritePMA+0x3a>
  }
}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	3734      	adds	r7, #52	; 0x34
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800572c:	b480      	push	{r7}
 800572e:	b08b      	sub	sp, #44	; 0x2c
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	4611      	mov	r1, r2
 8005738:	461a      	mov	r2, r3
 800573a:	460b      	mov	r3, r1
 800573c:	80fb      	strh	r3, [r7, #6]
 800573e:	4613      	mov	r3, r2
 8005740:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005742:	88bb      	ldrh	r3, [r7, #4]
 8005744:	085b      	lsrs	r3, r3, #1
 8005746:	b29b      	uxth	r3, r3
 8005748:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005752:	88fb      	ldrh	r3, [r7, #6]
 8005754:	005a      	lsls	r2, r3, #1
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800575e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
 8005764:	e01b      	b.n	800579e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	3302      	adds	r3, #2
 8005772:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	3301      	adds	r3, #1
 8005780:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	0a1b      	lsrs	r3, r3, #8
 8005786:	b2da      	uxtb	r2, r3
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	3301      	adds	r3, #1
 8005790:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	3302      	adds	r3, #2
 8005796:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	3b01      	subs	r3, #1
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e0      	bne.n	8005766 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80057a4:	88bb      	ldrh	r3, [r7, #4]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	701a      	strb	r2, [r3, #0]
  }
}
 80057c0:	bf00      	nop
 80057c2:	372c      	adds	r7, #44	; 0x2c
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr

080057ca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7c1b      	ldrb	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d115      	bne.n	800580e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e6:	2202      	movs	r2, #2
 80057e8:	2181      	movs	r1, #129	; 0x81
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 fe87 	bl	80074fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057fa:	2202      	movs	r2, #2
 80057fc:	2101      	movs	r1, #1
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fe7d 	bl	80074fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800580c:	e012      	b.n	8005834 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800580e:	2340      	movs	r3, #64	; 0x40
 8005810:	2202      	movs	r2, #2
 8005812:	2181      	movs	r1, #129	; 0x81
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 fe72 	bl	80074fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005820:	2340      	movs	r3, #64	; 0x40
 8005822:	2202      	movs	r2, #2
 8005824:	2101      	movs	r1, #1
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fe69 	bl	80074fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005834:	2308      	movs	r3, #8
 8005836:	2203      	movs	r2, #3
 8005838:	2182      	movs	r1, #130	; 0x82
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 fe5f 	bl	80074fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005846:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800584a:	f001 ff7f 	bl	800774c <USBD_static_malloc>
 800584e:	4602      	mov	r2, r0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	e026      	b.n	80058b4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	7c1b      	ldrb	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d109      	bne.n	80058a4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800589a:	2101      	movs	r1, #1
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 ff1f 	bl	80076e0 <USBD_LL_PrepareReceive>
 80058a2:	e007      	b.n	80058b4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058aa:	2340      	movs	r3, #64	; 0x40
 80058ac:	2101      	movs	r1, #1
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f001 ff16 	bl	80076e0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80058ce:	2181      	movs	r1, #129	; 0x81
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 fe3a 	bl	800754a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80058dc:	2101      	movs	r1, #1
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 fe33 	bl	800754a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80058ec:	2182      	movs	r1, #130	; 0x82
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 fe2b 	bl	800754a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00e      	beq.n	8005922 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005914:	4618      	mov	r0, r3
 8005916:	f001 ff25 	bl	8007764 <USBD_static_free>
    pdev->pClassData = NULL;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005952:	2b00      	cmp	r3, #0
 8005954:	d039      	beq.n	80059ca <USBD_CDC_Setup+0x9e>
 8005956:	2b20      	cmp	r3, #32
 8005958:	d17f      	bne.n	8005a5a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	88db      	ldrh	r3, [r3, #6]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d029      	beq.n	80059b6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b25b      	sxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	da11      	bge.n	8005990 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005978:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	88d2      	ldrh	r2, [r2, #6]
 800597e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005980:	6939      	ldr	r1, [r7, #16]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	88db      	ldrh	r3, [r3, #6]
 8005986:	461a      	mov	r2, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fa0a 	bl	8006da2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800598e:	e06b      	b.n	8005a68 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	785a      	ldrb	r2, [r3, #1]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	88db      	ldrh	r3, [r3, #6]
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80059a6:	6939      	ldr	r1, [r7, #16]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	88db      	ldrh	r3, [r3, #6]
 80059ac:	461a      	mov	r2, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 fa25 	bl	8006dfe <USBD_CtlPrepareRx>
      break;
 80059b4:	e058      	b.n	8005a68 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	7850      	ldrb	r0, [r2, #1]
 80059c2:	2200      	movs	r2, #0
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	4798      	blx	r3
      break;
 80059c8:	e04e      	b.n	8005a68 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b0b      	cmp	r3, #11
 80059d0:	d02e      	beq.n	8005a30 <USBD_CDC_Setup+0x104>
 80059d2:	2b0b      	cmp	r3, #11
 80059d4:	dc38      	bgt.n	8005a48 <USBD_CDC_Setup+0x11c>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <USBD_CDC_Setup+0xb4>
 80059da:	2b0a      	cmp	r3, #10
 80059dc:	d014      	beq.n	8005a08 <USBD_CDC_Setup+0xdc>
 80059de:	e033      	b.n	8005a48 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d107      	bne.n	80059fa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80059ea:	f107 030c 	add.w	r3, r7, #12
 80059ee:	2202      	movs	r2, #2
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f001 f9d5 	bl	8006da2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059f8:	e02e      	b.n	8005a58 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 f966 	bl	8006cce <USBD_CtlError>
            ret = USBD_FAIL;
 8005a02:	2302      	movs	r3, #2
 8005a04:	75fb      	strb	r3, [r7, #23]
          break;
 8005a06:	e027      	b.n	8005a58 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d107      	bne.n	8005a22 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a12:	f107 030f 	add.w	r3, r7, #15
 8005a16:	2201      	movs	r2, #1
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 f9c1 	bl	8006da2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a20:	e01a      	b.n	8005a58 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 f952 	bl	8006cce <USBD_CtlError>
            ret = USBD_FAIL;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a2e:	e013      	b.n	8005a58 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d00d      	beq.n	8005a56 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 f946 	bl	8006cce <USBD_CtlError>
            ret = USBD_FAIL;
 8005a42:	2302      	movs	r3, #2
 8005a44:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a46:	e006      	b.n	8005a56 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f001 f93f 	bl	8006cce <USBD_CtlError>
          ret = USBD_FAIL;
 8005a50:	2302      	movs	r3, #2
 8005a52:	75fb      	strb	r3, [r7, #23]
          break;
 8005a54:	e000      	b.n	8005a58 <USBD_CDC_Setup+0x12c>
          break;
 8005a56:	bf00      	nop
      }
      break;
 8005a58:	e006      	b.n	8005a68 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f001 f936 	bl	8006cce <USBD_CtlError>
      ret = USBD_FAIL;
 8005a62:	2302      	movs	r3, #2
 8005a64:	75fb      	strb	r3, [r7, #23]
      break;
 8005a66:	bf00      	nop
  }

  return ret;
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a84:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a8c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d03a      	beq.n	8005b0e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a98:	78fa      	ldrb	r2, [r7, #3]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	331c      	adds	r3, #28
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d029      	beq.n	8005b02 <USBD_CDC_DataIn+0x90>
 8005aae:	78fa      	ldrb	r2, [r7, #3]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	331c      	adds	r3, #28
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	78f9      	ldrb	r1, [r7, #3]
 8005ac2:	68b8      	ldr	r0, [r7, #8]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4403      	add	r3, r0
 8005ace:	3338      	adds	r3, #56	; 0x38
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ad6:	fb03 f301 	mul.w	r3, r3, r1
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d110      	bne.n	8005b02 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	331c      	adds	r3, #28
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005af4:	78f9      	ldrb	r1, [r7, #3]
 8005af6:	2300      	movs	r3, #0
 8005af8:	2200      	movs	r2, #0
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 fdcd 	bl	800769a <USBD_LL_Transmit>
 8005b00:	e003      	b.n	8005b0a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005b0e:	2302      	movs	r3, #2
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f001 fdf8 	bl	8007726 <USBD_LL_GetRxDataSize>
 8005b36:	4602      	mov	r2, r0
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00d      	beq.n	8005b64 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	4798      	blx	r3

    return USBD_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	e000      	b.n	8005b66 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005b64:	2302      	movs	r3, #2
  }
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d015      	beq.n	8005bb4 <USBD_CDC_EP0_RxReady+0x46>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b8e:	2bff      	cmp	r3, #255	; 0xff
 8005b90:	d010      	beq.n	8005bb4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005ba0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ba8:	b292      	uxth	r2, r2
 8005baa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	22ff      	movs	r2, #255	; 0xff
 8005bb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2243      	movs	r2, #67	; 0x43
 8005bcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005bce:	4b03      	ldr	r3, [pc, #12]	; (8005bdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000094 	.word	0x20000094

08005be0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2243      	movs	r2, #67	; 0x43
 8005bec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005bee:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	20000050 	.word	0x20000050

08005c00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2243      	movs	r2, #67	; 0x43
 8005c0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005c0e:	4b03      	ldr	r3, [pc, #12]	; (8005c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	200000d8 	.word	0x200000d8

08005c20 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	220a      	movs	r2, #10
 8005c2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005c2e:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	2000000c 	.word	0x2000000c

08005c40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c80:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c8a:	88fa      	ldrh	r2, [r7, #6]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01c      	beq.n	8005d18 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d115      	bne.n	8005d14 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2181      	movs	r1, #129	; 0x81
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fcc5 	bl	800769a <USBD_LL_Transmit>

      return USBD_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e002      	b.n	8005d1a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005d18:	2302      	movs	r3, #2
  }
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d017      	beq.n	8005d6c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	7c1b      	ldrb	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d109      	bne.n	8005d58 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d4e:	2101      	movs	r1, #1
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fcc5 	bl	80076e0 <USBD_LL_PrepareReceive>
 8005d56:	e007      	b.n	8005d68 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d5e:	2340      	movs	r3, #64	; 0x40
 8005d60:	2101      	movs	r1, #1
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f001 fcbc 	bl	80076e0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e000      	b.n	8005d6e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005d6c:	2302      	movs	r3, #2
  }
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	4613      	mov	r3, r2
 8005d82:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e01a      	b.n	8005dc4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	79fa      	ldrb	r2, [r7, #7]
 8005dba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f001 fb29 	bl	8007414 <USBD_LL_Init>

  return USBD_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e001      	b.n	8005df2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005dee:	2302      	movs	r3, #2
 8005df0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr

08005dfe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fb5e 	bl	80074c8 <USBD_LL_Start>

  return USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e36:	2302      	movs	r3, #2
 8005e38:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	78fa      	ldrb	r2, [r7, #3]
 8005e4e:	4611      	mov	r1, r2
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	4611      	mov	r1, r2
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3

  return USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fed8 	bl	8006c56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d016      	beq.n	8005ef8 <USBD_LL_SetupStage+0x6a>
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d81c      	bhi.n	8005f08 <USBD_LL_SetupStage+0x7a>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <USBD_LL_SetupStage+0x4a>
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d008      	beq.n	8005ee8 <USBD_LL_SetupStage+0x5a>
 8005ed6:	e017      	b.n	8005f08 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f9cb 	bl	800627c <USBD_StdDevReq>
      break;
 8005ee6:	e01a      	b.n	8005f1e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fa2d 	bl	8006350 <USBD_StdItfReq>
      break;
 8005ef6:	e012      	b.n	8005f1e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa6d 	bl	80063e0 <USBD_StdEPReq>
      break;
 8005f06:	e00a      	b.n	8005f1e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f001 fb36 	bl	8007588 <USBD_LL_StallEP>
      break;
 8005f1c:	bf00      	nop
  }

  return USBD_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	460b      	mov	r3, r1
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d14b      	bne.n	8005fd4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f42:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d134      	bne.n	8005fb8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d919      	bls.n	8005f8e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	1ad2      	subs	r2, r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d203      	bcs.n	8005f7c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	e002      	b.n	8005f82 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 ff57 	bl	8006e3a <USBD_CtlContinueRx>
 8005f8c:	e038      	b.n	8006000 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d105      	bne.n	8005fb0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 ff54 	bl	8006e5e <USBD_CtlSendStatus>
 8005fb6:	e023      	b.n	8006000 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fbe:	2b05      	cmp	r3, #5
 8005fc0:	d11e      	bne.n	8006000 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005fca:	2100      	movs	r1, #0
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f001 fadb 	bl	8007588 <USBD_LL_StallEP>
 8005fd2:	e015      	b.n	8006000 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00d      	beq.n	8005ffc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d108      	bne.n	8005ffc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	7afa      	ldrb	r2, [r7, #11]
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	4798      	blx	r3
 8005ffa:	e001      	b.n	8006000 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e000      	b.n	8006002 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b086      	sub	sp, #24
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	460b      	mov	r3, r1
 8006014:	607a      	str	r2, [r7, #4]
 8006016:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006018:	7afb      	ldrb	r3, [r7, #11]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d17f      	bne.n	800611e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3314      	adds	r3, #20
 8006022:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800602a:	2b02      	cmp	r3, #2
 800602c:	d15c      	bne.n	80060e8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	d915      	bls.n	8006066 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	b29b      	uxth	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fec1 	bl	8006dda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006058:	2300      	movs	r3, #0
 800605a:	2200      	movs	r2, #0
 800605c:	2100      	movs	r1, #0
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f001 fb3e 	bl	80076e0 <USBD_LL_PrepareReceive>
 8006064:	e04e      	b.n	8006104 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	6912      	ldr	r2, [r2, #16]
 800606e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006072:	fb02 f201 	mul.w	r2, r2, r1
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d11c      	bne.n	80060b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006084:	429a      	cmp	r2, r3
 8006086:	d316      	bcc.n	80060b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006092:	429a      	cmp	r2, r3
 8006094:	d20f      	bcs.n	80060b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006096:	2200      	movs	r2, #0
 8006098:	2100      	movs	r1, #0
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fe9d 	bl	8006dda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060a8:	2300      	movs	r3, #0
 80060aa:	2200      	movs	r2, #0
 80060ac:	2100      	movs	r1, #0
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f001 fb16 	bl	80076e0 <USBD_LL_PrepareReceive>
 80060b4:	e026      	b.n	8006104 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d105      	bne.n	80060d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80060d8:	2180      	movs	r1, #128	; 0x80
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f001 fa54 	bl	8007588 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fecf 	bl	8006e84 <USBD_CtlReceiveStatus>
 80060e6:	e00d      	b.n	8006104 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d004      	beq.n	80060fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d103      	bne.n	8006104 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f001 fa42 	bl	8007588 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800610a:	2b01      	cmp	r3, #1
 800610c:	d11d      	bne.n	800614a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff fe81 	bl	8005e16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800611c:	e015      	b.n	800614a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00d      	beq.n	8006146 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006130:	2b03      	cmp	r3, #3
 8006132:	d108      	bne.n	8006146 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	7afa      	ldrb	r2, [r7, #11]
 800613e:	4611      	mov	r1, r2
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	4798      	blx	r3
 8006144:	e001      	b.n	800614a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006146:	2302      	movs	r3, #2
 8006148:	e000      	b.n	800614c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800615c:	2340      	movs	r3, #64	; 0x40
 800615e:	2200      	movs	r2, #0
 8006160:	2100      	movs	r1, #0
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f001 f9cb 	bl	80074fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2240      	movs	r2, #64	; 0x40
 8006174:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006178:	2340      	movs	r3, #64	; 0x40
 800617a:	2200      	movs	r2, #0
 800617c:	2180      	movs	r1, #128	; 0x80
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 f9bd 	bl	80074fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2240      	movs	r2, #64	; 0x40
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d009      	beq.n	80061cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6852      	ldr	r2, [r2, #4]
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	4611      	mov	r1, r2
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
  }

  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr

080061f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2204      	movs	r2, #4
 800620c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr

0800621c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622a:	2b04      	cmp	r3, #4
 800622c:	d105      	bne.n	800623a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr

08006246 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006254:	2b03      	cmp	r3, #3
 8006256:	d10b      	bne.n	8006270 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d005      	beq.n	80062a2 <USBD_StdDevReq+0x26>
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	d84f      	bhi.n	800633a <USBD_StdDevReq+0xbe>
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <USBD_StdDevReq+0x36>
 800629e:	2b20      	cmp	r3, #32
 80062a0:	d14b      	bne.n	800633a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
      break;
 80062b0:	e048      	b.n	8006344 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	2b09      	cmp	r3, #9
 80062b8:	d839      	bhi.n	800632e <USBD_StdDevReq+0xb2>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <USBD_StdDevReq+0x44>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	08006311 	.word	0x08006311
 80062c4:	08006325 	.word	0x08006325
 80062c8:	0800632f 	.word	0x0800632f
 80062cc:	0800631b 	.word	0x0800631b
 80062d0:	0800632f 	.word	0x0800632f
 80062d4:	080062f3 	.word	0x080062f3
 80062d8:	080062e9 	.word	0x080062e9
 80062dc:	0800632f 	.word	0x0800632f
 80062e0:	08006307 	.word	0x08006307
 80062e4:	080062fd 	.word	0x080062fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f9dc 	bl	80066a8 <USBD_GetDescriptor>
          break;
 80062f0:	e022      	b.n	8006338 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fb3f 	bl	8006978 <USBD_SetAddress>
          break;
 80062fa:	e01d      	b.n	8006338 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fb7e 	bl	8006a00 <USBD_SetConfig>
          break;
 8006304:	e018      	b.n	8006338 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fc07 	bl	8006b1c <USBD_GetConfig>
          break;
 800630e:	e013      	b.n	8006338 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fc37 	bl	8006b86 <USBD_GetStatus>
          break;
 8006318:	e00e      	b.n	8006338 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fc65 	bl	8006bec <USBD_SetFeature>
          break;
 8006322:	e009      	b.n	8006338 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fc74 	bl	8006c14 <USBD_ClrFeature>
          break;
 800632c:	e004      	b.n	8006338 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fccc 	bl	8006cce <USBD_CtlError>
          break;
 8006336:	bf00      	nop
      }
      break;
 8006338:	e004      	b.n	8006344 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fcc6 	bl	8006cce <USBD_CtlError>
      break;
 8006342:	bf00      	nop
  }

  return ret;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop

08006350 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d005      	beq.n	8006376 <USBD_StdItfReq+0x26>
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d82e      	bhi.n	80063cc <USBD_StdItfReq+0x7c>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <USBD_StdItfReq+0x26>
 8006372:	2b20      	cmp	r3, #32
 8006374:	d12a      	bne.n	80063cc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637c:	3b01      	subs	r3, #1
 800637e:	2b02      	cmp	r3, #2
 8006380:	d81d      	bhi.n	80063be <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	889b      	ldrh	r3, [r3, #4]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	d813      	bhi.n	80063b4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	4798      	blx	r3
 800639a:	4603      	mov	r3, r0
 800639c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	88db      	ldrh	r3, [r3, #6]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d110      	bne.n	80063c8 <USBD_StdItfReq+0x78>
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10d      	bne.n	80063c8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fd56 	bl	8006e5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063b2:	e009      	b.n	80063c8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fc89 	bl	8006cce <USBD_CtlError>
          break;
 80063bc:	e004      	b.n	80063c8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc84 	bl	8006cce <USBD_CtlError>
          break;
 80063c6:	e000      	b.n	80063ca <USBD_StdItfReq+0x7a>
          break;
 80063c8:	bf00      	nop
      }
      break;
 80063ca:	e004      	b.n	80063d6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fc7d 	bl	8006cce <USBD_CtlError>
      break;
 80063d4:	bf00      	nop
  }

  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	889b      	ldrh	r3, [r3, #4]
 80063f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063fc:	2b40      	cmp	r3, #64	; 0x40
 80063fe:	d007      	beq.n	8006410 <USBD_StdEPReq+0x30>
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	f200 8146 	bhi.w	8006692 <USBD_StdEPReq+0x2b2>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <USBD_StdEPReq+0x40>
 800640a:	2b20      	cmp	r3, #32
 800640c:	f040 8141 	bne.w	8006692 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
      break;
 800641e:	e13d      	b.n	800669c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006428:	2b20      	cmp	r3, #32
 800642a:	d10a      	bne.n	8006442 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	e12d      	b.n	800669e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b03      	cmp	r3, #3
 8006448:	d007      	beq.n	800645a <USBD_StdEPReq+0x7a>
 800644a:	2b03      	cmp	r3, #3
 800644c:	f300 811b 	bgt.w	8006686 <USBD_StdEPReq+0x2a6>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d072      	beq.n	800653a <USBD_StdEPReq+0x15a>
 8006454:	2b01      	cmp	r3, #1
 8006456:	d03a      	beq.n	80064ce <USBD_StdEPReq+0xee>
 8006458:	e115      	b.n	8006686 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006460:	2b02      	cmp	r3, #2
 8006462:	d002      	beq.n	800646a <USBD_StdEPReq+0x8a>
 8006464:	2b03      	cmp	r3, #3
 8006466:	d015      	beq.n	8006494 <USBD_StdEPReq+0xb4>
 8006468:	e02b      	b.n	80064c2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00c      	beq.n	800648a <USBD_StdEPReq+0xaa>
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	2b80      	cmp	r3, #128	; 0x80
 8006474:	d009      	beq.n	800648a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 f884 	bl	8007588 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006480:	2180      	movs	r1, #128	; 0x80
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 f880 	bl	8007588 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006488:	e020      	b.n	80064cc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fc1e 	bl	8006cce <USBD_CtlError>
              break;
 8006492:	e01b      	b.n	80064cc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	885b      	ldrh	r3, [r3, #2]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10e      	bne.n	80064ba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00b      	beq.n	80064ba <USBD_StdEPReq+0xda>
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	2b80      	cmp	r3, #128	; 0x80
 80064a6:	d008      	beq.n	80064ba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	88db      	ldrh	r3, [r3, #6]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 f867 	bl	8007588 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fccf 	bl	8006e5e <USBD_CtlSendStatus>

              break;
 80064c0:	e004      	b.n	80064cc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fc02 	bl	8006cce <USBD_CtlError>
              break;
 80064ca:	bf00      	nop
          }
          break;
 80064cc:	e0e0      	b.n	8006690 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d002      	beq.n	80064de <USBD_StdEPReq+0xfe>
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d015      	beq.n	8006508 <USBD_StdEPReq+0x128>
 80064dc:	e026      	b.n	800652c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00c      	beq.n	80064fe <USBD_StdEPReq+0x11e>
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	2b80      	cmp	r3, #128	; 0x80
 80064e8:	d009      	beq.n	80064fe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 f84a 	bl	8007588 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80064f4:	2180      	movs	r1, #128	; 0x80
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 f846 	bl	8007588 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064fc:	e01c      	b.n	8006538 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fbe4 	bl	8006cce <USBD_CtlError>
              break;
 8006506:	e017      	b.n	8006538 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	885b      	ldrh	r3, [r3, #2]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d112      	bne.n	8006536 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 f851 	bl	80075c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fc9a 	bl	8006e5e <USBD_CtlSendStatus>
              }
              break;
 800652a:	e004      	b.n	8006536 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fbcd 	bl	8006cce <USBD_CtlError>
              break;
 8006534:	e000      	b.n	8006538 <USBD_StdEPReq+0x158>
              break;
 8006536:	bf00      	nop
          }
          break;
 8006538:	e0aa      	b.n	8006690 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006540:	2b02      	cmp	r3, #2
 8006542:	d002      	beq.n	800654a <USBD_StdEPReq+0x16a>
 8006544:	2b03      	cmp	r3, #3
 8006546:	d032      	beq.n	80065ae <USBD_StdEPReq+0x1ce>
 8006548:	e097      	b.n	800667a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <USBD_StdEPReq+0x180>
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d004      	beq.n	8006560 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fbb8 	bl	8006cce <USBD_CtlError>
                break;
 800655e:	e091      	b.n	8006684 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006564:	2b00      	cmp	r3, #0
 8006566:	da0b      	bge.n	8006580 <USBD_StdEPReq+0x1a0>
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	3310      	adds	r3, #16
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	4413      	add	r3, r2
 800657c:	3304      	adds	r3, #4
 800657e:	e00b      	b.n	8006598 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006580:	7bbb      	ldrb	r3, [r7, #14]
 8006582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	4413      	add	r3, r2
 8006596:	3304      	adds	r3, #4
 8006598:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2202      	movs	r2, #2
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fbfb 	bl	8006da2 <USBD_CtlSendData>
              break;
 80065ac:	e06a      	b.n	8006684 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da11      	bge.n	80065da <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3318      	adds	r3, #24
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d117      	bne.n	8006600 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fb7b 	bl	8006cce <USBD_CtlError>
                  break;
 80065d8:	e054      	b.n	8006684 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fb68 	bl	8006cce <USBD_CtlError>
                  break;
 80065fe:	e041      	b.n	8006684 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	da0b      	bge.n	8006620 <USBD_StdEPReq+0x240>
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	3310      	adds	r3, #16
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	4413      	add	r3, r2
 800661c:	3304      	adds	r3, #4
 800661e:	e00b      	b.n	8006638 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4413      	add	r3, r2
 8006636:	3304      	adds	r3, #4
 8006638:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <USBD_StdEPReq+0x266>
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d103      	bne.n	800664e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e00e      	b.n	800666c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 ffd6 	bl	8007604 <USBD_LL_IsStallEP>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e002      	b.n	800666c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2202      	movs	r2, #2
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fb95 	bl	8006da2 <USBD_CtlSendData>
              break;
 8006678:	e004      	b.n	8006684 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fb26 	bl	8006cce <USBD_CtlError>
              break;
 8006682:	bf00      	nop
          }
          break;
 8006684:	e004      	b.n	8006690 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fb20 	bl	8006cce <USBD_CtlError>
          break;
 800668e:	bf00      	nop
      }
      break;
 8006690:	e004      	b.n	800669c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fb1a 	bl	8006cce <USBD_CtlError>
      break;
 800669a:	bf00      	nop
  }

  return ret;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	2b06      	cmp	r3, #6
 80066ca:	f200 8128 	bhi.w	800691e <USBD_GetDescriptor+0x276>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <USBD_GetDescriptor+0x2c>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	08006709 	.word	0x08006709
 80066dc:	08006749 	.word	0x08006749
 80066e0:	0800691f 	.word	0x0800691f
 80066e4:	0800691f 	.word	0x0800691f
 80066e8:	080068bf 	.word	0x080068bf
 80066ec:	080068eb 	.word	0x080068eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
      break;
 8006706:	e112      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7c1b      	ldrb	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10d      	bne.n	800672c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	f107 0208 	add.w	r2, r7, #8
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3301      	adds	r3, #1
 8006726:	2202      	movs	r2, #2
 8006728:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800672a:	e100      	b.n	800692e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	f107 0208 	add.w	r2, r7, #8
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
 800673c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	2202      	movs	r2, #2
 8006744:	701a      	strb	r2, [r3, #0]
      break;
 8006746:	e0f2      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	885b      	ldrh	r3, [r3, #2]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b05      	cmp	r3, #5
 8006750:	f200 80ac 	bhi.w	80068ac <USBD_GetDescriptor+0x204>
 8006754:	a201      	add	r2, pc, #4	; (adr r2, 800675c <USBD_GetDescriptor+0xb4>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006775 	.word	0x08006775
 8006760:	080067a9 	.word	0x080067a9
 8006764:	080067dd 	.word	0x080067dd
 8006768:	08006811 	.word	0x08006811
 800676c:	08006845 	.word	0x08006845
 8006770:	08006879 	.word	0x08006879
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	7c12      	ldrb	r2, [r2, #16]
 800678c:	f107 0108 	add.w	r1, r7, #8
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006796:	e091      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fa97 	bl	8006cce <USBD_CtlError>
            err++;
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	3301      	adds	r3, #1
 80067a4:	72fb      	strb	r3, [r7, #11]
          break;
 80067a6:	e089      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	7c12      	ldrb	r2, [r2, #16]
 80067c0:	f107 0108 	add.w	r1, r7, #8
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
 80067c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ca:	e077      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa7d 	bl	8006cce <USBD_CtlError>
            err++;
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	3301      	adds	r3, #1
 80067d8:	72fb      	strb	r3, [r7, #11]
          break;
 80067da:	e06f      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	7c12      	ldrb	r2, [r2, #16]
 80067f4:	f107 0108 	add.w	r1, r7, #8
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fe:	e05d      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa63 	bl	8006cce <USBD_CtlError>
            err++;
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	3301      	adds	r3, #1
 800680c:	72fb      	strb	r3, [r7, #11]
          break;
 800680e:	e055      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	7c12      	ldrb	r2, [r2, #16]
 8006828:	f107 0108 	add.w	r1, r7, #8
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006832:	e043      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa49 	bl	8006cce <USBD_CtlError>
            err++;
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	3301      	adds	r3, #1
 8006840:	72fb      	strb	r3, [r7, #11]
          break;
 8006842:	e03b      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	7c12      	ldrb	r2, [r2, #16]
 800685c:	f107 0108 	add.w	r1, r7, #8
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
 8006864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006866:	e029      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa2f 	bl	8006cce <USBD_CtlError>
            err++;
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	3301      	adds	r3, #1
 8006874:	72fb      	strb	r3, [r7, #11]
          break;
 8006876:	e021      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	7c12      	ldrb	r2, [r2, #16]
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800689a:	e00f      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa15 	bl	8006cce <USBD_CtlError>
            err++;
 80068a4:	7afb      	ldrb	r3, [r7, #11]
 80068a6:	3301      	adds	r3, #1
 80068a8:	72fb      	strb	r3, [r7, #11]
          break;
 80068aa:	e007      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa0d 	bl	8006cce <USBD_CtlError>
          err++;
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	3301      	adds	r3, #1
 80068b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80068ba:	e038      	b.n	800692e <USBD_GetDescriptor+0x286>
 80068bc:	e037      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7c1b      	ldrb	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	f107 0208 	add.w	r2, r7, #8
 80068d2:	4610      	mov	r0, r2
 80068d4:	4798      	blx	r3
 80068d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068d8:	e029      	b.n	800692e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f9f6 	bl	8006cce <USBD_CtlError>
        err++;
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	3301      	adds	r3, #1
 80068e6:	72fb      	strb	r3, [r7, #11]
      break;
 80068e8:	e021      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	7c1b      	ldrb	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10d      	bne.n	800690e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f107 0208 	add.w	r2, r7, #8
 80068fe:	4610      	mov	r0, r2
 8006900:	4798      	blx	r3
 8006902:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	2207      	movs	r2, #7
 800690a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800690c:	e00f      	b.n	800692e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f9dc 	bl	8006cce <USBD_CtlError>
        err++;
 8006916:	7afb      	ldrb	r3, [r7, #11]
 8006918:	3301      	adds	r3, #1
 800691a:	72fb      	strb	r3, [r7, #11]
      break;
 800691c:	e007      	b.n	800692e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f9d4 	bl	8006cce <USBD_CtlError>
      err++;
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	3301      	adds	r3, #1
 800692a:	72fb      	strb	r3, [r7, #11]
      break;
 800692c:	bf00      	nop
  }

  if (err != 0U)
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11c      	bne.n	800696e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006934:	893b      	ldrh	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d011      	beq.n	800695e <USBD_GetDescriptor+0x2b6>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	88db      	ldrh	r3, [r3, #6]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	88da      	ldrh	r2, [r3, #6]
 8006946:	893b      	ldrh	r3, [r7, #8]
 8006948:	4293      	cmp	r3, r2
 800694a:	bf28      	it	cs
 800694c:	4613      	movcs	r3, r2
 800694e:	b29b      	uxth	r3, r3
 8006950:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	461a      	mov	r2, r3
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fa22 	bl	8006da2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	88db      	ldrh	r3, [r3, #6]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d104      	bne.n	8006970 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa79 	bl	8006e5e <USBD_CtlSendStatus>
 800696c:	e000      	b.n	8006970 <USBD_GetDescriptor+0x2c8>
    return;
 800696e:	bf00      	nop
    }
  }
}
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop

08006978 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	889b      	ldrh	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d130      	bne.n	80069ec <USBD_SetAddress+0x74>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d12c      	bne.n	80069ec <USBD_SetAddress+0x74>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	885b      	ldrh	r3, [r3, #2]
 8006996:	2b7f      	cmp	r3, #127	; 0x7f
 8006998:	d828      	bhi.n	80069ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	885b      	ldrh	r3, [r3, #2]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d104      	bne.n	80069ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f98b 	bl	8006cce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b8:	e01d      	b.n	80069f6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	7bfa      	ldrb	r2, [r7, #15]
 80069be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fe48 	bl	800765c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fa46 	bl	8006e5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d004      	beq.n	80069e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e0:	e009      	b.n	80069f6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ea:	e004      	b.n	80069f6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f96d 	bl	8006cce <USBD_CtlError>
  }
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	885b      	ldrh	r3, [r3, #2]
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	4b41      	ldr	r3, [pc, #260]	; (8006b18 <USBD_SetConfig+0x118>)
 8006a12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a14:	4b40      	ldr	r3, [pc, #256]	; (8006b18 <USBD_SetConfig+0x118>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d904      	bls.n	8006a26 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f955 	bl	8006cce <USBD_CtlError>
 8006a24:	e075      	b.n	8006b12 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d002      	beq.n	8006a36 <USBD_SetConfig+0x36>
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d023      	beq.n	8006a7c <USBD_SetConfig+0x7c>
 8006a34:	e062      	b.n	8006afc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006a36:	4b38      	ldr	r3, [pc, #224]	; (8006b18 <USBD_SetConfig+0x118>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01a      	beq.n	8006a74 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006a3e:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <USBD_SetConfig+0x118>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2203      	movs	r2, #3
 8006a4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a50:	4b31      	ldr	r3, [pc, #196]	; (8006b18 <USBD_SetConfig+0x118>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff f9e7 	bl	8005e2a <USBD_SetClassConfig>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d104      	bne.n	8006a6c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f932 	bl	8006cce <USBD_CtlError>
            return;
 8006a6a:	e052      	b.n	8006b12 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f9f6 	bl	8006e5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a72:	e04e      	b.n	8006b12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f9f2 	bl	8006e5e <USBD_CtlSendStatus>
        break;
 8006a7a:	e04a      	b.n	8006b12 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a7c:	4b26      	ldr	r3, [pc, #152]	; (8006b18 <USBD_SetConfig+0x118>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d112      	bne.n	8006aaa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006a8c:	4b22      	ldr	r3, [pc, #136]	; (8006b18 <USBD_SetConfig+0x118>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a96:	4b20      	ldr	r3, [pc, #128]	; (8006b18 <USBD_SetConfig+0x118>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff f9e3 	bl	8005e68 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f9db 	bl	8006e5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006aa8:	e033      	b.n	8006b12 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006aaa:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <USBD_SetConfig+0x118>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d01d      	beq.n	8006af4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff f9d1 	bl	8005e68 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <USBD_SetConfig+0x118>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ad0:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <USBD_SetConfig+0x118>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff f9a7 	bl	8005e2a <USBD_SetClassConfig>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d104      	bne.n	8006aec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f8f2 	bl	8006cce <USBD_CtlError>
            return;
 8006aea:	e012      	b.n	8006b12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f9b6 	bl	8006e5e <USBD_CtlSendStatus>
        break;
 8006af2:	e00e      	b.n	8006b12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f9b2 	bl	8006e5e <USBD_CtlSendStatus>
        break;
 8006afa:	e00a      	b.n	8006b12 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f8e5 	bl	8006cce <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006b04:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <USBD_SetConfig+0x118>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff f9ac 	bl	8005e68 <USBD_ClrClassConfig>
        break;
 8006b10:	bf00      	nop
    }
  }
}
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	200001b7 	.word	0x200001b7

08006b1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	88db      	ldrh	r3, [r3, #6]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d004      	beq.n	8006b38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f8cc 	bl	8006cce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b36:	e022      	b.n	8006b7e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	dc02      	bgt.n	8006b48 <USBD_GetConfig+0x2c>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	dc03      	bgt.n	8006b4e <USBD_GetConfig+0x32>
 8006b46:	e015      	b.n	8006b74 <USBD_GetConfig+0x58>
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d00b      	beq.n	8006b64 <USBD_GetConfig+0x48>
 8006b4c:	e012      	b.n	8006b74 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3308      	adds	r3, #8
 8006b58:	2201      	movs	r2, #1
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f920 	bl	8006da2 <USBD_CtlSendData>
        break;
 8006b62:	e00c      	b.n	8006b7e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3304      	adds	r3, #4
 8006b68:	2201      	movs	r2, #1
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f918 	bl	8006da2 <USBD_CtlSendData>
        break;
 8006b72:	e004      	b.n	8006b7e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f8a9 	bl	8006cce <USBD_CtlError>
        break;
 8006b7c:	bf00      	nop
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b96:	3b01      	subs	r3, #1
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d81e      	bhi.n	8006bda <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	88db      	ldrh	r3, [r3, #6]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d004      	beq.n	8006bae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f891 	bl	8006cce <USBD_CtlError>
        break;
 8006bac:	e01a      	b.n	8006be4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f043 0202 	orr.w	r2, r3, #2
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	2202      	movs	r2, #2
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f8e5 	bl	8006da2 <USBD_CtlSendData>
      break;
 8006bd8:	e004      	b.n	8006be4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f876 	bl	8006cce <USBD_CtlError>
      break;
 8006be2:	bf00      	nop
  }
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	885b      	ldrh	r3, [r3, #2]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d106      	bne.n	8006c0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f929 	bl	8006e5e <USBD_CtlSendStatus>
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c24:	3b01      	subs	r3, #1
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d80b      	bhi.n	8006c42 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	885b      	ldrh	r3, [r3, #2]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d10c      	bne.n	8006c4c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f90f 	bl	8006e5e <USBD_CtlSendStatus>
      }
      break;
 8006c40:	e004      	b.n	8006c4c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f842 	bl	8006cce <USBD_CtlError>
      break;
 8006c4a:	e000      	b.n	8006c4e <USBD_ClrFeature+0x3a>
      break;
 8006c4c:	bf00      	nop
  }
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781a      	ldrb	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	785a      	ldrb	r2, [r3, #1]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	3302      	adds	r3, #2
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	3303      	adds	r3, #3
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	4413      	add	r3, r2
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	3305      	adds	r3, #5
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	021b      	lsls	r3, r3, #8
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	3306      	adds	r3, #6
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	3307      	adds	r3, #7
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	4413      	add	r3, r2
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	80da      	strh	r2, [r3, #6]

}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr

08006cce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006cd8:	2180      	movs	r1, #128	; 0x80
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fc54 	bl	8007588 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fc50 	bl	8007588 <USBD_LL_StallEP>
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d032      	beq.n	8006d6c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f834 	bl	8006d74 <USBD_GetLen>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	3301      	adds	r3, #1
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	75fa      	strb	r2, [r7, #23]
 8006d20:	461a      	mov	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4413      	add	r3, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	7812      	ldrb	r2, [r2, #0]
 8006d2a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	75fa      	strb	r2, [r7, #23]
 8006d32:	461a      	mov	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4413      	add	r3, r2
 8006d38:	2203      	movs	r2, #3
 8006d3a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006d3c:	e012      	b.n	8006d64 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	60fa      	str	r2, [r7, #12]
 8006d44:	7dfa      	ldrb	r2, [r7, #23]
 8006d46:	1c51      	adds	r1, r2, #1
 8006d48:	75f9      	strb	r1, [r7, #23]
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	440a      	add	r2, r1
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	75fa      	strb	r2, [r7, #23]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4413      	add	r3, r2
 8006d60:	2200      	movs	r2, #0
 8006d62:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e8      	bne.n	8006d3e <USBD_GetString+0x4e>
    }
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006d80:	e005      	b.n	8006d8e <USBD_GetLen+0x1a>
  {
    len++;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	3301      	adds	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f5      	bne.n	8006d82 <USBD_GetLen+0xe>
  }

  return len;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr

08006da2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	60f8      	str	r0, [r7, #12]
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	4613      	mov	r3, r2
 8006dae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006db8:	88fa      	ldrh	r2, [r7, #6]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006dbe:	88fa      	ldrh	r2, [r7, #6]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fc65 	bl	800769a <USBD_LL_Transmit>

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	4613      	mov	r3, r2
 8006de6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006de8:	88fb      	ldrh	r3, [r7, #6]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	2100      	movs	r1, #0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fc53 	bl	800769a <USBD_LL_Transmit>

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2203      	movs	r2, #3
 8006e10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e14:	88fa      	ldrh	r2, [r7, #6]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006e1c:	88fa      	ldrh	r2, [r7, #6]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	2100      	movs	r1, #0
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 fc58 	bl	80076e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	4613      	mov	r3, r2
 8006e46:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fc46 	bl	80076e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2200      	movs	r2, #0
 8006e72:	2100      	movs	r1, #0
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fc10 	bl	800769a <USBD_LL_Transmit>

  return USBD_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2205      	movs	r2, #5
 8006e90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e94:	2300      	movs	r3, #0
 8006e96:	2200      	movs	r2, #0
 8006e98:	2100      	movs	r1, #0
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fc20 	bl	80076e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	4912      	ldr	r1, [pc, #72]	; (8006efc <MX_USB_DEVICE_Init+0x50>)
 8006eb4:	4812      	ldr	r0, [pc, #72]	; (8006f00 <MX_USB_DEVICE_Init+0x54>)
 8006eb6:	f7fe ff5e 	bl	8005d76 <USBD_Init>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ec0:	f7f9 fada 	bl	8000478 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ec4:	490f      	ldr	r1, [pc, #60]	; (8006f04 <MX_USB_DEVICE_Init+0x58>)
 8006ec6:	480e      	ldr	r0, [pc, #56]	; (8006f00 <MX_USB_DEVICE_Init+0x54>)
 8006ec8:	f7fe ff80 	bl	8005dcc <USBD_RegisterClass>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ed2:	f7f9 fad1 	bl	8000478 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ed6:	490c      	ldr	r1, [pc, #48]	; (8006f08 <MX_USB_DEVICE_Init+0x5c>)
 8006ed8:	4809      	ldr	r0, [pc, #36]	; (8006f00 <MX_USB_DEVICE_Init+0x54>)
 8006eda:	f7fe feb1 	bl	8005c40 <USBD_CDC_RegisterInterface>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ee4:	f7f9 fac8 	bl	8000478 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ee8:	4805      	ldr	r0, [pc, #20]	; (8006f00 <MX_USB_DEVICE_Init+0x54>)
 8006eea:	f7fe ff88 	bl	8005dfe <USBD_Start>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ef4:	f7f9 fac0 	bl	8000478 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ef8:	bf00      	nop
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	2000012c 	.word	0x2000012c
 8006f00:	20000438 	.word	0x20000438
 8006f04:	20000018 	.word	0x20000018
 8006f08:	2000011c 	.word	0x2000011c

08006f0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f10:	2200      	movs	r2, #0
 8006f12:	4905      	ldr	r1, [pc, #20]	; (8006f28 <CDC_Init_FS+0x1c>)
 8006f14:	4805      	ldr	r0, [pc, #20]	; (8006f2c <CDC_Init_FS+0x20>)
 8006f16:	f7fe fea9 	bl	8005c6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f1a:	4905      	ldr	r1, [pc, #20]	; (8006f30 <CDC_Init_FS+0x24>)
 8006f1c:	4803      	ldr	r0, [pc, #12]	; (8006f2c <CDC_Init_FS+0x20>)
 8006f1e:	f7fe febe 	bl	8005c9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000ae4 	.word	0x20000ae4
 8006f2c:	20000438 	.word	0x20000438
 8006f30:	200006fc 	.word	0x200006fc

08006f34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc80      	pop	{r7}
 8006f40:	4770      	bx	lr
	...

08006f44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	6039      	str	r1, [r7, #0]
 8006f4e:	71fb      	strb	r3, [r7, #7]
 8006f50:	4613      	mov	r3, r2
 8006f52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	2b23      	cmp	r3, #35	; 0x23
 8006f58:	d84a      	bhi.n	8006ff0 <CDC_Control_FS+0xac>
 8006f5a:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <CDC_Control_FS+0x1c>)
 8006f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f60:	08006ff1 	.word	0x08006ff1
 8006f64:	08006ff1 	.word	0x08006ff1
 8006f68:	08006ff1 	.word	0x08006ff1
 8006f6c:	08006ff1 	.word	0x08006ff1
 8006f70:	08006ff1 	.word	0x08006ff1
 8006f74:	08006ff1 	.word	0x08006ff1
 8006f78:	08006ff1 	.word	0x08006ff1
 8006f7c:	08006ff1 	.word	0x08006ff1
 8006f80:	08006ff1 	.word	0x08006ff1
 8006f84:	08006ff1 	.word	0x08006ff1
 8006f88:	08006ff1 	.word	0x08006ff1
 8006f8c:	08006ff1 	.word	0x08006ff1
 8006f90:	08006ff1 	.word	0x08006ff1
 8006f94:	08006ff1 	.word	0x08006ff1
 8006f98:	08006ff1 	.word	0x08006ff1
 8006f9c:	08006ff1 	.word	0x08006ff1
 8006fa0:	08006ff1 	.word	0x08006ff1
 8006fa4:	08006ff1 	.word	0x08006ff1
 8006fa8:	08006ff1 	.word	0x08006ff1
 8006fac:	08006ff1 	.word	0x08006ff1
 8006fb0:	08006ff1 	.word	0x08006ff1
 8006fb4:	08006ff1 	.word	0x08006ff1
 8006fb8:	08006ff1 	.word	0x08006ff1
 8006fbc:	08006ff1 	.word	0x08006ff1
 8006fc0:	08006ff1 	.word	0x08006ff1
 8006fc4:	08006ff1 	.word	0x08006ff1
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	08006ff1 	.word	0x08006ff1
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	08006ff1 	.word	0x08006ff1
 8006fdc:	08006ff1 	.word	0x08006ff1
 8006fe0:	08006ff1 	.word	0x08006ff1
 8006fe4:	08006ff1 	.word	0x08006ff1
 8006fe8:	08006ff1 	.word	0x08006ff1
 8006fec:	08006ff1 	.word	0x08006ff1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ff0:	bf00      	nop
  }

  return (USBD_OK);
 8006ff2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	4805      	ldr	r0, [pc, #20]	; (8007024 <CDC_Receive_FS+0x24>)
 800700e:	f7fe fe46 	bl	8005c9e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007012:	4804      	ldr	r0, [pc, #16]	; (8007024 <CDC_Receive_FS+0x24>)
 8007014:	f7fe fe85 	bl	8005d22 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007018:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000438 	.word	0x20000438

08007028 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007038:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <CDC_Transmit_FS+0x48>)
 800703a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800704a:	2301      	movs	r3, #1
 800704c:	e00b      	b.n	8007066 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800704e:	887b      	ldrh	r3, [r7, #2]
 8007050:	461a      	mov	r2, r3
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	4806      	ldr	r0, [pc, #24]	; (8007070 <CDC_Transmit_FS+0x48>)
 8007056:	f7fe fe09 	bl	8005c6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800705a:	4805      	ldr	r0, [pc, #20]	; (8007070 <CDC_Transmit_FS+0x48>)
 800705c:	f7fe fe32 	bl	8005cc4 <USBD_CDC_TransmitPacket>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000438 	.word	0x20000438

08007074 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2212      	movs	r2, #18
 8007084:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007086:	4b03      	ldr	r3, [pc, #12]	; (8007094 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000148 	.word	0x20000148

08007098 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2204      	movs	r2, #4
 80070a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070aa:	4b03      	ldr	r3, [pc, #12]	; (80070b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc80      	pop	{r7}
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	2000015c 	.word	0x2000015c

080070bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	6039      	str	r1, [r7, #0]
 80070c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4907      	ldr	r1, [pc, #28]	; (80070f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80070d2:	4808      	ldr	r0, [pc, #32]	; (80070f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80070d4:	f7ff fe0c 	bl	8006cf0 <USBD_GetString>
 80070d8:	e004      	b.n	80070e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	4904      	ldr	r1, [pc, #16]	; (80070f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80070de:	4805      	ldr	r0, [pc, #20]	; (80070f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80070e0:	f7ff fe06 	bl	8006cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e4:	4b02      	ldr	r3, [pc, #8]	; (80070f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000ecc 	.word	0x20000ecc
 80070f4:	08007880 	.word	0x08007880

080070f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	6039      	str	r1, [r7, #0]
 8007102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	4904      	ldr	r1, [pc, #16]	; (8007118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007108:	4804      	ldr	r0, [pc, #16]	; (800711c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800710a:	f7ff fdf1 	bl	8006cf0 <USBD_GetString>
  return USBD_StrDesc;
 800710e:	4b02      	ldr	r3, [pc, #8]	; (8007118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20000ecc 	.word	0x20000ecc
 800711c:	080078ac 	.word	0x080078ac

08007120 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	6039      	str	r1, [r7, #0]
 800712a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	221a      	movs	r2, #26
 8007130:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007132:	f000 f843 	bl	80071bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007136:	4b02      	ldr	r3, [pc, #8]	; (8007140 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000160 	.word	0x20000160

08007144 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	6039      	str	r1, [r7, #0]
 800714e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	4907      	ldr	r1, [pc, #28]	; (8007178 <USBD_FS_ConfigStrDescriptor+0x34>)
 800715a:	4808      	ldr	r0, [pc, #32]	; (800717c <USBD_FS_ConfigStrDescriptor+0x38>)
 800715c:	f7ff fdc8 	bl	8006cf0 <USBD_GetString>
 8007160:	e004      	b.n	800716c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	4904      	ldr	r1, [pc, #16]	; (8007178 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007166:	4805      	ldr	r0, [pc, #20]	; (800717c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007168:	f7ff fdc2 	bl	8006cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800716c:	4b02      	ldr	r3, [pc, #8]	; (8007178 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000ecc 	.word	0x20000ecc
 800717c:	080078c0 	.word	0x080078c0

08007180 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	6039      	str	r1, [r7, #0]
 800718a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d105      	bne.n	800719e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	4907      	ldr	r1, [pc, #28]	; (80071b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007196:	4808      	ldr	r0, [pc, #32]	; (80071b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007198:	f7ff fdaa 	bl	8006cf0 <USBD_GetString>
 800719c:	e004      	b.n	80071a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4904      	ldr	r1, [pc, #16]	; (80071b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071a2:	4805      	ldr	r0, [pc, #20]	; (80071b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071a4:	f7ff fda4 	bl	8006cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071a8:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000ecc 	.word	0x20000ecc
 80071b8:	080078cc 	.word	0x080078cc

080071bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071c2:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <Get_SerialNum+0x44>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071c8:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <Get_SerialNum+0x48>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071ce:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <Get_SerialNum+0x4c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4413      	add	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071e2:	2208      	movs	r2, #8
 80071e4:	4909      	ldr	r1, [pc, #36]	; (800720c <Get_SerialNum+0x50>)
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f814 	bl	8007214 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071ec:	2204      	movs	r2, #4
 80071ee:	4908      	ldr	r1, [pc, #32]	; (8007210 <Get_SerialNum+0x54>)
 80071f0:	68b8      	ldr	r0, [r7, #8]
 80071f2:	f000 f80f 	bl	8007214 <IntToUnicode>
  }
}
 80071f6:	bf00      	nop
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	1ffff7e8 	.word	0x1ffff7e8
 8007204:	1ffff7ec 	.word	0x1ffff7ec
 8007208:	1ffff7f0 	.word	0x1ffff7f0
 800720c:	20000162 	.word	0x20000162
 8007210:	20000172 	.word	0x20000172

08007214 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007226:	2300      	movs	r3, #0
 8007228:	75fb      	strb	r3, [r7, #23]
 800722a:	e027      	b.n	800727c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	0f1b      	lsrs	r3, r3, #28
 8007230:	2b09      	cmp	r3, #9
 8007232:	d80b      	bhi.n	800724c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	0f1b      	lsrs	r3, r3, #28
 8007238:	b2da      	uxtb	r2, r3
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	4619      	mov	r1, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	440b      	add	r3, r1
 8007244:	3230      	adds	r2, #48	; 0x30
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e00a      	b.n	8007262 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	0f1b      	lsrs	r3, r3, #28
 8007250:	b2da      	uxtb	r2, r3
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	4619      	mov	r1, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	440b      	add	r3, r1
 800725c:	3237      	adds	r2, #55	; 0x37
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	3301      	adds	r3, #1
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	4413      	add	r3, r2
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	3301      	adds	r3, #1
 800727a:	75fb      	strb	r3, [r7, #23]
 800727c:	7dfa      	ldrb	r2, [r7, #23]
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	429a      	cmp	r2, r3
 8007282:	d3d3      	bcc.n	800722c <IntToUnicode+0x18>
  }
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	371c      	adds	r7, #28
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr

08007290 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a0d      	ldr	r2, [pc, #52]	; (80072d4 <HAL_PCD_MspInit+0x44>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d113      	bne.n	80072ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <HAL_PCD_MspInit+0x48>)
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	4a0c      	ldr	r2, [pc, #48]	; (80072d8 <HAL_PCD_MspInit+0x48>)
 80072a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80072ac:	61d3      	str	r3, [r2, #28]
 80072ae:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <HAL_PCD_MspInit+0x48>)
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	2014      	movs	r0, #20
 80072c0:	f7f9 fb29 	bl	8000916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80072c4:	2014      	movs	r0, #20
 80072c6:	f7f9 fb42 	bl	800094e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80072ca:	bf00      	nop
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40005c00 	.word	0x40005c00
 80072d8:	40021000 	.word	0x40021000

080072dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f7fe fdcb 	bl	8005e8e <USBD_LL_SetupStage>
}
 80072f8:	bf00      	nop
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	440b      	add	r3, r1
 8007320:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	4619      	mov	r1, r3
 800732a:	f7fe fdfd 	bl	8005f28 <USBD_LL_DataOutStage>
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007348:	78fa      	ldrb	r2, [r7, #3]
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	440b      	add	r3, r1
 8007356:	333c      	adds	r3, #60	; 0x3c
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	4619      	mov	r1, r3
 800735e:	f7fe fe54 	bl	800600a <USBD_LL_DataInStage>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe ff64 	bl	8006246 <USBD_LL_SOF>
}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800738e:	2301      	movs	r3, #1
 8007390:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d001      	beq.n	800739e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800739a:	f7f9 f86d 	bl	8000478 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80073a4:	7bfa      	ldrb	r2, [r7, #15]
 80073a6:	4611      	mov	r1, r2
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe ff14 	bl	80061d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fecd 	bl	8006154 <USBD_LL_Reset>
}
 80073ba:	bf00      	nop
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe ff0e 	bl	80061f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073e0:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <HAL_PCD_SuspendCallback+0x30>)
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	4a03      	ldr	r2, [pc, #12]	; (80073f4 <HAL_PCD_SuspendCallback+0x30>)
 80073e6:	f043 0306 	orr.w	r3, r3, #6
 80073ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	e000ed00 	.word	0xe000ed00

080073f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe ff08 	bl	800621c <USBD_LL_Resume>
}
 800740c:	bf00      	nop
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800741c:	4a28      	ldr	r2, [pc, #160]	; (80074c0 <USBD_LL_Init+0xac>)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a26      	ldr	r2, [pc, #152]	; (80074c0 <USBD_LL_Init+0xac>)
 8007428:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800742c:	4b24      	ldr	r3, [pc, #144]	; (80074c0 <USBD_LL_Init+0xac>)
 800742e:	4a25      	ldr	r2, [pc, #148]	; (80074c4 <USBD_LL_Init+0xb0>)
 8007430:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007432:	4b23      	ldr	r3, [pc, #140]	; (80074c0 <USBD_LL_Init+0xac>)
 8007434:	2208      	movs	r2, #8
 8007436:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007438:	4b21      	ldr	r3, [pc, #132]	; (80074c0 <USBD_LL_Init+0xac>)
 800743a:	2202      	movs	r2, #2
 800743c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800743e:	4b20      	ldr	r3, [pc, #128]	; (80074c0 <USBD_LL_Init+0xac>)
 8007440:	2200      	movs	r2, #0
 8007442:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007444:	4b1e      	ldr	r3, [pc, #120]	; (80074c0 <USBD_LL_Init+0xac>)
 8007446:	2200      	movs	r2, #0
 8007448:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800744a:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <USBD_LL_Init+0xac>)
 800744c:	2200      	movs	r2, #0
 800744e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007450:	481b      	ldr	r0, [pc, #108]	; (80074c0 <USBD_LL_Init+0xac>)
 8007452:	f7f9 fdad 	bl	8000fb0 <HAL_PCD_Init>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800745c:	f7f9 f80c 	bl	8000478 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007466:	2318      	movs	r3, #24
 8007468:	2200      	movs	r2, #0
 800746a:	2100      	movs	r1, #0
 800746c:	f7fb fa23 	bl	80028b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007476:	2358      	movs	r3, #88	; 0x58
 8007478:	2200      	movs	r2, #0
 800747a:	2180      	movs	r1, #128	; 0x80
 800747c:	f7fb fa1b 	bl	80028b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007486:	23c0      	movs	r3, #192	; 0xc0
 8007488:	2200      	movs	r2, #0
 800748a:	2181      	movs	r1, #129	; 0x81
 800748c:	f7fb fa13 	bl	80028b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007496:	f44f 7388 	mov.w	r3, #272	; 0x110
 800749a:	2200      	movs	r2, #0
 800749c:	2101      	movs	r1, #1
 800749e:	f7fb fa0a 	bl	80028b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80074a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074ac:	2200      	movs	r2, #0
 80074ae:	2182      	movs	r1, #130	; 0x82
 80074b0:	f7fb fa01 	bl	80028b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	200010cc 	.word	0x200010cc
 80074c4:	40005c00 	.word	0x40005c00

080074c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074de:	4618      	mov	r0, r3
 80074e0:	f7f9 fe71 	bl	80011c6 <HAL_PCD_Start>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f94e 	bl	800778c <USBD_Get_USB_Status>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	4608      	mov	r0, r1
 8007508:	4611      	mov	r1, r2
 800750a:	461a      	mov	r2, r3
 800750c:	4603      	mov	r3, r0
 800750e:	70fb      	strb	r3, [r7, #3]
 8007510:	460b      	mov	r3, r1
 8007512:	70bb      	strb	r3, [r7, #2]
 8007514:	4613      	mov	r3, r2
 8007516:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007526:	78bb      	ldrb	r3, [r7, #2]
 8007528:	883a      	ldrh	r2, [r7, #0]
 800752a:	78f9      	ldrb	r1, [r7, #3]
 800752c:	f7f9 ffeb 	bl	8001506 <HAL_PCD_EP_Open>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	4618      	mov	r0, r3
 8007538:	f000 f928 	bl	800778c <USBD_Get_USB_Status>
 800753c:	4603      	mov	r3, r0
 800753e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007540:	7bbb      	ldrb	r3, [r7, #14]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007564:	78fa      	ldrb	r2, [r7, #3]
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f7fa f832 	bl	80015d2 <HAL_PCD_EP_Close>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	4618      	mov	r0, r3
 8007576:	f000 f909 	bl	800778c <USBD_Get_USB_Status>
 800757a:	4603      	mov	r3, r0
 800757c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800757e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075a2:	78fa      	ldrb	r2, [r7, #3]
 80075a4:	4611      	mov	r1, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fa f8f2 	bl	8001790 <HAL_PCD_EP_SetStall>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 f8ea 	bl	800778c <USBD_Get_USB_Status>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075e0:	78fa      	ldrb	r2, [r7, #3]
 80075e2:	4611      	mov	r1, r2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fa f933 	bl	8001850 <HAL_PCD_EP_ClrStall>
 80075ea:	4603      	mov	r3, r0
 80075ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 f8cb 	bl	800778c <USBD_Get_USB_Status>
 80075f6:	4603      	mov	r3, r0
 80075f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007616:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800761c:	2b00      	cmp	r3, #0
 800761e:	da0c      	bge.n	800763a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007626:	68f9      	ldr	r1, [r7, #12]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	4613      	mov	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	440b      	add	r3, r1
 8007634:	3302      	adds	r3, #2
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	e00b      	b.n	8007652 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007640:	68f9      	ldr	r1, [r7, #12]
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	440b      	add	r3, r1
 800764c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007650:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	bc80      	pop	{r7}
 800765a:	4770      	bx	lr

0800765c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007676:	78fa      	ldrb	r2, [r7, #3]
 8007678:	4611      	mov	r1, r2
 800767a:	4618      	mov	r0, r3
 800767c:	f7f9 ff1e 	bl	80014bc <HAL_PCD_SetAddress>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 f880 	bl	800778c <USBD_Get_USB_Status>
 800768c:	4603      	mov	r3, r0
 800768e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007690:	7bbb      	ldrb	r3, [r7, #14]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b086      	sub	sp, #24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	461a      	mov	r2, r3
 80076a6:	460b      	mov	r3, r1
 80076a8:	72fb      	strb	r3, [r7, #11]
 80076aa:	4613      	mov	r3, r2
 80076ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076bc:	893b      	ldrh	r3, [r7, #8]
 80076be:	7af9      	ldrb	r1, [r7, #11]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	f7fa f822 	bl	800170a <HAL_PCD_EP_Transmit>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f85d 	bl	800778c <USBD_Get_USB_Status>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	461a      	mov	r2, r3
 80076ec:	460b      	mov	r3, r1
 80076ee:	72fb      	strb	r3, [r7, #11]
 80076f0:	4613      	mov	r3, r2
 80076f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007702:	893b      	ldrh	r3, [r7, #8]
 8007704:	7af9      	ldrb	r1, [r7, #11]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	f7f9 ffab 	bl	8001662 <HAL_PCD_EP_Receive>
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f83a 	bl	800778c <USBD_Get_USB_Status>
 8007718:	4603      	mov	r3, r0
 800771a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800771c:	7dbb      	ldrb	r3, [r7, #22]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	4611      	mov	r1, r2
 800773c:	4618      	mov	r0, r3
 800773e:	f7f9 ffcd 	bl	80016dc <HAL_PCD_EP_GetRxCount>
 8007742:	4603      	mov	r3, r0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007754:	4b02      	ldr	r3, [pc, #8]	; (8007760 <USBD_static_malloc+0x14>)
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	bc80      	pop	{r7}
 800775e:	4770      	bx	lr
 8007760:	200001b8 	.word	0x200001b8

08007764 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]

}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr

08007776 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr

0800778c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	2b03      	cmp	r3, #3
 800779e:	d817      	bhi.n	80077d0 <USBD_Get_USB_Status+0x44>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <USBD_Get_USB_Status+0x1c>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077b9 	.word	0x080077b9
 80077ac:	080077bf 	.word	0x080077bf
 80077b0:	080077c5 	.word	0x080077c5
 80077b4:	080077cb 	.word	0x080077cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
    break;
 80077bc:	e00b      	b.n	80077d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077be:	2302      	movs	r3, #2
 80077c0:	73fb      	strb	r3, [r7, #15]
    break;
 80077c2:	e008      	b.n	80077d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
    break;
 80077c8:	e005      	b.n	80077d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077ca:	2302      	movs	r3, #2
 80077cc:	73fb      	strb	r3, [r7, #15]
    break;
 80077ce:	e002      	b.n	80077d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80077d0:	2302      	movs	r3, #2
 80077d2:	73fb      	strb	r3, [r7, #15]
    break;
 80077d4:	bf00      	nop
  }
  return usb_status;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop

080077e4 <__libc_init_array>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	2600      	movs	r6, #0
 80077e8:	4d0c      	ldr	r5, [pc, #48]	; (800781c <__libc_init_array+0x38>)
 80077ea:	4c0d      	ldr	r4, [pc, #52]	; (8007820 <__libc_init_array+0x3c>)
 80077ec:	1b64      	subs	r4, r4, r5
 80077ee:	10a4      	asrs	r4, r4, #2
 80077f0:	42a6      	cmp	r6, r4
 80077f2:	d109      	bne.n	8007808 <__libc_init_array+0x24>
 80077f4:	f000 f822 	bl	800783c <_init>
 80077f8:	2600      	movs	r6, #0
 80077fa:	4d0a      	ldr	r5, [pc, #40]	; (8007824 <__libc_init_array+0x40>)
 80077fc:	4c0a      	ldr	r4, [pc, #40]	; (8007828 <__libc_init_array+0x44>)
 80077fe:	1b64      	subs	r4, r4, r5
 8007800:	10a4      	asrs	r4, r4, #2
 8007802:	42a6      	cmp	r6, r4
 8007804:	d105      	bne.n	8007812 <__libc_init_array+0x2e>
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	f855 3b04 	ldr.w	r3, [r5], #4
 800780c:	4798      	blx	r3
 800780e:	3601      	adds	r6, #1
 8007810:	e7ee      	b.n	80077f0 <__libc_init_array+0xc>
 8007812:	f855 3b04 	ldr.w	r3, [r5], #4
 8007816:	4798      	blx	r3
 8007818:	3601      	adds	r6, #1
 800781a:	e7f2      	b.n	8007802 <__libc_init_array+0x1e>
 800781c:	080078f4 	.word	0x080078f4
 8007820:	080078f4 	.word	0x080078f4
 8007824:	080078f4 	.word	0x080078f4
 8007828:	080078f8 	.word	0x080078f8

0800782c <memset>:
 800782c:	4603      	mov	r3, r0
 800782e:	4402      	add	r2, r0
 8007830:	4293      	cmp	r3, r2
 8007832:	d100      	bne.n	8007836 <memset+0xa>
 8007834:	4770      	bx	lr
 8007836:	f803 1b01 	strb.w	r1, [r3], #1
 800783a:	e7f9      	b.n	8007830 <memset+0x4>

0800783c <_init>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	bf00      	nop
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr

08007848 <_fini>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	bf00      	nop
 800784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784e:	bc08      	pop	{r3}
 8007850:	469e      	mov	lr, r3
 8007852:	4770      	bx	lr
