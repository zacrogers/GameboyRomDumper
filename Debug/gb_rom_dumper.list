
gb_rom_dumper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08007f8c  08007f8c  00017f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008010  08008010  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08008010  08008010  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008010  08008010  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08008018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001670  200001cc  080081e4  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000183c  080081e4  0002183c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106fe  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fab  00000000  00000000  000308f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  000338a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00034678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a03a  00000000  00000000  00035310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b40  00000000  00000000  0004f34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087d0a  00000000  00000000  00061e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9b94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000378c  00000000  00000000  000e9be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08007f74 	.word	0x08007f74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08007f74 	.word	0x08007f74

0800014c <unpack_metadata>:
//	gb_metadata.checksum           = 0x03;
//}


void unpack_metadata(gb_metadata_t* md, uint8_t* buff)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	memcpy(&md->entry_point,        buff + HEADER_ADDR(CART_ENTRY_POINT),  ENTRY_POINT_LEN);
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	683a      	ldr	r2, [r7, #0]
 800015a:	6812      	ldr	r2, [r2, #0]
 800015c:	601a      	str	r2, [r3, #0]
	memcpy(&md->rom_title,          buff + HEADER_ADDR(CART_TITLE),        ROM_TITLE_LEN);
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	1d18      	adds	r0, r3, #4
 8000162:	683b      	ldr	r3, [r7, #0]
 8000164:	3334      	adds	r3, #52	; 0x34
 8000166:	2210      	movs	r2, #16
 8000168:	4619      	mov	r1, r3
 800016a:	f007 feed 	bl	8007f48 <memcpy>
	memcpy(&md->rom_title[11],      buff + HEADER_ADDR(CART_MAUFACTURER),  MAN_CODE_LEN);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	330f      	adds	r3, #15
 8000172:	683a      	ldr	r2, [r7, #0]
 8000174:	323f      	adds	r2, #63	; 0x3f
 8000176:	6812      	ldr	r2, [r2, #0]
 8000178:	601a      	str	r2, [r3, #0]
	memcpy(&md->rom_title[15],      buff + HEADER_ADDR(CART_CGB_FLAG),     1);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	3313      	adds	r3, #19
 800017e:	683a      	ldr	r2, [r7, #0]
 8000180:	3243      	adds	r2, #67	; 0x43
 8000182:	7812      	ldrb	r2, [r2, #0]
 8000184:	701a      	strb	r2, [r3, #0]
	memcpy(&md->new_licensee_code,  buff + HEADER_ADDR(CART_NEW_LIC_CODE), 2);
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	3314      	adds	r3, #20
 800018a:	683a      	ldr	r2, [r7, #0]
 800018c:	3244      	adds	r2, #68	; 0x44
 800018e:	8812      	ldrh	r2, [r2, #0]
 8000190:	b292      	uxth	r2, r2
 8000192:	801a      	strh	r2, [r3, #0]
	memcpy(&md->sgb_flag,           buff + HEADER_ADDR(CART_SGB_FLAG),     1);
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3315      	adds	r3, #21
 8000198:	683a      	ldr	r2, [r7, #0]
 800019a:	3246      	adds	r2, #70	; 0x46
 800019c:	7812      	ldrb	r2, [r2, #0]
 800019e:	701a      	strb	r2, [r3, #0]
	memcpy(&md->cart_type,          buff + HEADER_ADDR(CART_TYPE),         1);
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	3316      	adds	r3, #22
 80001a4:	683a      	ldr	r2, [r7, #0]
 80001a6:	3247      	adds	r2, #71	; 0x47
 80001a8:	7812      	ldrb	r2, [r2, #0]
 80001aa:	701a      	strb	r2, [r3, #0]
	memcpy(&md->rom_size,           buff + HEADER_ADDR(CART_ROM_SIZE),     1);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3317      	adds	r3, #23
 80001b0:	683a      	ldr	r2, [r7, #0]
 80001b2:	3248      	adds	r2, #72	; 0x48
 80001b4:	7812      	ldrb	r2, [r2, #0]
 80001b6:	701a      	strb	r2, [r3, #0]
	memcpy(&md->ram_size,           buff + HEADER_ADDR(CART_RAM_SIZE),     1);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3318      	adds	r3, #24
 80001bc:	683a      	ldr	r2, [r7, #0]
 80001be:	3249      	adds	r2, #73	; 0x49
 80001c0:	7812      	ldrb	r2, [r2, #0]
 80001c2:	701a      	strb	r2, [r3, #0]
	memcpy(&md->dest_code,          buff + HEADER_ADDR(CART_DEST_CODE),    1);
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	3319      	adds	r3, #25
 80001c8:	683a      	ldr	r2, [r7, #0]
 80001ca:	324a      	adds	r2, #74	; 0x4a
 80001cc:	7812      	ldrb	r2, [r2, #0]
 80001ce:	701a      	strb	r2, [r3, #0]
	memcpy(&md->old_licensee_code,  buff + HEADER_ADDR(CART_OLD_LIC_CODE), 1);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	331a      	adds	r3, #26
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	324b      	adds	r2, #75	; 0x4b
 80001d8:	7812      	ldrb	r2, [r2, #0]
 80001da:	701a      	strb	r2, [r3, #0]
	memcpy(&md->mask_rom_ver_num,   buff + HEADER_ADDR(CART_MASK_ROM_VER), 1);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	331b      	adds	r3, #27
 80001e0:	683a      	ldr	r2, [r7, #0]
 80001e2:	324c      	adds	r2, #76	; 0x4c
 80001e4:	7812      	ldrb	r2, [r2, #0]
 80001e6:	701a      	strb	r2, [r3, #0]
	memcpy(&md->checksum,           buff + HEADER_ADDR(CART_HEADER_CHECK), 1);
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	331c      	adds	r3, #28
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	324d      	adds	r2, #77	; 0x4d
 80001f0:	7812      	ldrb	r2, [r2, #0]
 80001f2:	701a      	strb	r2, [r3, #0]
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <client_send_metadata>:

	return checksum;
}

bool client_send_metadata(gb_metadata_t *metadata)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	client_instruction_e instruction = START_SEND_METADATA;
 8000204:	2300      	movs	r3, #0
 8000206:	73fb      	strb	r3, [r7, #15]

	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)&start_delimiter, sizeof(uint8_t)));
 8000208:	bf00      	nop
 800020a:	2101      	movs	r1, #1
 800020c:	4812      	ldr	r0, [pc, #72]	; (8000258 <client_send_metadata+0x5c>)
 800020e:	f007 fa99 	bl	8007744 <CDC_Transmit_FS>
 8000212:	4603      	mov	r3, r0
 8000214:	2b01      	cmp	r3, #1
 8000216:	d0f8      	beq.n	800020a <client_send_metadata+0xe>
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)&instruction,     sizeof(uint8_t)));
 8000218:	bf00      	nop
 800021a:	f107 030f 	add.w	r3, r7, #15
 800021e:	2101      	movs	r1, #1
 8000220:	4618      	mov	r0, r3
 8000222:	f007 fa8f 	bl	8007744 <CDC_Transmit_FS>
 8000226:	4603      	mov	r3, r0
 8000228:	2b01      	cmp	r3, #1
 800022a:	d0f6      	beq.n	800021a <client_send_metadata+0x1e>
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)metadata,         30));
 800022c:	bf00      	nop
 800022e:	211e      	movs	r1, #30
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f007 fa87 	bl	8007744 <CDC_Transmit_FS>
 8000236:	4603      	mov	r3, r0
 8000238:	2b01      	cmp	r3, #1
 800023a:	d0f8      	beq.n	800022e <client_send_metadata+0x32>
	while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)&end_delimiter,   sizeof(uint8_t)));
 800023c:	bf00      	nop
 800023e:	2101      	movs	r1, #1
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <client_send_metadata+0x60>)
 8000242:	f007 fa7f 	bl	8007744 <CDC_Transmit_FS>
 8000246:	4603      	mov	r3, r0
 8000248:	2b01      	cmp	r3, #1
 800024a:	d0f8      	beq.n	800023e <client_send_metadata+0x42>

	return true;
 800024c:	2301      	movs	r3, #1
}
 800024e:	4618      	mov	r0, r3
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	08007ff6 	.word	0x08007ff6
 800025c:	08007ff7 	.word	0x08007ff7

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000264:	f000 fa42 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000268:	f000 f820 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026c:	f000 f8bc 	bl	80003e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000270:	f000 f88c 	bl	800038c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000274:	f007 f9a0 	bl	80075b8 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000278:	f000 f874 	bl	8000364 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
//  init_test_gb_metadata();
//  set_test_metadata(&gb_metadata);
  	 unpack_metadata(&gb_metadata, tetris_header);
 800027c:	4908      	ldr	r1, [pc, #32]	; (80002a0 <main+0x40>)
 800027e:	4809      	ldr	r0, [pc, #36]	; (80002a4 <main+0x44>)
 8000280:	f7ff ff64 	bl	800014c <unpack_metadata>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(Onboard_LED_GPIO_Port, Onboard_LED_Pin);
 8000284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000288:	4807      	ldr	r0, [pc, #28]	; (80002a8 <main+0x48>)
 800028a:	f000 fd7b 	bl	8000d84 <HAL_GPIO_TogglePin>
//	  while(USBD_BUSY == CDC_Transmit_FS((uint8_t*)msg, strlen(msg)));
//	  while(USBD_BUSY == CDC_Transmit_FS(buf, 10));
	  client_send_metadata(&gb_metadata);
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <main+0x44>)
 8000290:	f7ff ffb4 	bl	80001fc <client_send_metadata>
	  HAL_Delay(1000);
 8000294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000298:	f000 fa8a 	bl	80007b0 <HAL_Delay>
	  HAL_GPIO_TogglePin(Onboard_LED_GPIO_Port, Onboard_LED_Pin);
 800029c:	e7f2      	b.n	8000284 <main+0x24>
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000
 80002a4:	20000244 	.word	0x20000244
 80002a8:	40011000 	.word	0x40011000

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b094      	sub	sp, #80	; 0x50
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f007 fe52 	bl	8007f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002dc:	2301      	movs	r3, #1
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ee:	2302      	movs	r3, #2
 80002f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fb60 	bl	80029c8 <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800030e:	f000 f8fb 	bl	8000508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	230f      	movs	r3, #15
 8000314:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000316:	2302      	movs	r3, #2
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000322:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	2101      	movs	r1, #1
 800032e:	4618      	mov	r0, r3
 8000330:	f002 fdcc 	bl	8002ecc <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800033a:	f000 f8e5 	bl	8000508 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800033e:	2310      	movs	r3, #16
 8000340:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000342:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000346:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4618      	mov	r0, r3
 800034c:	f002 ff42 	bl	80031d4 <HAL_RCCEx_PeriphCLKConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000356:	f000 f8d7 	bl	8000508 <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3750      	adds	r7, #80	; 0x50
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_CRC_Init+0x20>)
 800036a:	4a07      	ldr	r2, [pc, #28]	; (8000388 <MX_CRC_Init+0x24>)
 800036c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_CRC_Init+0x20>)
 8000370:	f000 fb4f 	bl	8000a12 <HAL_CRC_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800037a:	f000 f8c5 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200001e8 	.word	0x200001e8
 8000388:	40023000 	.word	0x40023000

0800038c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_I2C1_Init+0x50>)
 8000392:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <MX_I2C1_Init+0x54>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_I2C1_Init+0x50>)
 8000398:	4a12      	ldr	r2, [pc, #72]	; (80003e4 <MX_I2C1_Init+0x58>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_I2C1_Init+0x50>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_I2C1_Init+0x50>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_I2C1_Init+0x50>)
 80003aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <MX_I2C1_Init+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_I2C1_Init+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <MX_I2C1_Init+0x50>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_I2C1_Init+0x50>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_I2C1_Init+0x50>)
 80003ca:	f000 fcf5 	bl	8000db8 <HAL_I2C_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003d4:	f000 f898 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	200001f0 	.word	0x200001f0
 80003e0:	40005400 	.word	0x40005400
 80003e4:	000186a0 	.word	0x000186a0

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fc:	4b3e      	ldr	r3, [pc, #248]	; (80004f8 <MX_GPIO_Init+0x110>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a3d      	ldr	r2, [pc, #244]	; (80004f8 <MX_GPIO_Init+0x110>)
 8000402:	f043 0310 	orr.w	r3, r3, #16
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b3b      	ldr	r3, [pc, #236]	; (80004f8 <MX_GPIO_Init+0x110>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0310 	and.w	r3, r3, #16
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000414:	4b38      	ldr	r3, [pc, #224]	; (80004f8 <MX_GPIO_Init+0x110>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a37      	ldr	r2, [pc, #220]	; (80004f8 <MX_GPIO_Init+0x110>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b35      	ldr	r3, [pc, #212]	; (80004f8 <MX_GPIO_Init+0x110>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0320 	and.w	r3, r3, #32
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <MX_GPIO_Init+0x110>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a31      	ldr	r2, [pc, #196]	; (80004f8 <MX_GPIO_Init+0x110>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b2f      	ldr	r3, [pc, #188]	; (80004f8 <MX_GPIO_Init+0x110>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <MX_GPIO_Init+0x110>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a2b      	ldr	r2, [pc, #172]	; (80004f8 <MX_GPIO_Init+0x110>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b29      	ldr	r3, [pc, #164]	; (80004f8 <MX_GPIO_Init+0x110>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Onboard_LED_GPIO_Port, Onboard_LED_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000462:	4826      	ldr	r0, [pc, #152]	; (80004fc <MX_GPIO_Init+0x114>)
 8000464:	f000 fc76 	bl	8000d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, sr_latch_Pin|sr_clk_Pin|sr_data_Pin|data_bus_dir_Pin
 8000468:	2200      	movs	r2, #0
 800046a:	f248 01f0 	movw	r1, #33008	; 0x80f0
 800046e:	4824      	ldr	r0, [pc, #144]	; (8000500 <MX_GPIO_Init+0x118>)
 8000470:	f000 fc70 	bl	8000d54 <HAL_GPIO_WritePin>
                          |gb_write_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, signal_bus_dir_Pin|addr_bus_dir_Pin|gb_read_Pin|gb_cs_Pin
 8000474:	2200      	movs	r2, #0
 8000476:	213b      	movs	r1, #59	; 0x3b
 8000478:	4822      	ldr	r0, [pc, #136]	; (8000504 <MX_GPIO_Init+0x11c>)
 800047a:	f000 fc6b 	bl	8000d54 <HAL_GPIO_WritePin>
                          |gb_rst_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Onboard_LED_Pin */
  GPIO_InitStruct.Pin = Onboard_LED_Pin;
 800047e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	2301      	movs	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	2302      	movs	r3, #2
 800048e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Onboard_LED_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4819      	ldr	r0, [pc, #100]	; (80004fc <MX_GPIO_Init+0x114>)
 8000498:	f000 fad8 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800049c:	2304      	movs	r3, #4
 800049e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	4814      	ldr	r0, [pc, #80]	; (8000500 <MX_GPIO_Init+0x118>)
 80004b0:	f000 facc 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : sr_latch_Pin sr_clk_Pin sr_data_Pin data_bus_dir_Pin
                           gb_write_Pin */
  GPIO_InitStruct.Pin = sr_latch_Pin|sr_clk_Pin|sr_data_Pin|data_bus_dir_Pin
 80004b4:	f248 03f0 	movw	r3, #33008	; 0x80f0
 80004b8:	613b      	str	r3, [r7, #16]
                          |gb_write_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <MX_GPIO_Init+0x118>)
 80004ce:	f000 fabd 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : signal_bus_dir_Pin addr_bus_dir_Pin gb_read_Pin gb_cs_Pin
                           gb_rst_Pin */
  GPIO_InitStruct.Pin = signal_bus_dir_Pin|addr_bus_dir_Pin|gb_read_Pin|gb_cs_Pin
 80004d2:	233b      	movs	r3, #59	; 0x3b
 80004d4:	613b      	str	r3, [r7, #16]
                          |gb_rst_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2302      	movs	r3, #2
 80004e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	4619      	mov	r1, r3
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <MX_GPIO_Init+0x11c>)
 80004ea:	f000 faaf 	bl	8000a4c <HAL_GPIO_Init>

}
 80004ee:	bf00      	nop
 80004f0:	3720      	adds	r7, #32
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40011000 	.word	0x40011000
 8000500:	40010800 	.word	0x40010800
 8000504:	40010c00 	.word	0x40010c00

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_MspInit+0x5c>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <HAL_MspInit+0x5c>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_MspInit+0x5c>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_MspInit+0x5c>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_MspInit+0x5c>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_MspInit+0x5c>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <HAL_MspInit+0x60>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <HAL_MspInit+0x60>)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	40021000 	.word	0x40021000
 8000574:	40010000 	.word	0x40010000

08000578 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a09      	ldr	r2, [pc, #36]	; (80005ac <HAL_CRC_MspInit+0x34>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d10b      	bne.n	80005a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <HAL_CRC_MspInit+0x38>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <HAL_CRC_MspInit+0x38>)
 8000590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_CRC_MspInit+0x38>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40023000 	.word	0x40023000
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a15      	ldr	r2, [pc, #84]	; (8000624 <HAL_I2C_MspInit+0x70>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d123      	bne.n	800061c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <HAL_I2C_MspInit+0x74>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a13      	ldr	r2, [pc, #76]	; (8000628 <HAL_I2C_MspInit+0x74>)
 80005da:	f043 0308 	orr.w	r3, r3, #8
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_I2C_MspInit+0x74>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0308 	and.w	r3, r3, #8
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005ec:	23c0      	movs	r3, #192	; 0xc0
 80005ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f0:	2312      	movs	r3, #18
 80005f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <HAL_I2C_MspInit+0x78>)
 8000600:	f000 fa24 	bl	8000a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_I2C_MspInit+0x74>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_I2C_MspInit+0x74>)
 800060a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800060e:	61d3      	str	r3, [r2, #28]
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_I2C_MspInit+0x74>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40005400 	.word	0x40005400
 8000628:	40021000 	.word	0x40021000
 800062c:	40010c00 	.word	0x40010c00

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <NMI_Handler+0x4>

08000636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <MemManage_Handler+0x4>

08000642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <UsageFault_Handler+0x4>

0800064e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000676:	f000 f87f 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000686:	f000 fe0c 	bl	80012a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20001330 	.word	0x20001330

08000694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	; (80006e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006c6:	f7ff ffe5 	bl	8000694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ca:	f007 fc19 	bl	8007f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fdc7 	bl	8000260 <main>
  bx lr
 80006d2:	4770      	bx	lr
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80006dc:	08008018 	.word	0x08008018
  ldr r2, =_sbss
 80006e0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80006e4:	2000183c 	.word	0x2000183c

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_Init+0x28>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_Init+0x28>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f947 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000702:	200f      	movs	r0, #15
 8000704:	f000 f808 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000708:	f7ff ff04 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x54>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_InitTick+0x58>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f95f 	bl	80009fa <HAL_SYSTICK_Config>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e00e      	b.n	8000764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d80a      	bhi.n	8000762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000754:	f000 f927 	bl	80009a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_InitTick+0x5c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000050 	.word	0x20000050
 8000770:	20000058 	.word	0x20000058
 8000774:	20000054 	.word	0x20000054

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a03      	ldr	r2, [pc, #12]	; (8000798 <HAL_IncTick+0x20>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	20000058 	.word	0x20000058
 8000798:	20000664 	.word	0x20000664

0800079c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <HAL_GetTick+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000664 	.word	0x20000664

080007b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b8:	f7ff fff0 	bl	800079c <HAL_GetTick>
 80007bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007c8:	d005      	beq.n	80007d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_Delay+0x44>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d6:	bf00      	nop
 80007d8:	f7ff ffe0 	bl	800079c <HAL_GetTick>
 80007dc:	4602      	mov	r2, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d8f7      	bhi.n	80007d8 <HAL_Delay+0x28>
  {
  }
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000058 	.word	0x20000058

080007f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	60d3      	str	r3, [r2, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <__NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	db0b      	blt.n	8000886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 021f 	and.w	r2, r3, #31
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <__NVIC_EnableIRQ+0x34>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	2001      	movs	r0, #1
 800087e:	fa00 f202 	lsl.w	r2, r0, r2
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100

08000894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db0a      	blt.n	80008be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	490c      	ldr	r1, [pc, #48]	; (80008e0 <__NVIC_SetPriority+0x4c>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008bc:	e00a      	b.n	80008d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4908      	ldr	r1, [pc, #32]	; (80008e4 <__NVIC_SetPriority+0x50>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	3b04      	subs	r3, #4
 80008cc:	0112      	lsls	r2, r2, #4
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	440b      	add	r3, r1
 80008d2:	761a      	strb	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2b04      	cmp	r3, #4
 8000904:	bf28      	it	cs
 8000906:	2304      	movcs	r3, #4
 8000908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3304      	adds	r3, #4
 800090e:	2b06      	cmp	r3, #6
 8000910:	d902      	bls.n	8000918 <NVIC_EncodePriority+0x30>
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3b03      	subs	r3, #3
 8000916:	e000      	b.n	800091a <NVIC_EncodePriority+0x32>
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43da      	mvns	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	401a      	ands	r2, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	43d9      	mvns	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	4313      	orrs	r3, r2
         );
}
 8000942:	4618      	mov	r0, r3
 8000944:	3724      	adds	r7, #36	; 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000970:	f7ff ff90 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff2d 	bl	80007f8 <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff42 	bl	8000840 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff90 	bl	80008e8 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5f 	bl	8000894 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff35 	bl	800085c <__NVIC_EnableIRQ>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffa2 	bl	800094c <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e00e      	b.n	8000a42 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	795b      	ldrb	r3, [r3, #5]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d105      	bne.n	8000a3a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fd9f 	bl	8000578 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b08b      	sub	sp, #44	; 0x2c
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5e:	e169      	b.n	8000d34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a60:	2201      	movs	r2, #1
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	69fa      	ldr	r2, [r7, #28]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	f040 8158 	bne.w	8000d2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	4a9a      	ldr	r2, [pc, #616]	; (8000cec <HAL_GPIO_Init+0x2a0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d05e      	beq.n	8000b46 <HAL_GPIO_Init+0xfa>
 8000a88:	4a98      	ldr	r2, [pc, #608]	; (8000cec <HAL_GPIO_Init+0x2a0>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d875      	bhi.n	8000b7a <HAL_GPIO_Init+0x12e>
 8000a8e:	4a98      	ldr	r2, [pc, #608]	; (8000cf0 <HAL_GPIO_Init+0x2a4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d058      	beq.n	8000b46 <HAL_GPIO_Init+0xfa>
 8000a94:	4a96      	ldr	r2, [pc, #600]	; (8000cf0 <HAL_GPIO_Init+0x2a4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d86f      	bhi.n	8000b7a <HAL_GPIO_Init+0x12e>
 8000a9a:	4a96      	ldr	r2, [pc, #600]	; (8000cf4 <HAL_GPIO_Init+0x2a8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d052      	beq.n	8000b46 <HAL_GPIO_Init+0xfa>
 8000aa0:	4a94      	ldr	r2, [pc, #592]	; (8000cf4 <HAL_GPIO_Init+0x2a8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d869      	bhi.n	8000b7a <HAL_GPIO_Init+0x12e>
 8000aa6:	4a94      	ldr	r2, [pc, #592]	; (8000cf8 <HAL_GPIO_Init+0x2ac>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d04c      	beq.n	8000b46 <HAL_GPIO_Init+0xfa>
 8000aac:	4a92      	ldr	r2, [pc, #584]	; (8000cf8 <HAL_GPIO_Init+0x2ac>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d863      	bhi.n	8000b7a <HAL_GPIO_Init+0x12e>
 8000ab2:	4a92      	ldr	r2, [pc, #584]	; (8000cfc <HAL_GPIO_Init+0x2b0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d046      	beq.n	8000b46 <HAL_GPIO_Init+0xfa>
 8000ab8:	4a90      	ldr	r2, [pc, #576]	; (8000cfc <HAL_GPIO_Init+0x2b0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d85d      	bhi.n	8000b7a <HAL_GPIO_Init+0x12e>
 8000abe:	2b12      	cmp	r3, #18
 8000ac0:	d82a      	bhi.n	8000b18 <HAL_GPIO_Init+0xcc>
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d859      	bhi.n	8000b7a <HAL_GPIO_Init+0x12e>
 8000ac6:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <HAL_GPIO_Init+0x80>)
 8000ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000acc:	08000b47 	.word	0x08000b47
 8000ad0:	08000b21 	.word	0x08000b21
 8000ad4:	08000b33 	.word	0x08000b33
 8000ad8:	08000b75 	.word	0x08000b75
 8000adc:	08000b7b 	.word	0x08000b7b
 8000ae0:	08000b7b 	.word	0x08000b7b
 8000ae4:	08000b7b 	.word	0x08000b7b
 8000ae8:	08000b7b 	.word	0x08000b7b
 8000aec:	08000b7b 	.word	0x08000b7b
 8000af0:	08000b7b 	.word	0x08000b7b
 8000af4:	08000b7b 	.word	0x08000b7b
 8000af8:	08000b7b 	.word	0x08000b7b
 8000afc:	08000b7b 	.word	0x08000b7b
 8000b00:	08000b7b 	.word	0x08000b7b
 8000b04:	08000b7b 	.word	0x08000b7b
 8000b08:	08000b7b 	.word	0x08000b7b
 8000b0c:	08000b7b 	.word	0x08000b7b
 8000b10:	08000b29 	.word	0x08000b29
 8000b14:	08000b3d 	.word	0x08000b3d
 8000b18:	4a79      	ldr	r2, [pc, #484]	; (8000d00 <HAL_GPIO_Init+0x2b4>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d013      	beq.n	8000b46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b1e:	e02c      	b.n	8000b7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	623b      	str	r3, [r7, #32]
          break;
 8000b26:	e029      	b.n	8000b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	623b      	str	r3, [r7, #32]
          break;
 8000b30:	e024      	b.n	8000b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	3308      	adds	r3, #8
 8000b38:	623b      	str	r3, [r7, #32]
          break;
 8000b3a:	e01f      	b.n	8000b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	330c      	adds	r3, #12
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	e01a      	b.n	8000b7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d102      	bne.n	8000b54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	623b      	str	r3, [r7, #32]
          break;
 8000b52:	e013      	b.n	8000b7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d105      	bne.n	8000b68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	611a      	str	r2, [r3, #16]
          break;
 8000b66:	e009      	b.n	8000b7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	615a      	str	r2, [r3, #20]
          break;
 8000b72:	e003      	b.n	8000b7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
          break;
 8000b78:	e000      	b.n	8000b7c <HAL_GPIO_Init+0x130>
          break;
 8000b7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	2bff      	cmp	r3, #255	; 0xff
 8000b80:	d801      	bhi.n	8000b86 <HAL_GPIO_Init+0x13a>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	e001      	b.n	8000b8a <HAL_GPIO_Init+0x13e>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2bff      	cmp	r3, #255	; 0xff
 8000b90:	d802      	bhi.n	8000b98 <HAL_GPIO_Init+0x14c>
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	e002      	b.n	8000b9e <HAL_GPIO_Init+0x152>
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	3b08      	subs	r3, #8
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	401a      	ands	r2, r3
 8000bb0:	6a39      	ldr	r1, [r7, #32]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bcc:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <HAL_GPIO_Init+0x2b8>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a4c      	ldr	r2, [pc, #304]	; (8000d04 <HAL_GPIO_Init+0x2b8>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b4a      	ldr	r3, [pc, #296]	; (8000d04 <HAL_GPIO_Init+0x2b8>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be4:	4a48      	ldr	r2, [pc, #288]	; (8000d08 <HAL_GPIO_Init+0x2bc>)
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	089b      	lsrs	r3, r3, #2
 8000bea:	3302      	adds	r3, #2
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	220f      	movs	r2, #15
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a40      	ldr	r2, [pc, #256]	; (8000d0c <HAL_GPIO_Init+0x2c0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d013      	beq.n	8000c38 <HAL_GPIO_Init+0x1ec>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a3f      	ldr	r2, [pc, #252]	; (8000d10 <HAL_GPIO_Init+0x2c4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d00d      	beq.n	8000c34 <HAL_GPIO_Init+0x1e8>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a3e      	ldr	r2, [pc, #248]	; (8000d14 <HAL_GPIO_Init+0x2c8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d007      	beq.n	8000c30 <HAL_GPIO_Init+0x1e4>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a3d      	ldr	r2, [pc, #244]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d101      	bne.n	8000c2c <HAL_GPIO_Init+0x1e0>
 8000c28:	2303      	movs	r3, #3
 8000c2a:	e006      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	e004      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c30:	2302      	movs	r3, #2
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3c:	f002 0203 	and.w	r2, r2, #3
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	4093      	lsls	r3, r2
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c4a:	492f      	ldr	r1, [pc, #188]	; (8000d08 <HAL_GPIO_Init+0x2bc>)
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3302      	adds	r3, #2
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d006      	beq.n	8000c72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c64:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	492c      	ldr	r1, [pc, #176]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	600b      	str	r3, [r1, #0]
 8000c70:	e006      	b.n	8000c80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	4928      	ldr	r1, [pc, #160]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	4922      	ldr	r1, [pc, #136]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	604b      	str	r3, [r1, #4]
 8000c98:	e006      	b.n	8000ca8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	491e      	ldr	r1, [pc, #120]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	4918      	ldr	r1, [pc, #96]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	608b      	str	r3, [r1, #8]
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4914      	ldr	r1, [pc, #80]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d021      	beq.n	8000d20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	490e      	ldr	r1, [pc, #56]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	60cb      	str	r3, [r1, #12]
 8000ce8:	e021      	b.n	8000d2e <HAL_GPIO_Init+0x2e2>
 8000cea:	bf00      	nop
 8000cec:	10320000 	.word	0x10320000
 8000cf0:	10310000 	.word	0x10310000
 8000cf4:	10220000 	.word	0x10220000
 8000cf8:	10210000 	.word	0x10210000
 8000cfc:	10120000 	.word	0x10120000
 8000d00:	10110000 	.word	0x10110000
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	40010800 	.word	0x40010800
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40011400 	.word	0x40011400
 8000d1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_GPIO_Init+0x304>)
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	4909      	ldr	r1, [pc, #36]	; (8000d50 <HAL_GPIO_Init+0x304>)
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3301      	adds	r3, #1
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f47f ae8e 	bne.w	8000a60 <HAL_GPIO_Init+0x14>
  }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	372c      	adds	r7, #44	; 0x2c
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d64:	787b      	ldrb	r3, [r7, #1]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d6a:	887a      	ldrh	r2, [r7, #2]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d70:	e003      	b.n	8000d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	041a      	lsls	r2, r3, #16
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	611a      	str	r2, [r3, #16]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	041a      	lsls	r2, r3, #16
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43d9      	mvns	r1, r3
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	400b      	ands	r3, r1
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	611a      	str	r2, [r3, #16]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
	...

08000db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e12b      	b.n	8001022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d106      	bne.n	8000de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fbe8 	bl	80005b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2224      	movs	r2, #36	; 0x24
 8000de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0201 	bic.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e1c:	f002 f9a8 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8000e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4a81      	ldr	r2, [pc, #516]	; (800102c <HAL_I2C_Init+0x274>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d807      	bhi.n	8000e3c <HAL_I2C_Init+0x84>
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4a80      	ldr	r2, [pc, #512]	; (8001030 <HAL_I2C_Init+0x278>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	bf94      	ite	ls
 8000e34:	2301      	movls	r3, #1
 8000e36:	2300      	movhi	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	e006      	b.n	8000e4a <HAL_I2C_Init+0x92>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4a7d      	ldr	r2, [pc, #500]	; (8001034 <HAL_I2C_Init+0x27c>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	bf94      	ite	ls
 8000e44:	2301      	movls	r3, #1
 8000e46:	2300      	movhi	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0e7      	b.n	8001022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4a78      	ldr	r2, [pc, #480]	; (8001038 <HAL_I2C_Init+0x280>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	0c9b      	lsrs	r3, r3, #18
 8000e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	4a6a      	ldr	r2, [pc, #424]	; (800102c <HAL_I2C_Init+0x274>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d802      	bhi.n	8000e8c <HAL_I2C_Init+0xd4>
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	e009      	b.n	8000ea0 <HAL_I2C_Init+0xe8>
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e92:	fb02 f303 	mul.w	r3, r2, r3
 8000e96:	4a69      	ldr	r2, [pc, #420]	; (800103c <HAL_I2C_Init+0x284>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	099b      	lsrs	r3, r3, #6
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	495c      	ldr	r1, [pc, #368]	; (800102c <HAL_I2C_Init+0x274>)
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d819      	bhi.n	8000ef4 <HAL_I2C_Init+0x13c>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	1e59      	subs	r1, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ece:	1c59      	adds	r1, r3, #1
 8000ed0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ed4:	400b      	ands	r3, r1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00a      	beq.n	8000ef0 <HAL_I2C_Init+0x138>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	1e59      	subs	r1, r3, #1
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee8:	3301      	adds	r3, #1
 8000eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eee:	e051      	b.n	8000f94 <HAL_I2C_Init+0x1dc>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	e04f      	b.n	8000f94 <HAL_I2C_Init+0x1dc>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d111      	bne.n	8000f20 <HAL_I2C_Init+0x168>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	1e58      	subs	r0, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6859      	ldr	r1, [r3, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	440b      	add	r3, r1
 8000f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f0e:	3301      	adds	r3, #1
 8000f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf0c      	ite	eq
 8000f18:	2301      	moveq	r3, #1
 8000f1a:	2300      	movne	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	e012      	b.n	8000f46 <HAL_I2C_Init+0x18e>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	1e58      	subs	r0, r3, #1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6859      	ldr	r1, [r3, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	0099      	lsls	r1, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f36:	3301      	adds	r3, #1
 8000f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf0c      	ite	eq
 8000f40:	2301      	moveq	r3, #1
 8000f42:	2300      	movne	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_I2C_Init+0x196>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e022      	b.n	8000f94 <HAL_I2C_Init+0x1dc>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10e      	bne.n	8000f74 <HAL_I2C_Init+0x1bc>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	1e58      	subs	r0, r3, #1
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6859      	ldr	r1, [r3, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	440b      	add	r3, r1
 8000f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f68:	3301      	adds	r3, #1
 8000f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f72:	e00f      	b.n	8000f94 <HAL_I2C_Init+0x1dc>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	1e58      	subs	r0, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6859      	ldr	r1, [r3, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	0099      	lsls	r1, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	6809      	ldr	r1, [r1, #0]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69da      	ldr	r2, [r3, #28]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6911      	ldr	r1, [r2, #16]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68d2      	ldr	r2, [r2, #12]
 8000fce:	4311      	orrs	r1, r2
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695a      	ldr	r2, [r3, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0201 	orr.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2220      	movs	r2, #32
 800100e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	000186a0 	.word	0x000186a0
 8001030:	001e847f 	.word	0x001e847f
 8001034:	003d08ff 	.word	0x003d08ff
 8001038:	431bde83 	.word	0x431bde83
 800103c:	10624dd3 	.word	0x10624dd3

08001040 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b08b      	sub	sp, #44	; 0x2c
 8001044:	af06      	add	r7, sp, #24
 8001046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e0fd      	b.n	800124e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f006 fca0 	bl	80079ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2203      	movs	r2, #3
 8001070:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f002 f987 	bl	800338c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	687e      	ldr	r6, [r7, #4]
 8001086:	466d      	mov	r5, sp
 8001088:	f106 0410 	add.w	r4, r6, #16
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	602b      	str	r3, [r5, #0]
 8001094:	1d33      	adds	r3, r6, #4
 8001096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f002 f951 	bl	8003340 <USB_CoreInit>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2202      	movs	r2, #2
 80010a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e0ce      	b.n	800124e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 f982 	bl	80033c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e04c      	b.n	800115c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	3301      	adds	r3, #1
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	440b      	add	r3, r1
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	b298      	uxth	r0, r3
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	3336      	adds	r3, #54	; 0x36
 8001100:	4602      	mov	r2, r0
 8001102:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3303      	adds	r3, #3
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	3338      	adds	r3, #56	; 0x38
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	333c      	adds	r3, #60	; 0x3c
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	3340      	adds	r3, #64	; 0x40
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3301      	adds	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3ad      	bcc.n	80010c2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e044      	b.n	80011f6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	440b      	add	r3, r1
 8001190:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	440b      	add	r3, r1
 80011d2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011da:	7bfa      	ldrb	r2, [r7, #15]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	3301      	adds	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3b5      	bcc.n	800116c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	687e      	ldr	r6, [r7, #4]
 8001208:	466d      	mov	r5, sp
 800120a:	f106 0410 	add.w	r4, r6, #16
 800120e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	602b      	str	r3, [r5, #0]
 8001216:	1d33      	adds	r3, r6, #4
 8001218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f002 f8dc 	bl	80033d8 <USB_DevInit>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2202      	movs	r2, #2
 800122a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00d      	b.n	800124e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f004 fd8e 	bl	8005d68 <USB_DevDisconnect>

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001256 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_PCD_Start+0x16>
 8001268:	2302      	movs	r3, #2
 800126a:	e016      	b.n	800129a <HAL_PCD_Start+0x44>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f002 f871 	bl	8003360 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800127e:	2101      	movs	r1, #1
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f006 fe06 	bl	8007e92 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f004 fd62 	bl	8005d54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b088      	sub	sp, #32
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f004 fd64 	bl	8005d7c <USB_ReadInterrupts>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012be:	d102      	bne.n	80012c6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fb5f 	bl	8001984 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fd56 	bl	8005d7c <USB_ReadInterrupts>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012da:	d112      	bne.n	8001302 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ee:	b292      	uxth	r2, r2
 80012f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f006 fbd4 	bl	8007aa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012fa:	2100      	movs	r1, #0
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f923 	bl	8001548 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f004 fd38 	bl	8005d7c <USB_ReadInterrupts>
 800130c:	4603      	mov	r3, r0
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001316:	d10b      	bne.n	8001330 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001320:	b29a      	uxth	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800132a:	b292      	uxth	r2, r2
 800132c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f004 fd21 	bl	8005d7c <USB_ReadInterrupts>
 800133a:	4603      	mov	r3, r0
 800133c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001344:	d10b      	bne.n	800135e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800134e:	b29a      	uxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001358:	b292      	uxth	r2, r2
 800135a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f004 fd0a 	bl	8005d7c <USB_ReadInterrupts>
 8001368:	4603      	mov	r3, r0
 800136a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001372:	d126      	bne.n	80013c2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0204 	bic.w	r2, r2, #4
 8001386:	b292      	uxth	r2, r2
 8001388:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0208 	bic.w	r2, r2, #8
 800139e:	b292      	uxth	r2, r2
 80013a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f006 fbb5 	bl	8007b14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013bc:	b292      	uxth	r2, r2
 80013be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 fcd8 	bl	8005d7c <USB_ReadInterrupts>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013d6:	f040 8082 	bne.w	80014de <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	77fb      	strb	r3, [r7, #31]
 80013de:	e010      	b.n	8001402 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	441a      	add	r2, r3
 80013ec:	7ffb      	ldrb	r3, [r7, #31]
 80013ee:	8812      	ldrh	r2, [r2, #0]
 80013f0:	b292      	uxth	r2, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	3320      	adds	r3, #32
 80013f6:	443b      	add	r3, r7
 80013f8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80013fc:	7ffb      	ldrb	r3, [r7, #31]
 80013fe:	3301      	adds	r3, #1
 8001400:	77fb      	strb	r3, [r7, #31]
 8001402:	7ffb      	ldrb	r3, [r7, #31]
 8001404:	2b07      	cmp	r3, #7
 8001406:	d9eb      	bls.n	80013e0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001410:	b29a      	uxth	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0201 	orr.w	r2, r2, #1
 800141a:	b292      	uxth	r2, r2
 800141c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	b292      	uxth	r2, r2
 8001434:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001438:	bf00      	nop
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001442:	b29b      	uxth	r3, r3
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f6      	beq.n	800143a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001454:	b29a      	uxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800145e:	b292      	uxth	r2, r2
 8001460:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	77fb      	strb	r3, [r7, #31]
 8001468:	e00f      	b.n	800148a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800146a:	7ffb      	ldrb	r3, [r7, #31]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	4611      	mov	r1, r2
 8001472:	7ffa      	ldrb	r2, [r7, #31]
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	440a      	add	r2, r1
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	3320      	adds	r3, #32
 800147c:	443b      	add	r3, r7
 800147e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001482:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001484:	7ffb      	ldrb	r3, [r7, #31]
 8001486:	3301      	adds	r3, #1
 8001488:	77fb      	strb	r3, [r7, #31]
 800148a:	7ffb      	ldrb	r3, [r7, #31]
 800148c:	2b07      	cmp	r3, #7
 800148e:	d9ec      	bls.n	800146a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001498:	b29a      	uxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0208 	orr.w	r2, r2, #8
 80014a2:	b292      	uxth	r2, r2
 80014a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ba:	b292      	uxth	r2, r2
 80014bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0204 	orr.w	r2, r2, #4
 80014d2:	b292      	uxth	r2, r2
 80014d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f006 fb01 	bl	8007ae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f004 fc4a 	bl	8005d7c <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f2:	d10e      	bne.n	8001512 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001506:	b292      	uxth	r2, r2
 8001508:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f006 faba 	bl	8007a86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fc30 	bl	8005d7c <USB_ReadInterrupts>
 800151c:	4603      	mov	r3, r0
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001526:	d10b      	bne.n	8001540 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001530:	b29a      	uxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800153a:	b292      	uxth	r2, r2
 800153c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_PCD_SetAddress+0x1a>
 800155e:	2302      	movs	r3, #2
 8001560:	e013      	b.n	800158a <HAL_PCD_SetAddress+0x42>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f004 fbd7 	bl	8005d2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	4608      	mov	r0, r1
 800159c:	4611      	mov	r1, r2
 800159e:	461a      	mov	r2, r3
 80015a0:	4603      	mov	r3, r0
 80015a2:	70fb      	strb	r3, [r7, #3]
 80015a4:	460b      	mov	r3, r1
 80015a6:	803b      	strh	r3, [r7, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da0e      	bge.n	80015d6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2201      	movs	r2, #1
 80015d2:	705a      	strb	r2, [r3, #1]
 80015d4:	e00e      	b.n	80015f4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	f003 0207 	and.w	r2, r3, #7
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001600:	883a      	ldrh	r2, [r7, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	78ba      	ldrb	r2, [r7, #2]
 800160a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	785b      	ldrb	r3, [r3, #1]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d004      	beq.n	800161e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b29a      	uxth	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800161e:	78bb      	ldrb	r3, [r7, #2]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d102      	bne.n	800162a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_PCD_EP_Open+0xa6>
 8001634:	2302      	movs	r3, #2
 8001636:	e00e      	b.n	8001656 <HAL_PCD_EP_Open+0xc4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68f9      	ldr	r1, [r7, #12]
 8001646:	4618      	mov	r0, r3
 8001648:	f001 fee6 	bl	8003418 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001654:	7afb      	ldrb	r3, [r7, #11]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800166a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800166e:	2b00      	cmp	r3, #0
 8001670:	da0e      	bge.n	8001690 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2201      	movs	r2, #1
 800168c:	705a      	strb	r2, [r3, #1]
 800168e:	e00e      	b.n	80016ae <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	f003 0207 	and.w	r2, r3, #7
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_PCD_EP_Close+0x6a>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e00e      	b.n	80016e6 <HAL_PCD_EP_Close+0x88>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fa08 	bl	8003aec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	460b      	mov	r3, r1
 80016fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016fe:	7afb      	ldrb	r3, [r7, #11]
 8001700:	f003 0207 	and.w	r2, r3, #7
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2200      	movs	r2, #0
 800172c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172e:	7afb      	ldrb	r3, [r7, #11]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	b2da      	uxtb	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800173a:	7afb      	ldrb	r3, [r7, #11]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6979      	ldr	r1, [r7, #20]
 800174a:	4618      	mov	r0, r3
 800174c:	f002 fbba 	bl	8003ec4 <USB_EPStartXfer>
 8001750:	e005      	b.n	800175e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6979      	ldr	r1, [r7, #20]
 8001758:	4618      	mov	r0, r3
 800175a:	f002 fbb3 	bl	8003ec4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	f003 0207 	and.w	r2, r3, #7
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	460b      	mov	r3, r1
 80017a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a6:	7afb      	ldrb	r3, [r7, #11]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2201      	movs	r2, #1
 80017e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ee:	7afb      	ldrb	r3, [r7, #11]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d106      	bne.n	8001806 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6979      	ldr	r1, [r7, #20]
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fb60 	bl	8003ec4 <USB_EPStartXfer>
 8001804:	e005      	b.n	8001812 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6979      	ldr	r1, [r7, #20]
 800180c:	4618      	mov	r0, r3
 800180e:	f002 fb59 	bl	8003ec4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	f003 0207 	and.w	r2, r3, #7
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	d901      	bls.n	800183a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e04c      	b.n	80018d4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800183a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183e:	2b00      	cmp	r3, #0
 8001840:	da0e      	bge.n	8001860 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	705a      	strb	r2, [r3, #1]
 800185e:	e00c      	b.n	800187a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	b2da      	uxtb	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_PCD_EP_SetStall+0x7e>
 8001896:	2302      	movs	r3, #2
 8001898:	e01c      	b.n	80018d4 <HAL_PCD_EP_SetStall+0xb8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68f9      	ldr	r1, [r7, #12]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 f943 	bl	8005b34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d108      	bne.n	80018ca <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80018c2:	4619      	mov	r1, r3
 80018c4:	4610      	mov	r0, r2
 80018c6:	f004 fa68 	bl	8005d9a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 020f 	and.w	r2, r3, #15
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d901      	bls.n	80018fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e040      	b.n	800197c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da0e      	bge.n	8001920 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2201      	movs	r2, #1
 800191c:	705a      	strb	r2, [r3, #1]
 800191e:	e00e      	b.n	800193e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	f003 0207 	and.w	r2, r3, #7
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_PCD_EP_ClrStall+0x82>
 800195a:	2302      	movs	r3, #2
 800195c:	e00e      	b.n	800197c <HAL_PCD_EP_ClrStall+0xa0>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68f9      	ldr	r1, [r7, #12]
 800196c:	4618      	mov	r0, r3
 800196e:	f004 f931 	bl	8005bd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08e      	sub	sp, #56	; 0x38
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800198c:	e2ec      	b.n	8001f68 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001996:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001998:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80019a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 8161 	bne.w	8001c70 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d152      	bne.n	8001a5e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c8:	81fb      	strh	r3, [r7, #14]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	89fb      	ldrh	r3, [r7, #14]
 80019d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019d8:	b29b      	uxth	r3, r3
 80019da:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3328      	adds	r3, #40	; 0x28
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
 80019f6:	3302      	adds	r3, #2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	441a      	add	r2, r3
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f006 f817 	bl	8007a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 829b 	beq.w	8001f68 <PCD_EP_ISR_Handler+0x5e4>
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 8296 	bne.w	8001f68 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b292      	uxth	r2, r2
 8001a50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a5c:	e284      	b.n	8001f68 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d034      	beq.n	8001ae2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3306      	adds	r3, #6
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	f004 f9bf 	bl	8005e3a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ac8:	4013      	ands	r3, r2
 8001aca:	823b      	strh	r3, [r7, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	8a3a      	ldrh	r2, [r7, #16]
 8001ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ad6:	b292      	uxth	r2, r2
 8001ad8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f005 ff8c 	bl	80079f8 <HAL_PCD_SetupStageCallback>
 8001ae0:	e242      	b.n	8001f68 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ae2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f280 823e 	bge.w	8001f68 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001af8:	4013      	ands	r3, r2
 8001afa:	83bb      	strh	r3, [r7, #28]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	8bba      	ldrh	r2, [r7, #28]
 8001b02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b06:	b292      	uxth	r2, r2
 8001b08:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3306      	adds	r3, #6
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d019      	beq.n	8001b72 <PCD_EP_ISR_Handler+0x1ee>
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d015      	beq.n	8001b72 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	6959      	ldr	r1, [r3, #20]
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f004 f96f 	bl	8005e3a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	441a      	add	r2, r3
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f005 ff55 	bl	8007a1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 81f2 	bne.w	8001f68 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4413      	add	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d112      	bne.n	8001bd2 <PCD_EP_ISR_Handler+0x24e>
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	801a      	strh	r2, [r3, #0]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	801a      	strh	r2, [r3, #0]
 8001bd0:	e02f      	b.n	8001c32 <PCD_EP_ISR_Handler+0x2ae>
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8001bd8:	d813      	bhi.n	8001c02 <PCD_EP_ISR_Handler+0x27e>
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	085b      	lsrs	r3, r3, #1
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <PCD_EP_ISR_Handler+0x270>
 8001bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	801a      	strh	r2, [r3, #0]
 8001c00:	e017      	b.n	8001c32 <PCD_EP_ISR_Handler+0x2ae>
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	633b      	str	r3, [r7, #48]	; 0x30
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <PCD_EP_ISR_Handler+0x298>
 8001c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8001c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	029b      	lsls	r3, r3, #10
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c42:	827b      	strh	r3, [r7, #18]
 8001c44:	8a7b      	ldrh	r3, [r7, #18]
 8001c46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c4a:	827b      	strh	r3, [r7, #18]
 8001c4c:	8a7b      	ldrh	r3, [r7, #18]
 8001c4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c52:	827b      	strh	r3, [r7, #18]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	8a7b      	ldrh	r3, [r7, #18]
 8001c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	8013      	strh	r3, [r2, #0]
 8001c6e:	e17b      	b.n	8001f68 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c82:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f280 80ea 	bge.w	8001e60 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	853b      	strh	r3, [r7, #40]	; 0x28
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001cb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cbe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	7b1b      	ldrb	r3, [r3, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d122      	bne.n	8001d22 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	3306      	adds	r3, #6
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d04:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001d06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8087 	beq.w	8001e1c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	6959      	ldr	r1, [r3, #20]
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	88da      	ldrh	r2, [r3, #6]
 8001d1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d1c:	f004 f88d 	bl	8005e3a <USB_ReadPMA>
 8001d20:	e07c      	b.n	8001e1c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	78db      	ldrb	r3, [r3, #3]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d108      	bne.n	8001d3c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f927 	bl	8001f84 <HAL_PCD_EP_DB_Receive>
 8001d36:	4603      	mov	r3, r0
 8001d38:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001d3a:	e06f      	b.n	8001e1c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d56:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	441a      	add	r2, r3
 8001d66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d021      	beq.n	8001dda <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	3302      	adds	r3, #2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dbe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001dc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d02a      	beq.n	8001e1c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	6959      	ldr	r1, [r3, #20]
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	891a      	ldrh	r2, [r3, #8]
 8001dd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dd4:	f004 f831 	bl	8005e3a <USB_ReadPMA>
 8001dd8:	e020      	b.n	8001e1c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	3306      	adds	r3, #6
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e02:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	6959      	ldr	r1, [r3, #20]
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	895a      	ldrh	r2, [r3, #10]
 8001e16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e18:	f004 f80f 	bl	8005e3a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e22:	441a      	add	r2, r3
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e2e:	441a      	add	r2, r3
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <PCD_EP_ISR_Handler+0x4c2>
 8001e3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d206      	bcs.n	8001e54 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f005 fde5 	bl	8007a1c <HAL_PCD_DataOutStageCallback>
 8001e52:	e005      	b.n	8001e60 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f002 f832 	bl	8003ec4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d07e      	beq.n	8001f68 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e98:	843b      	strh	r3, [r7, #32]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	441a      	add	r2, r3
 8001ea8:	8c3b      	ldrh	r3, [r7, #32]
 8001eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	78db      	ldrb	r3, [r3, #3]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d00c      	beq.n	8001ed8 <PCD_EP_ISR_Handler+0x554>
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	78db      	ldrb	r3, [r3, #3]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d146      	bne.n	8001f5c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ece:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d141      	bne.n	8001f5c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	3302      	adds	r3, #2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f00:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	8bfb      	ldrh	r3, [r7, #30]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d906      	bls.n	8001f1a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	8bfb      	ldrh	r3, [r7, #30]
 8001f12:	1ad2      	subs	r2, r2, r3
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	619a      	str	r2, [r3, #24]
 8001f18:	e002      	b.n	8001f20 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d106      	bne.n	8001f36 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f005 fd8f 	bl	8007a52 <HAL_PCD_DataInStageCallback>
 8001f34:	e018      	b.n	8001f68 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	8bfb      	ldrh	r3, [r7, #30]
 8001f3c:	441a      	add	r2, r3
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	69da      	ldr	r2, [r3, #28]
 8001f46:	8bfb      	ldrh	r3, [r7, #30]
 8001f48:	441a      	add	r2, r3
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 ffb5 	bl	8003ec4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001f5a:	e005      	b.n	8001f68 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f91b 	bl	800219e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f6ff ad0a 	blt.w	800198e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3738      	adds	r7, #56	; 0x38
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d07e      	beq.n	800209a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	8b7b      	ldrh	r3, [r7, #26]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d306      	bcc.n	8001fde <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	8b7b      	ldrh	r3, [r7, #26]
 8001fd6:	1ad2      	subs	r2, r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	619a      	str	r2, [r3, #24]
 8001fdc:	e002      	b.n	8001fe4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d123      	bne.n	8002034 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	833b      	strh	r3, [r7, #24]
 8002008:	8b3b      	ldrh	r3, [r7, #24]
 800200a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800200e:	833b      	strh	r3, [r7, #24]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	441a      	add	r2, r3
 800201e:	8b3b      	ldrh	r3, [r7, #24]
 8002020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002030:	b29b      	uxth	r3, r3
 8002032:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01f      	beq.n	800207e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002058:	82fb      	strh	r3, [r7, #22]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	441a      	add	r2, r3
 8002068:	8afb      	ldrh	r3, [r7, #22]
 800206a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800206e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002076:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800207a:	b29b      	uxth	r3, r3
 800207c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800207e:	8b7b      	ldrh	r3, [r7, #26]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8087 	beq.w	8002194 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	6959      	ldr	r1, [r3, #20]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	891a      	ldrh	r2, [r3, #8]
 8002092:	8b7b      	ldrh	r3, [r7, #26]
 8002094:	f003 fed1 	bl	8005e3a <USB_ReadPMA>
 8002098:	e07c      	b.n	8002194 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	3306      	adds	r3, #6
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	699a      	ldr	r2, [r3, #24]
 80020c8:	8b7b      	ldrh	r3, [r7, #26]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d306      	bcc.n	80020dc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	8b7b      	ldrh	r3, [r7, #26]
 80020d4:	1ad2      	subs	r2, r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	619a      	str	r2, [r3, #24]
 80020da:	e002      	b.n	80020e2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d123      	bne.n	8002132 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002104:	83fb      	strh	r3, [r7, #30]
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800210c:	83fb      	strh	r3, [r7, #30]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	441a      	add	r2, r3
 800211c:	8bfb      	ldrh	r3, [r7, #30]
 800211e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212e:	b29b      	uxth	r3, r3
 8002130:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d11f      	bne.n	800217c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002156:	83bb      	strh	r3, [r7, #28]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	441a      	add	r2, r3
 8002166:	8bbb      	ldrh	r3, [r7, #28]
 8002168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800216c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002174:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002178:	b29b      	uxth	r3, r3
 800217a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800217c:	8b7b      	ldrh	r3, [r7, #26]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	6959      	ldr	r1, [r3, #20]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	895a      	ldrh	r2, [r3, #10]
 800218e:	8b7b      	ldrh	r3, [r7, #26]
 8002190:	f003 fe53 	bl	8005e3a <USB_ReadPMA>
    }
  }

  return count;
 8002194:	8b7b      	ldrh	r3, [r7, #26]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b0a2      	sub	sp, #136	; 0x88
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	4613      	mov	r3, r2
 80021aa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 81c7 	beq.w	8002546 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	3302      	adds	r3, #2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d907      	bls.n	8002200 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021f8:	1ad2      	subs	r2, r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	619a      	str	r2, [r3, #24]
 80021fe:	e002      	b.n	8002206 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 80b9 	bne.w	8002382 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d126      	bne.n	8002266 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	4413      	add	r3, r2
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	011a      	lsls	r2, r3, #4
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	4413      	add	r3, r2
 800223a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800224a:	b29a      	uxth	r2, r3
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	801a      	strh	r2, [r3, #0]
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800225a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800225e:	b29a      	uxth	r2, r3
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	e01a      	b.n	800229c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	785b      	ldrb	r3, [r3, #1]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d116      	bne.n	800229c <HAL_PCD_EP_DB_Transmit+0xfe>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227c:	b29b      	uxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	4413      	add	r3, r2
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	011a      	lsls	r2, r3, #4
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	4413      	add	r3, r2
 8002290:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	2200      	movs	r2, #0
 800229a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	623b      	str	r3, [r7, #32]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	785b      	ldrb	r3, [r3, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d126      	bne.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x15a>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	4413      	add	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	011a      	lsls	r2, r3, #4
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4413      	add	r3, r2
 80022cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022dc:	b29a      	uxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	801a      	strh	r2, [r3, #0]
 80022f6:	e017      	b.n	8002328 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d113      	bne.n	8002328 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002308:	b29b      	uxth	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	4413      	add	r3, r2
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	011a      	lsls	r2, r3, #4
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	4413      	add	r3, r2
 800231c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2200      	movs	r2, #0
 8002326:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f005 fb8f 	bl	8007a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 82d4 	beq.w	80028e8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	827b      	strh	r3, [r7, #18]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	441a      	add	r2, r3
 800236a:	8a7b      	ldrh	r3, [r7, #18]
 800236c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	b29b      	uxth	r3, r3
 800237e:	8013      	strh	r3, [r2, #0]
 8002380:	e2b2      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d021      	beq.n	80023d0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	441a      	add	r2, r3
 80023b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80023bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 8286 	bne.w	80028e8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e4:	441a      	add	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023f2:	441a      	add	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d309      	bcc.n	8002418 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002410:	1ad2      	subs	r2, r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	621a      	str	r2, [r3, #32]
 8002416:	e015      	b.n	8002444 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d107      	bne.n	8002430 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002420:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002424:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800242e:	e009      	b.n	8002444 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d155      	bne.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002460:	4413      	add	r3, r2
 8002462:	63bb      	str	r3, [r7, #56]	; 0x38
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	011a      	lsls	r2, r3, #4
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	4413      	add	r3, r2
 800246e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
 8002474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002476:	2b00      	cmp	r3, #0
 8002478:	d112      	bne.n	80024a0 <HAL_PCD_EP_DB_Transmit+0x302>
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002484:	b29a      	uxth	r2, r3
 8002486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002498:	b29a      	uxth	r2, r3
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	e047      	b.n	8002530 <HAL_PCD_EP_DB_Transmit+0x392>
 80024a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a2:	2b3e      	cmp	r3, #62	; 0x3e
 80024a4:	d811      	bhi.n	80024ca <HAL_PCD_EP_DB_Transmit+0x32c>
 80024a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80024ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_PCD_EP_DB_Transmit+0x31e>
 80024b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b8:	3301      	adds	r3, #1
 80024ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80024bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024be:	b29b      	uxth	r3, r3
 80024c0:	029b      	lsls	r3, r3, #10
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c6:	801a      	strh	r2, [r3, #0]
 80024c8:	e032      	b.n	8002530 <HAL_PCD_EP_DB_Transmit+0x392>
 80024ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80024d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x342>
 80024da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024dc:	3b01      	subs	r3, #1
 80024de:	64bb      	str	r3, [r7, #72]	; 0x48
 80024e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	029b      	lsls	r3, r3, #10
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	e01b      	b.n	8002530 <HAL_PCD_EP_DB_Transmit+0x392>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d117      	bne.n	8002530 <HAL_PCD_EP_DB_Transmit+0x392>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	643b      	str	r3, [r7, #64]	; 0x40
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002514:	4413      	add	r3, r2
 8002516:	643b      	str	r3, [r7, #64]	; 0x40
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	011a      	lsls	r2, r3, #4
 800251e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002520:	4413      	add	r3, r2
 8002522:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800252a:	b29a      	uxth	r2, r3
 800252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	6959      	ldr	r1, [r3, #20]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	891a      	ldrh	r2, [r3, #8]
 800253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	f003 fc36 	bl	8005db0 <USB_WritePMA>
 8002544:	e1d0      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254e:	b29b      	uxth	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	3306      	adds	r3, #6
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	4413      	add	r3, r2
 8002564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800256e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800257a:	429a      	cmp	r2, r3
 800257c:	d307      	bcc.n	800258e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002586:	1ad2      	subs	r2, r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	619a      	str	r2, [r3, #24]
 800258c:	e002      	b.n	8002594 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 80c4 	bne.w	8002726 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	785b      	ldrb	r3, [r3, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d126      	bne.n	80025f4 <HAL_PCD_EP_DB_Transmit+0x456>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ba:	4413      	add	r3, r2
 80025bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	011a      	lsls	r2, r3, #4
 80025c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c6:	4413      	add	r3, r2
 80025c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025d8:	b29a      	uxth	r2, r3
 80025da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025f0:	801a      	strh	r2, [r3, #0]
 80025f2:	e01a      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x48c>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d116      	bne.n	800262a <HAL_PCD_EP_DB_Transmit+0x48c>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	677b      	str	r3, [r7, #116]	; 0x74
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002610:	4413      	add	r3, r2
 8002612:	677b      	str	r3, [r7, #116]	; 0x74
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	011a      	lsls	r2, r3, #4
 800261a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261c:	4413      	add	r3, r2
 800261e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002622:	673b      	str	r3, [r7, #112]	; 0x70
 8002624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002626:	2200      	movs	r2, #0
 8002628:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12f      	bne.n	8002698 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002650:	4413      	add	r3, r2
 8002652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	011a      	lsls	r2, r3, #4
 800265c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002660:	4413      	add	r3, r2
 8002662:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002666:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800266a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002676:	b29a      	uxth	r2, r3
 8002678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268e:	b29a      	uxth	r2, r3
 8002690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	e017      	b.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d113      	bne.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ae:	4413      	add	r3, r2
 80026b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	011a      	lsls	r2, r3, #4
 80026b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ba:	4413      	add	r3, r2
 80026bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026c4:	2200      	movs	r2, #0
 80026c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f005 f9bf 	bl	8007a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 8104 	bne.w	80028e8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	441a      	add	r2, r3
 800270c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800271c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002720:	b29b      	uxth	r3, r3
 8002722:	8013      	strh	r3, [r2, #0]
 8002724:	e0e0      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d121      	bne.n	8002774 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	441a      	add	r2, r3
 800275c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002768:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800276c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002770:	b29b      	uxth	r3, r3
 8002772:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800277a:	2b01      	cmp	r3, #1
 800277c:	f040 80b4 	bne.w	80028e8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002788:	441a      	add	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002796:	441a      	add	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6a1a      	ldr	r2, [r3, #32]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d309      	bcc.n	80027bc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b4:	1ad2      	subs	r2, r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	621a      	str	r2, [r3, #32]
 80027ba:	e015      	b.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80027c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027d2:	e009      	b.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2200      	movs	r2, #0
 80027de:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	667b      	str	r3, [r7, #100]	; 0x64
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d155      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x704>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280a:	4413      	add	r3, r2
 800280c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	011a      	lsls	r2, r3, #4
 8002814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002816:	4413      	add	r3, r2
 8002818:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800281c:	65bb      	str	r3, [r7, #88]	; 0x58
 800281e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002820:	2b00      	cmp	r3, #0
 8002822:	d112      	bne.n	800284a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800282e:	b29a      	uxth	r2, r3
 8002830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002842:	b29a      	uxth	r2, r3
 8002844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	e044      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x736>
 800284a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284c:	2b3e      	cmp	r3, #62	; 0x3e
 800284e:	d811      	bhi.n	8002874 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002852:	085b      	lsrs	r3, r3, #1
 8002854:	657b      	str	r3, [r7, #84]	; 0x54
 8002856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002862:	3301      	adds	r3, #1
 8002864:	657b      	str	r3, [r7, #84]	; 0x54
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	b29b      	uxth	r3, r3
 800286a:	029b      	lsls	r3, r3, #10
 800286c:	b29a      	uxth	r2, r3
 800286e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002870:	801a      	strh	r2, [r3, #0]
 8002872:	e02f      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x736>
 8002874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	657b      	str	r3, [r7, #84]	; 0x54
 800287a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002886:	3b01      	subs	r3, #1
 8002888:	657b      	str	r3, [r7, #84]	; 0x54
 800288a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288c:	b29b      	uxth	r3, r3
 800288e:	029b      	lsls	r3, r3, #10
 8002890:	b29b      	uxth	r3, r3
 8002892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800289a:	b29a      	uxth	r2, r3
 800289c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	e018      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x736>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d114      	bne.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x736>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b8:	4413      	add	r3, r2
 80028ba:	667b      	str	r3, [r7, #100]	; 0x64
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	011a      	lsls	r2, r3, #4
 80028c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028c4:	4413      	add	r3, r2
 80028c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028ca:	663b      	str	r3, [r7, #96]	; 0x60
 80028cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6959      	ldr	r1, [r3, #20]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	895a      	ldrh	r2, [r3, #10]
 80028e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f003 fa64 	bl	8005db0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002902:	823b      	strh	r3, [r7, #16]
 8002904:	8a3b      	ldrh	r3, [r7, #16]
 8002906:	f083 0310 	eor.w	r3, r3, #16
 800290a:	823b      	strh	r3, [r7, #16]
 800290c:	8a3b      	ldrh	r3, [r7, #16]
 800290e:	f083 0320 	eor.w	r3, r3, #32
 8002912:	823b      	strh	r3, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	8a3b      	ldrh	r3, [r7, #16]
 8002924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800292c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002934:	b29b      	uxth	r3, r3
 8002936:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3788      	adds	r7, #136	; 0x88
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002942:	b480      	push	{r7}
 8002944:	b087      	sub	sp, #28
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	817b      	strh	r3, [r7, #10]
 8002950:	4613      	mov	r3, r2
 8002952:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002954:	897b      	ldrh	r3, [r7, #10]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002960:	897b      	ldrh	r3, [r7, #10]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e009      	b.n	800298c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002978:	897a      	ldrh	r2, [r7, #10]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4413      	add	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800298c:	893b      	ldrh	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d107      	bne.n	80029a2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2200      	movs	r2, #0
 8002996:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	b29a      	uxth	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	80da      	strh	r2, [r3, #6]
 80029a0:	e00b      	b.n	80029ba <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2201      	movs	r2, #1
 80029a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
	...

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e272      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8087 	beq.w	8002af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e8:	4b92      	ldr	r3, [pc, #584]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d00c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029f4:	4b8f      	ldr	r3, [pc, #572]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d112      	bne.n	8002a26 <HAL_RCC_OscConfig+0x5e>
 8002a00:	4b8c      	ldr	r3, [pc, #560]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d10b      	bne.n	8002a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0e:	4b89      	ldr	r3, [pc, #548]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d06c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x12c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d168      	bne.n	8002af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e24c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x76>
 8002a30:	4b80      	ldr	r3, [pc, #512]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a7f      	ldr	r2, [pc, #508]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	e02e      	b.n	8002a9c <HAL_RCC_OscConfig+0xd4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x98>
 8002a46:	4b7b      	ldr	r3, [pc, #492]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7a      	ldr	r2, [pc, #488]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b78      	ldr	r3, [pc, #480]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a77      	ldr	r2, [pc, #476]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e01d      	b.n	8002a9c <HAL_RCC_OscConfig+0xd4>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0xbc>
 8002a6a:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a71      	ldr	r2, [pc, #452]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b6f      	ldr	r3, [pc, #444]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a6e      	ldr	r2, [pc, #440]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0xd4>
 8002a84:	4b6b      	ldr	r3, [pc, #428]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a67      	ldr	r2, [pc, #412]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d013      	beq.n	8002acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fd fe7a 	bl	800079c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aac:	f7fd fe76 	bl	800079c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e200      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b5d      	ldr	r3, [pc, #372]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0xe4>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fd fe66 	bl	800079c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fd fe62 	bl	800079c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1ec      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x10c>
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d063      	beq.n	8002bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b02:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b0e:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d11c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x18c>
 8002b1a:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d116      	bne.n	8002b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_RCC_OscConfig+0x176>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e1c0      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3e:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4939      	ldr	r1, [pc, #228]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b52:	e03a      	b.n	8002bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d020      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5c:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fd fe1b 	bl	800079c <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7fd fe17 	bl	800079c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e1a1      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4927      	ldr	r1, [pc, #156]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
 8002b9c:	e015      	b.n	8002bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fd fdfa 	bl	800079c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bac:	f7fd fdf6 	bl	800079c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e180      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d03a      	beq.n	8002c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d019      	beq.n	8002c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7fd fdda 	bl	800079c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7fd fdd6 	bl	800079c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e160      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f000 fac4 	bl	8003198 <RCC_Delay>
 8002c10:	e01c      	b.n	8002c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c18:	f7fd fdc0 	bl	800079c <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1e:	e00f      	b.n	8002c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c20:	f7fd fdbc 	bl	800079c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d908      	bls.n	8002c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e146      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	42420000 	.word	0x42420000
 8002c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	4b92      	ldr	r3, [pc, #584]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e9      	bne.n	8002c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a6 	beq.w	8002da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b8b      	ldr	r3, [pc, #556]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10d      	bne.n	8002c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b88      	ldr	r3, [pc, #544]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4a87      	ldr	r2, [pc, #540]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	61d3      	str	r3, [r2, #28]
 8002c76:	4b85      	ldr	r3, [pc, #532]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b82      	ldr	r3, [pc, #520]	; (8002e90 <HAL_RCC_OscConfig+0x4c8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <HAL_RCC_OscConfig+0x4c8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7e      	ldr	r2, [pc, #504]	; (8002e90 <HAL_RCC_OscConfig+0x4c8>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fd fd7d 	bl	800079c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fd fd79 	bl	800079c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e103      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b75      	ldr	r3, [pc, #468]	; (8002e90 <HAL_RCC_OscConfig+0x4c8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d106      	bne.n	8002cda <HAL_RCC_OscConfig+0x312>
 8002ccc:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a6e      	ldr	r2, [pc, #440]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	e02d      	b.n	8002d36 <HAL_RCC_OscConfig+0x36e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x334>
 8002ce2:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a69      	ldr	r2, [pc, #420]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6213      	str	r3, [r2, #32]
 8002cee:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a66      	ldr	r2, [pc, #408]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	e01c      	b.n	8002d36 <HAL_RCC_OscConfig+0x36e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0x356>
 8002d04:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4a60      	ldr	r2, [pc, #384]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	6213      	str	r3, [r2, #32]
 8002d10:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4a5d      	ldr	r2, [pc, #372]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6213      	str	r3, [r2, #32]
 8002d1c:	e00b      	b.n	8002d36 <HAL_RCC_OscConfig+0x36e>
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4a5a      	ldr	r2, [pc, #360]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	6213      	str	r3, [r2, #32]
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a57      	ldr	r2, [pc, #348]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f023 0304 	bic.w	r3, r3, #4
 8002d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d015      	beq.n	8002d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fd fd2d 	bl	800079c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fd fd29 	bl	800079c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0b1      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ee      	beq.n	8002d46 <HAL_RCC_OscConfig+0x37e>
 8002d68:	e014      	b.n	8002d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6a:	f7fd fd17 	bl	800079c <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fd fd13 	bl	800079c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e09b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d88:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ee      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9a:	4b3c      	ldr	r3, [pc, #240]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4a3b      	ldr	r2, [pc, #236]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8087 	beq.w	8002ebe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db0:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d061      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d146      	bne.n	8002e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc4:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fd fce7 	bl	800079c <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fd fce3 	bl	800079c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e06d      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de4:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df8:	d108      	bne.n	8002e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4921      	ldr	r1, [pc, #132]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a19      	ldr	r1, [r3, #32]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	491b      	ldr	r1, [pc, #108]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fd fcb7 	bl	800079c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fd fcb3 	bl	800079c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e03d      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x46a>
 8002e50:	e035      	b.n	8002ebe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fd fca0 	bl	800079c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fd fc9c 	bl	800079c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e026      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x498>
 8002e7e:	e01e      	b.n	8002ebe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e019      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40007000 	.word	0x40007000
 8002e94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_OscConfig+0x500>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000

08002ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0d0      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d910      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b67      	ldr	r3, [pc, #412]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 0207 	bic.w	r2, r3, #7
 8002ef6:	4965      	ldr	r1, [pc, #404]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0b8      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f28:	4b59      	ldr	r3, [pc, #356]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b50      	ldr	r3, [pc, #320]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	494d      	ldr	r1, [pc, #308]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d040      	beq.n	8002fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d115      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e07f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e073      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06b      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002faa:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4936      	ldr	r1, [pc, #216]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fbc:	f7fd fbee 	bl	800079c <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fd fbea 	bl	800079c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e053      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 020c 	and.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1eb      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d210      	bcs.n	800301c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 0207 	bic.w	r2, r3, #7
 8003002:	4922      	ldr	r1, [pc, #136]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e032      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4916      	ldr	r1, [pc, #88]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	490e      	ldr	r1, [pc, #56]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800305a:	f000 f821 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 800305e:	4602      	mov	r2, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	490a      	ldr	r1, [pc, #40]	; (8003094 <HAL_RCC_ClockConfig+0x1c8>)
 800306c:	5ccb      	ldrb	r3, [r1, r3]
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1cc>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1d0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fb4c 	bl	8000718 <HAL_InitTick>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40022000 	.word	0x40022000
 8003090:	40021000 	.word	0x40021000
 8003094:	08007ff8 	.word	0x08007ff8
 8003098:	20000050 	.word	0x20000050
 800309c:	20000054 	.word	0x20000054

080030a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a0:	b490      	push	{r4, r7}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_RCC_GetSysClockFreq+0xac>)
 80030a8:	1d3c      	adds	r4, r7, #4
 80030aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030b0:	f240 2301 	movw	r3, #513	; 0x201
 80030b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ca:	4b21      	ldr	r3, [pc, #132]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d002      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x40>
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0x46>
 80030de:	e02b      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030e2:	623b      	str	r3, [r7, #32]
      break;
 80030e4:	e02b      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	0c9b      	lsrs	r3, r3, #18
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3328      	adds	r3, #40	; 0x28
 80030f0:	443b      	add	r3, r7
 80030f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d012      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0c5b      	lsrs	r3, r3, #17
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	3328      	adds	r3, #40	; 0x28
 800310e:	443b      	add	r3, r7
 8003110:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003114:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb4>)
 800311a:	fb03 f202 	mul.w	r2, r3, r2
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
 8003126:	e004      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	4a0b      	ldr	r2, [pc, #44]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312c:	fb02 f303 	mul.w	r3, r2, r3
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	623b      	str	r3, [r7, #32]
      break;
 8003136:	e002      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb4>)
 800313a:	623b      	str	r3, [r7, #32]
      break;
 800313c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313e:	6a3b      	ldr	r3, [r7, #32]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3728      	adds	r7, #40	; 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bc90      	pop	{r4, r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	08007f8c 	.word	0x08007f8c
 8003150:	40021000 	.word	0x40021000
 8003154:	007a1200 	.word	0x007a1200
 8003158:	003d0900 	.word	0x003d0900

0800315c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b02      	ldr	r3, [pc, #8]	; (800316c <HAL_RCC_GetHCLKFreq+0x10>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	20000050 	.word	0x20000050

08003170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003174:	f7ff fff2 	bl	800315c <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	08008008 	.word	0x08008008

08003198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <RCC_Delay+0x34>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <RCC_Delay+0x38>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	0a5b      	lsrs	r3, r3, #9
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031b4:	bf00      	nop
  }
  while (Delay --);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1e5a      	subs	r2, r3, #1
 80031ba:	60fa      	str	r2, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f9      	bne.n	80031b4 <RCC_Delay+0x1c>
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	20000050 	.word	0x20000050
 80031d0:	10624dd3 	.word	0x10624dd3

080031d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d07d      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031f0:	2300      	movs	r3, #0
 80031f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f4:	4b4f      	ldr	r3, [pc, #316]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10d      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320a:	61d3      	str	r3, [r2, #28]
 800320c:	4b49      	ldr	r3, [pc, #292]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	4b46      	ldr	r3, [pc, #280]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d118      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003228:	4b43      	ldr	r3, [pc, #268]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a42      	ldr	r2, [pc, #264]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003234:	f7fd fab2 	bl	800079c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323a:	e008      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323c:	f7fd faae 	bl	800079c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e06d      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324e:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800325a:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d02e      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	429a      	cmp	r2, r3
 8003276:	d027      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003278:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003280:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003282:	4b2e      	ldr	r3, [pc, #184]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800328e:	4a29      	ldr	r2, [pc, #164]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d014      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fd fa7d 	bl	800079c <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fd fa79 	bl	800079c <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e036      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ee      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4917      	ldr	r1, [pc, #92]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	4a13      	ldr	r2, [pc, #76]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	490b      	ldr	r1, [pc, #44]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	4904      	ldr	r1, [pc, #16]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	40007000 	.word	0x40007000
 800333c:	42420440 	.word	0x42420440

08003340 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003340:	b084      	sub	sp, #16
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	f107 0014 	add.w	r0, r7, #20
 800334e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	b004      	add	sp, #16
 800335e:	4770      	bx	lr

08003360 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003370:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003374:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003394:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003398:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	4013      	ands	r3, r2
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80033d8:	b084      	sub	sp, #16
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	f107 0014 	add.w	r0, r7, #20
 80033e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	b004      	add	sp, #16
 8003416:	4770      	bx	lr

08003418 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003418:	b480      	push	{r7}
 800341a:	b09b      	sub	sp, #108	; 0x6c
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	78db      	ldrb	r3, [r3, #3]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d81f      	bhi.n	800348a <USB_ActivateEndpoint+0x72>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <USB_ActivateEndpoint+0x38>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003461 	.word	0x08003461
 8003454:	0800347d 	.word	0x0800347d
 8003458:	08003493 	.word	0x08003493
 800345c:	0800346f 	.word	0x0800346f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003460:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003468:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800346c:	e012      	b.n	8003494 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800346e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003472:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003476:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800347a:	e00b      	b.n	8003494 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800347c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003484:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003488:	e004      	b.n	8003494 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003490:	e000      	b.n	8003494 <USB_ActivateEndpoint+0x7c>
      break;
 8003492:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	441a      	add	r2, r3
 800349e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80034a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80034e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	7b1b      	ldrb	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 8149 	bne.w	8003798 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8084 	beq.w	8003618 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800351a:	b29b      	uxth	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	4413      	add	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	011a      	lsls	r2, r3, #4
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	88db      	ldrh	r3, [r3, #6]
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	b29b      	uxth	r3, r3
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	81fb      	strh	r3, [r7, #14]
 8003552:	89fb      	ldrh	r3, [r7, #14]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <USB_ActivateEndpoint+0x17c>
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	81bb      	strh	r3, [r7, #12]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	441a      	add	r2, r3
 800357e:	89bb      	ldrh	r3, [r7, #12]
 8003580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003590:	b29b      	uxth	r3, r3
 8003592:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	78db      	ldrb	r3, [r3, #3]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d020      	beq.n	80035de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b2:	813b      	strh	r3, [r7, #8]
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	f083 0320 	eor.w	r3, r3, #32
 80035ba:	813b      	strh	r3, [r7, #8]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	893b      	ldrh	r3, [r7, #8]
 80035c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d8:	b29b      	uxth	r3, r3
 80035da:	8013      	strh	r3, [r2, #0]
 80035dc:	e27f      	b.n	8003ade <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f4:	817b      	strh	r3, [r7, #10]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	441a      	add	r2, r3
 8003600:	897b      	ldrh	r3, [r7, #10]
 8003602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800360a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800360e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003612:	b29b      	uxth	r3, r3
 8003614:	8013      	strh	r3, [r2, #0]
 8003616:	e262      	b.n	8003ade <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003622:	b29b      	uxth	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	4413      	add	r3, r2
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	011a      	lsls	r2, r3, #4
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	4413      	add	r3, r2
 8003636:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	88db      	ldrh	r3, [r3, #6]
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	b29b      	uxth	r3, r3
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003656:	b29b      	uxth	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	4413      	add	r3, r2
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	011a      	lsls	r2, r3, #4
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	4413      	add	r3, r2
 800366a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d112      	bne.n	800369e <USB_ActivateEndpoint+0x286>
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003682:	b29a      	uxth	r2, r3
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003696:	b29a      	uxth	r2, r3
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	801a      	strh	r2, [r3, #0]
 800369c:	e02f      	b.n	80036fe <USB_ActivateEndpoint+0x2e6>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b3e      	cmp	r3, #62	; 0x3e
 80036a4:	d813      	bhi.n	80036ce <USB_ActivateEndpoint+0x2b6>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	663b      	str	r3, [r7, #96]	; 0x60
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <USB_ActivateEndpoint+0x2a8>
 80036ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036bc:	3301      	adds	r3, #1
 80036be:	663b      	str	r3, [r7, #96]	; 0x60
 80036c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	029b      	lsls	r3, r3, #10
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	801a      	strh	r2, [r3, #0]
 80036cc:	e017      	b.n	80036fe <USB_ActivateEndpoint+0x2e6>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	663b      	str	r3, [r7, #96]	; 0x60
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <USB_ActivateEndpoint+0x2d0>
 80036e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e4:	3b01      	subs	r3, #1
 80036e6:	663b      	str	r3, [r7, #96]	; 0x60
 80036e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	029b      	lsls	r3, r3, #10
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	83fb      	strh	r3, [r7, #30]
 800370c:	8bfb      	ldrh	r3, [r7, #30]
 800370e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d01b      	beq.n	800374e <USB_ActivateEndpoint+0x336>
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372c:	83bb      	strh	r3, [r7, #28]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	441a      	add	r2, r3
 8003738:	8bbb      	ldrh	r3, [r7, #28]
 800373a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800373e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374a:	b29b      	uxth	r3, r3
 800374c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003764:	837b      	strh	r3, [r7, #26]
 8003766:	8b7b      	ldrh	r3, [r7, #26]
 8003768:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800376c:	837b      	strh	r3, [r7, #26]
 800376e:	8b7b      	ldrh	r3, [r7, #26]
 8003770:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003774:	837b      	strh	r3, [r7, #26]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	441a      	add	r2, r3
 8003780:	8b7b      	ldrh	r3, [r7, #26]
 8003782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800378a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003792:	b29b      	uxth	r3, r3
 8003794:	8013      	strh	r3, [r2, #0]
 8003796:	e1a2      	b.n	8003ade <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80037c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037c8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80037cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e4:	4413      	add	r3, r2
 80037e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	011a      	lsls	r2, r3, #4
 80037ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037f6:	657b      	str	r3, [r7, #84]	; 0x54
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	891b      	ldrh	r3, [r3, #8]
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003806:	801a      	strh	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	653b      	str	r3, [r7, #80]	; 0x50
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003812:	b29b      	uxth	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003818:	4413      	add	r3, r2
 800381a:	653b      	str	r3, [r7, #80]	; 0x50
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	011a      	lsls	r2, r3, #4
 8003822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003824:	4413      	add	r3, r2
 8003826:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800382a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	895b      	ldrh	r3, [r3, #10]
 8003830:	085b      	lsrs	r3, r3, #1
 8003832:	b29b      	uxth	r3, r3
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	785b      	ldrb	r3, [r3, #1]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f040 8091 	bne.w	8003968 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003854:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d01b      	beq.n	8003896 <USB_ActivateEndpoint+0x47e>
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003874:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	441a      	add	r2, r3
 8003880:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800388a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800388e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003892:	b29b      	uxth	r3, r3
 8003894:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	873b      	strh	r3, [r7, #56]	; 0x38
 80038a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01b      	beq.n	80038e6 <USB_ActivateEndpoint+0x4ce>
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	441a      	add	r2, r3
 80038d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003900:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003904:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003906:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003908:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800390c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	441a      	add	r2, r3
 8003918:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800391a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800391e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392a:	b29b      	uxth	r3, r3
 800392c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003944:	867b      	strh	r3, [r7, #50]	; 0x32
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]
 8003966:	e0ba      	b.n	8003ade <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003978:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800397c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01d      	beq.n	80039c0 <USB_ActivateEndpoint+0x5a8>
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	441a      	add	r2, r3
 80039a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80039ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80039d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01d      	beq.n	8003a18 <USB_ActivateEndpoint+0x600>
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	78db      	ldrb	r3, [r3, #3]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d024      	beq.n	8003a6a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003a3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a3e:	f083 0320 	eor.w	r3, r3, #32
 8003a42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	441a      	add	r2, r3
 8003a50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	8013      	strh	r3, [r2, #0]
 8003a68:	e01d      	b.n	8003aa6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	441a      	add	r2, r3
 8003a8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003ade:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	376c      	adds	r7, #108	; 0x6c
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b08d      	sub	sp, #52	; 0x34
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	7b1b      	ldrb	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 808e 	bne.w	8003c1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d044      	beq.n	8003b92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	81bb      	strh	r3, [r7, #12]
 8003b16:	89bb      	ldrh	r3, [r7, #12]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <USB_DeactivateEndpoint+0x6c>
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b36:	817b      	strh	r3, [r7, #10]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	441a      	add	r2, r3
 8003b42:	897b      	ldrh	r3, [r7, #10]
 8003b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6e:	813b      	strh	r3, [r7, #8]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	441a      	add	r2, r3
 8003b7a:	893b      	ldrh	r3, [r7, #8]
 8003b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	8013      	strh	r3, [r2, #0]
 8003b90:	e192      	b.n	8003eb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	827b      	strh	r3, [r7, #18]
 8003ba0:	8a7b      	ldrh	r3, [r7, #18]
 8003ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d01b      	beq.n	8003be2 <USB_DeactivateEndpoint+0xf6>
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc0:	823b      	strh	r3, [r7, #16]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	441a      	add	r2, r3
 8003bcc:	8a3b      	ldrh	r3, [r7, #16]
 8003bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf8:	81fb      	strh	r3, [r7, #14]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	441a      	add	r2, r3
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	8013      	strh	r3, [r2, #0]
 8003c1a:	e14d      	b.n	8003eb8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	785b      	ldrb	r3, [r3, #1]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 80a5 	bne.w	8003d70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	843b      	strh	r3, [r7, #32]
 8003c34:	8c3b      	ldrh	r3, [r7, #32]
 8003c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01b      	beq.n	8003c76 <USB_DeactivateEndpoint+0x18a>
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c54:	83fb      	strh	r3, [r7, #30]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	441a      	add	r2, r3
 8003c60:	8bfb      	ldrh	r3, [r7, #30]
 8003c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	83bb      	strh	r3, [r7, #28]
 8003c84:	8bbb      	ldrh	r3, [r7, #28]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01b      	beq.n	8003cc6 <USB_DeactivateEndpoint+0x1da>
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca4:	837b      	strh	r3, [r7, #26]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	441a      	add	r2, r3
 8003cb0:	8b7b      	ldrh	r3, [r7, #26]
 8003cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cdc:	833b      	strh	r3, [r7, #24]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	441a      	add	r2, r3
 8003ce8:	8b3b      	ldrh	r3, [r7, #24]
 8003cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d14:	82fb      	strh	r3, [r7, #22]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	441a      	add	r2, r3
 8003d20:	8afb      	ldrh	r3, [r7, #22]
 8003d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d4c:	82bb      	strh	r3, [r7, #20]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	441a      	add	r2, r3
 8003d58:	8abb      	ldrh	r3, [r7, #20]
 8003d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8013      	strh	r3, [r2, #0]
 8003d6e:	e0a3      	b.n	8003eb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003d7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01b      	beq.n	8003dc0 <USB_DeactivateEndpoint+0x2d4>
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003dce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01b      	beq.n	8003e10 <USB_DeactivateEndpoint+0x324>
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	853b      	strh	r3, [r7, #40]	; 0x28
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	441a      	add	r2, r3
 8003e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	441a      	add	r2, r3
 8003ea2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3734      	adds	r7, #52	; 0x34
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b0cc      	sub	sp, #304	; 0x130
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ed2:	6018      	str	r0, [r3, #0]
 8003ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003edc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	785b      	ldrb	r3, [r3, #1]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	f041 817d 	bne.w	80051ea <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d908      	bls.n	8003f1e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003f1c:	e007      	b.n	8003f2e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	7b1b      	ldrb	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d152      	bne.n	8003fe4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6959      	ldr	r1, [r3, #20]
 8003f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	88da      	ldrh	r2, [r3, #6]
 8003f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003f60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003f64:	6800      	ldr	r0, [r0, #0]
 8003f66:	f001 ff23 	bl	8005db0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003f76:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	4619      	mov	r1, r3
 8003f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003f9c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	440a      	add	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	011a      	lsls	r2, r3, #4
 8003fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fb8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fd8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	801a      	strh	r2, [r3, #0]
 8003fe0:	f001 b8b5 	b.w	800514e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	78db      	ldrb	r3, [r3, #3]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	f040 84c6 	bne.w	8004982 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a1a      	ldr	r2, [r3, #32]
 8004002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	429a      	cmp	r2, r3
 8004010:	f240 8443 	bls.w	800489a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800403e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004042:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800404c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800405c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004064:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406c:	b29b      	uxth	r3, r3
 800406e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6a1a      	ldr	r2, [r3, #32]
 800407c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004080:	1ad2      	subs	r2, r2, r3
 8004082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800408e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004092:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800409c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 823e 	beq.w	8004532 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80040c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 809a 	bne.w	8004210 <USB_EPStartXfer+0x34c>
 80040dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80040e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040fe:	b29b      	uxth	r3, r3
 8004100:	4619      	mov	r1, r3
 8004102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800410a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800410e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	440a      	add	r2, r1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	011a      	lsls	r2, r3, #4
 8004126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800412a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4413      	add	r3, r2
 8004132:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800413a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d122      	bne.n	800418e <USB_EPStartXfer+0x2ca>
 8004148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800414c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800415a:	b29a      	uxth	r2, r3
 800415c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004160:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	801a      	strh	r2, [r3, #0]
 8004168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800416c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417e:	b29a      	uxth	r2, r3
 8004180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004184:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	e079      	b.n	8004282 <USB_EPStartXfer+0x3be>
 800418e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004192:	2b3e      	cmp	r3, #62	; 0x3e
 8004194:	d81b      	bhi.n	80041ce <USB_EPStartXfer+0x30a>
 8004196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <USB_EPStartXfer+0x2f2>
 80041ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041b0:	3301      	adds	r3, #1
 80041b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	029b      	lsls	r3, r3, #10
 80041be:	b29a      	uxth	r2, r3
 80041c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	e059      	b.n	8004282 <USB_EPStartXfer+0x3be>
 80041ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d104      	bne.n	80041ee <USB_EPStartXfer+0x32a>
 80041e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041e8:	3b01      	subs	r3, #1
 80041ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	029b      	lsls	r3, r3, #10
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004200:	b29a      	uxth	r2, r3
 8004202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004206:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	801a      	strh	r2, [r3, #0]
 800420e:	e038      	b.n	8004282 <USB_EPStartXfer+0x3be>
 8004210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d130      	bne.n	8004282 <USB_EPStartXfer+0x3be>
 8004220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	4619      	mov	r1, r3
 8004232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004236:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800423a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800423e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	440a      	add	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800424c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	011a      	lsls	r2, r3, #4
 8004256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800425a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4413      	add	r3, r2
 8004262:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800426a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004274:	b29a      	uxth	r2, r3
 8004276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800427a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	895b      	ldrh	r3, [r3, #10]
 800428e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6959      	ldr	r1, [r3, #20]
 800429e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80042a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80042ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80042b0:	6800      	ldr	r0, [r0, #0]
 80042b2:	f001 fd7d 	bl	8005db0 <USB_WritePMA>
            ep->xfer_buff += len;
 80042b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042c6:	441a      	add	r2, r3
 80042c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80042d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a1a      	ldr	r2, [r3, #32]
 80042e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d90f      	bls.n	8004310 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80042f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004300:	1ad2      	subs	r2, r2, r3
 8004302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	621a      	str	r2, [r3, #32]
 800430e:	e00e      	b.n	800432e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800432e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 809a 	bne.w	8004474 <USB_EPStartXfer+0x5b0>
 8004340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004344:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004348:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800434c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004362:	b29b      	uxth	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800436a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800436e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004372:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	440a      	add	r2, r1
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	011a      	lsls	r2, r3, #4
 800438a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800438e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4413      	add	r3, r2
 8004396:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800439a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800439e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d122      	bne.n	80043f2 <USB_EPStartXfer+0x52e>
 80043ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043be:	b29a      	uxth	r2, r3
 80043c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	e083      	b.n	80044fa <USB_EPStartXfer+0x636>
 80043f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043f6:	2b3e      	cmp	r3, #62	; 0x3e
 80043f8:	d81b      	bhi.n	8004432 <USB_EPStartXfer+0x56e>
 80043fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <USB_EPStartXfer+0x556>
 8004410:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004414:	3301      	adds	r3, #1
 8004416:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800441a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800441e:	b29b      	uxth	r3, r3
 8004420:	029b      	lsls	r3, r3, #10
 8004422:	b29a      	uxth	r2, r3
 8004424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004428:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	801a      	strh	r2, [r3, #0]
 8004430:	e063      	b.n	80044fa <USB_EPStartXfer+0x636>
 8004432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800443c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <USB_EPStartXfer+0x58e>
 8004448:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800444c:	3b01      	subs	r3, #1
 800444e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004452:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004456:	b29b      	uxth	r3, r3
 8004458:	029b      	lsls	r3, r3, #10
 800445a:	b29b      	uxth	r3, r3
 800445c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004464:	b29a      	uxth	r2, r3
 8004466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	e042      	b.n	80044fa <USB_EPStartXfer+0x636>
 8004474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	785b      	ldrb	r3, [r3, #1]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d13a      	bne.n	80044fa <USB_EPStartXfer+0x636>
 8004484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004488:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800448c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004490:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800449c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4619      	mov	r1, r3
 80044aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80044b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80044b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	440a      	add	r2, r1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	011a      	lsls	r2, r3, #4
 80044ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4413      	add	r3, r2
 80044da:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80044de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80044fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	891b      	ldrh	r3, [r3, #8]
 8004506:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800450a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800450e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6959      	ldr	r1, [r3, #20]
 8004516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800451a:	b29b      	uxth	r3, r3
 800451c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004520:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004524:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004528:	6800      	ldr	r0, [r0, #0]
 800452a:	f001 fc41 	bl	8005db0 <USB_WritePMA>
 800452e:	f000 be0e 	b.w	800514e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	785b      	ldrb	r3, [r3, #1]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d16d      	bne.n	800461e <USB_EPStartXfer+0x75a>
 8004542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004546:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	64bb      	str	r3, [r7, #72]	; 0x48
 800454e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004552:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800455c:	b29b      	uxth	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004562:	4413      	add	r3, r2
 8004564:	64bb      	str	r3, [r7, #72]	; 0x48
 8004566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	011a      	lsls	r2, r3, #4
 8004574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004576:	4413      	add	r3, r2
 8004578:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800457c:	647b      	str	r3, [r7, #68]	; 0x44
 800457e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d112      	bne.n	80045ac <USB_EPStartXfer+0x6e8>
 8004586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004590:	b29a      	uxth	r2, r3
 8004592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004594:	801a      	strh	r2, [r3, #0]
 8004596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a8:	801a      	strh	r2, [r3, #0]
 80045aa:	e063      	b.n	8004674 <USB_EPStartXfer+0x7b0>
 80045ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045b0:	2b3e      	cmp	r3, #62	; 0x3e
 80045b2:	d817      	bhi.n	80045e4 <USB_EPStartXfer+0x720>
 80045b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80045be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <USB_EPStartXfer+0x710>
 80045ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045ce:	3301      	adds	r3, #1
 80045d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80045d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045d8:	b29b      	uxth	r3, r3
 80045da:	029b      	lsls	r3, r3, #10
 80045dc:	b29a      	uxth	r2, r3
 80045de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e0:	801a      	strh	r2, [r3, #0]
 80045e2:	e047      	b.n	8004674 <USB_EPStartXfer+0x7b0>
 80045e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80045ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <USB_EPStartXfer+0x740>
 80045fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045fe:	3b01      	subs	r3, #1
 8004600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004608:	b29b      	uxth	r3, r3
 800460a:	029b      	lsls	r3, r3, #10
 800460c:	b29b      	uxth	r3, r3
 800460e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004616:	b29a      	uxth	r2, r3
 8004618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	e02a      	b.n	8004674 <USB_EPStartXfer+0x7b0>
 800461e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d122      	bne.n	8004674 <USB_EPStartXfer+0x7b0>
 800462e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	653b      	str	r3, [r7, #80]	; 0x50
 800463a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800463e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004648:	b29b      	uxth	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464e:	4413      	add	r3, r2
 8004650:	653b      	str	r3, [r7, #80]	; 0x50
 8004652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	011a      	lsls	r2, r3, #4
 8004660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004662:	4413      	add	r3, r2
 8004664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800466a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800466e:	b29a      	uxth	r2, r3
 8004670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	891b      	ldrh	r3, [r3, #8]
 8004680:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6959      	ldr	r1, [r3, #20]
 8004690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004694:	b29b      	uxth	r3, r3
 8004696:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800469a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800469e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80046a2:	6800      	ldr	r0, [r0, #0]
 80046a4:	f001 fb84 	bl	8005db0 <USB_WritePMA>
            ep->xfer_buff += len;
 80046a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695a      	ldr	r2, [r3, #20]
 80046b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046b8:	441a      	add	r2, r3
 80046ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d90f      	bls.n	8004702 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80046e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	621a      	str	r2, [r3, #32]
 8004700:	e00e      	b.n	8004720 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2200      	movs	r2, #0
 800471e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	643b      	str	r3, [r7, #64]	; 0x40
 800472c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d16d      	bne.n	8004818 <USB_EPStartXfer+0x954>
 800473c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004740:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
 8004748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	4413      	add	r3, r2
 800475e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	011a      	lsls	r2, r3, #4
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	4413      	add	r3, r2
 8004772:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004776:	637b      	str	r3, [r7, #52]	; 0x34
 8004778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d112      	bne.n	80047a6 <USB_EPStartXfer+0x8e2>
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800478a:	b29a      	uxth	r2, r3
 800478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800479a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800479e:	b29a      	uxth	r2, r3
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	e05d      	b.n	8004862 <USB_EPStartXfer+0x99e>
 80047a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047aa:	2b3e      	cmp	r3, #62	; 0x3e
 80047ac:	d817      	bhi.n	80047de <USB_EPStartXfer+0x91a>
 80047ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80047b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <USB_EPStartXfer+0x90a>
 80047c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047c8:	3301      	adds	r3, #1
 80047ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80047ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	029b      	lsls	r3, r3, #10
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	801a      	strh	r2, [r3, #0]
 80047dc:	e041      	b.n	8004862 <USB_EPStartXfer+0x99e>
 80047de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80047e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d104      	bne.n	80047fe <USB_EPStartXfer+0x93a>
 80047f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047f8:	3b01      	subs	r3, #1
 80047fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80047fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004802:	b29b      	uxth	r3, r3
 8004804:	029b      	lsls	r3, r3, #10
 8004806:	b29b      	uxth	r3, r3
 8004808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004810:	b29a      	uxth	r2, r3
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	e024      	b.n	8004862 <USB_EPStartXfer+0x99e>
 8004818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d11c      	bne.n	8004862 <USB_EPStartXfer+0x99e>
 8004828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800482c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004836:	b29b      	uxth	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483c:	4413      	add	r3, r2
 800483e:	643b      	str	r3, [r7, #64]	; 0x40
 8004840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	011a      	lsls	r2, r3, #4
 800484e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004850:	4413      	add	r3, r2
 8004852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800485c:	b29a      	uxth	r2, r3
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	895b      	ldrh	r3, [r3, #10]
 800486e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6959      	ldr	r1, [r3, #20]
 800487e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004882:	b29b      	uxth	r3, r3
 8004884:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004888:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800488c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004890:	6800      	ldr	r0, [r0, #0]
 8004892:	f001 fa8d 	bl	8005db0 <USB_WritePMA>
 8004896:	f000 bc5a 	b.w	800514e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800489a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800489e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80048aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80048d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	441a      	add	r2, r3
 80048ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80048f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004902:	b29b      	uxth	r3, r3
 8004904:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800490a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004926:	4413      	add	r3, r2
 8004928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800492a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800492e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	011a      	lsls	r2, r3, #4
 8004938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800493a:	4413      	add	r3, r2
 800493c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004940:	65bb      	str	r3, [r7, #88]	; 0x58
 8004942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004946:	b29a      	uxth	r2, r3
 8004948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800494a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800494c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	891b      	ldrh	r3, [r3, #8]
 8004958:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800495c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6959      	ldr	r1, [r3, #20]
 8004968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800496c:	b29b      	uxth	r3, r3
 800496e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004972:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004976:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	f001 fa18 	bl	8005db0 <USB_WritePMA>
 8004980:	e3e5      	b.n	800514e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80049ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80049ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049da:	b29b      	uxth	r3, r3
 80049dc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80049de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6a1a      	ldr	r2, [r3, #32]
 80049ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ee:	1ad2      	subs	r2, r2, r3
 80049f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80049fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 81bc 	beq.w	8004d9c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d16d      	bne.n	8004b1e <USB_EPStartXfer+0xc5a>
 8004a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a62:	4413      	add	r3, r2
 8004a64:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	011a      	lsls	r2, r3, #4
 8004a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a76:	4413      	add	r3, r2
 8004a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a7c:	677b      	str	r3, [r7, #116]	; 0x74
 8004a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d112      	bne.n	8004aac <USB_EPStartXfer+0xbe8>
 8004a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a94:	801a      	strh	r2, [r3, #0]
 8004a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa8:	801a      	strh	r2, [r3, #0]
 8004aaa:	e060      	b.n	8004b6e <USB_EPStartXfer+0xcaa>
 8004aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ab2:	d817      	bhi.n	8004ae4 <USB_EPStartXfer+0xc20>
 8004ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d004      	beq.n	8004ad4 <USB_EPStartXfer+0xc10>
 8004aca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ad4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	029b      	lsls	r3, r3, #10
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae0:	801a      	strh	r2, [r3, #0]
 8004ae2:	e044      	b.n	8004b6e <USB_EPStartXfer+0xcaa>
 8004ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <USB_EPStartXfer+0xc40>
 8004afa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004afe:	3b01      	subs	r3, #1
 8004b00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004b04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	029b      	lsls	r3, r3, #10
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	e027      	b.n	8004b6e <USB_EPStartXfer+0xcaa>
 8004b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d11f      	bne.n	8004b6e <USB_EPStartXfer+0xcaa>
 8004b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b44:	4413      	add	r3, r2
 8004b46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	011a      	lsls	r2, r3, #4
 8004b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	895b      	ldrh	r3, [r3, #10]
 8004b7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6959      	ldr	r1, [r3, #20]
 8004b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b94:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b98:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b9c:	6800      	ldr	r0, [r0, #0]
 8004b9e:	f001 f907 	bl	8005db0 <USB_WritePMA>
          ep->xfer_buff += len;
 8004ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb2:	441a      	add	r2, r3
 8004bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d90f      	bls.n	8004bfc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a1a      	ldr	r2, [r3, #32]
 8004be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bec:	1ad2      	subs	r2, r2, r3
 8004bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	621a      	str	r2, [r3, #32]
 8004bfa:	e00e      	b.n	8004c1a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2200      	movs	r2, #0
 8004c18:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 8295 	beq.w	800514e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	785b      	ldrb	r3, [r3, #1]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d16d      	bne.n	8004d10 <USB_EPStartXfer+0xe4c>
 8004c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c54:	4413      	add	r3, r2
 8004c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	011a      	lsls	r2, r3, #4
 8004c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c68:	4413      	add	r3, r2
 8004c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8004c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d112      	bne.n	8004c9e <USB_EPStartXfer+0xdda>
 8004c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	e063      	b.n	8004d66 <USB_EPStartXfer+0xea2>
 8004c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ca4:	d817      	bhi.n	8004cd6 <USB_EPStartXfer+0xe12>
 8004ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <USB_EPStartXfer+0xe02>
 8004cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	e047      	b.n	8004d66 <USB_EPStartXfer+0xea2>
 8004cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <USB_EPStartXfer+0xe32>
 8004cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d0c:	801a      	strh	r2, [r3, #0]
 8004d0e:	e02a      	b.n	8004d66 <USB_EPStartXfer+0xea2>
 8004d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d122      	bne.n	8004d66 <USB_EPStartXfer+0xea2>
 8004d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d40:	4413      	add	r3, r2
 8004d42:	673b      	str	r3, [r7, #112]	; 0x70
 8004d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	011a      	lsls	r2, r3, #4
 8004d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d54:	4413      	add	r3, r2
 8004d56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	891b      	ldrh	r3, [r3, #8]
 8004d72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6959      	ldr	r1, [r3, #20]
 8004d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d94:	6800      	ldr	r0, [r0, #0]
 8004d96:	f001 f80b 	bl	8005db0 <USB_WritePMA>
 8004d9a:	e1d8      	b.n	800514e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d178      	bne.n	8004e9e <USB_EPStartXfer+0xfda>
 8004dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	011a      	lsls	r2, r3, #4
 8004de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004de8:	4413      	add	r3, r2
 8004dea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d116      	bne.n	8004e28 <USB_EPStartXfer+0xf64>
 8004dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	e06b      	b.n	8004f00 <USB_EPStartXfer+0x103c>
 8004e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e2c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e2e:	d818      	bhi.n	8004e62 <USB_EPStartXfer+0xf9e>
 8004e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e34:	085b      	lsrs	r3, r3, #1
 8004e36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d004      	beq.n	8004e50 <USB_EPStartXfer+0xf8c>
 8004e46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004e50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	029b      	lsls	r3, r3, #10
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	e04e      	b.n	8004f00 <USB_EPStartXfer+0x103c>
 8004e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d104      	bne.n	8004e82 <USB_EPStartXfer+0xfbe>
 8004e78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004e82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	029b      	lsls	r3, r3, #10
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	e030      	b.n	8004f00 <USB_EPStartXfer+0x103c>
 8004e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d128      	bne.n	8004f00 <USB_EPStartXfer+0x103c>
 8004eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	011a      	lsls	r2, r3, #4
 8004ee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004eea:	4413      	add	r3, r2
 8004eec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004efe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	891b      	ldrh	r3, [r3, #8]
 8004f0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6959      	ldr	r1, [r3, #20]
 8004f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f26:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f2a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f2e:	6800      	ldr	r0, [r0, #0]
 8004f30:	f000 ff3e 	bl	8005db0 <USB_WritePMA>
          ep->xfer_buff += len;
 8004f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f44:	441a      	add	r2, r3
 8004f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a1a      	ldr	r2, [r3, #32]
 8004f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d90f      	bls.n	8004f8e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8004f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a1a      	ldr	r2, [r3, #32]
 8004f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	621a      	str	r2, [r3, #32]
 8004f8c:	e00e      	b.n	8004fac <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80cc 	beq.w	800514e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d178      	bne.n	80050c6 <USB_EPStartXfer+0x1202>
 8004fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	011a      	lsls	r2, r3, #4
 800500c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005010:	4413      	add	r3, r2
 8005012:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800501a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d116      	bne.n	8005050 <USB_EPStartXfer+0x118c>
 8005022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800502e:	b29a      	uxth	r2, r3
 8005030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005034:	801a      	strh	r2, [r3, #0]
 8005036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005046:	b29a      	uxth	r2, r3
 8005048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	e064      	b.n	800511a <USB_EPStartXfer+0x1256>
 8005050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005054:	2b3e      	cmp	r3, #62	; 0x3e
 8005056:	d818      	bhi.n	800508a <USB_EPStartXfer+0x11c6>
 8005058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <USB_EPStartXfer+0x11b4>
 800506e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005072:	3301      	adds	r3, #1
 8005074:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800507c:	b29b      	uxth	r3, r3
 800507e:	029b      	lsls	r3, r3, #10
 8005080:	b29a      	uxth	r2, r3
 8005082:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	e047      	b.n	800511a <USB_EPStartXfer+0x1256>
 800508a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005098:	f003 031f 	and.w	r3, r3, #31
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <USB_EPStartXfer+0x11e6>
 80050a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a4:	3b01      	subs	r3, #1
 80050a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80050aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	029b      	lsls	r3, r3, #10
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050bc:	b29a      	uxth	r2, r3
 80050be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	e029      	b.n	800511a <USB_EPStartXfer+0x1256>
 80050c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d121      	bne.n	800511a <USB_EPStartXfer+0x1256>
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050ec:	4413      	add	r3, r2
 80050ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	011a      	lsls	r2, r3, #4
 8005100:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005104:	4413      	add	r3, r2
 8005106:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800510a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800510e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005112:	b29a      	uxth	r2, r3
 8005114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005118:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800511a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	895b      	ldrh	r3, [r3, #10]
 8005126:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800512a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6959      	ldr	r1, [r3, #20]
 8005136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800513a:	b29b      	uxth	r3, r3
 800513c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005140:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005144:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005148:	6800      	ldr	r0, [r0, #0]
 800514a:	f000 fe31 	bl	8005db0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800514e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005170:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517c:	8013      	strh	r3, [r2, #0]
 800517e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005182:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005186:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800518a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800518e:	8812      	ldrh	r2, [r2, #0]
 8005190:	f082 0210 	eor.w	r2, r2, #16
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800519e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051a2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80051a6:	8812      	ldrh	r2, [r2, #0]
 80051a8:	f082 0220 	eor.w	r2, r2, #32
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	441a      	add	r2, r3
 80051c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051cc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	8013      	strh	r3, [r2, #0]
 80051e6:	f000 bc9f 	b.w	8005b28 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80051ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	7b1b      	ldrb	r3, [r3, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 80ae 	bne.w	8005358 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80051fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	429a      	cmp	r2, r3
 8005216:	d917      	bls.n	8005248 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699a      	ldr	r2, [r3, #24]
 8005234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005238:	1ad2      	subs	r2, r2, r3
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	619a      	str	r2, [r3, #24]
 8005246:	e00e      	b.n	8005266 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005282:	b29b      	uxth	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800528a:	4413      	add	r3, r2
 800528c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	011a      	lsls	r2, r3, #4
 800529e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052a2:	4413      	add	r3, r2
 80052a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d116      	bne.n	80052e2 <USB_EPStartXfer+0x141e>
 80052b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d8:	b29a      	uxth	r2, r3
 80052da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052de:	801a      	strh	r2, [r3, #0]
 80052e0:	e3e8      	b.n	8005ab4 <USB_EPStartXfer+0x1bf0>
 80052e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e6:	2b3e      	cmp	r3, #62	; 0x3e
 80052e8:	d818      	bhi.n	800531c <USB_EPStartXfer+0x1458>
 80052ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80052f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <USB_EPStartXfer+0x1446>
 8005300:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005304:	3301      	adds	r3, #1
 8005306:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800530a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800530e:	b29b      	uxth	r3, r3
 8005310:	029b      	lsls	r3, r3, #10
 8005312:	b29a      	uxth	r2, r3
 8005314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	e3cb      	b.n	8005ab4 <USB_EPStartXfer+0x1bf0>
 800531c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <USB_EPStartXfer+0x1478>
 8005332:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005336:	3b01      	subs	r3, #1
 8005338:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800533c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005340:	b29b      	uxth	r3, r3
 8005342:	029b      	lsls	r3, r3, #10
 8005344:	b29b      	uxth	r3, r3
 8005346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534e:	b29a      	uxth	r2, r3
 8005350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	e3ad      	b.n	8005ab4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	78db      	ldrb	r3, [r3, #3]
 8005364:	2b02      	cmp	r3, #2
 8005366:	f040 8200 	bne.w	800576a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 8091 	bne.w	800549e <USB_EPStartXfer+0x15da>
 800537c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005380:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800538a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005398:	b29b      	uxth	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053a0:	4413      	add	r3, r2
 80053a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	011a      	lsls	r2, r3, #4
 80053b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053b8:	4413      	add	r3, r2
 80053ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d116      	bne.n	8005400 <USB_EPStartXfer+0x153c>
 80053d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053de:	b29a      	uxth	r2, r3
 80053e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	e083      	b.n	8005508 <USB_EPStartXfer+0x1644>
 8005400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b3e      	cmp	r3, #62	; 0x3e
 800540e:	d820      	bhi.n	8005452 <USB_EPStartXfer+0x158e>
 8005410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d004      	beq.n	8005440 <USB_EPStartXfer+0x157c>
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543a:	3301      	adds	r3, #1
 800543c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005444:	b29b      	uxth	r3, r3
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	b29a      	uxth	r2, r3
 800544a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	e05a      	b.n	8005508 <USB_EPStartXfer+0x1644>
 8005452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	2b00      	cmp	r3, #0
 8005476:	d104      	bne.n	8005482 <USB_EPStartXfer+0x15be>
 8005478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800547c:	3b01      	subs	r3, #1
 800547e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005486:	b29b      	uxth	r3, r3
 8005488:	029b      	lsls	r3, r3, #10
 800548a:	b29b      	uxth	r3, r3
 800548c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005494:	b29a      	uxth	r2, r3
 8005496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	e034      	b.n	8005508 <USB_EPStartXfer+0x1644>
 800549e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d12c      	bne.n	8005508 <USB_EPStartXfer+0x1644>
 80054ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054d2:	4413      	add	r3, r2
 80054d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	011a      	lsls	r2, r3, #4
 80054e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ea:	4413      	add	r3, r2
 80054ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	b29a      	uxth	r2, r3
 8005502:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 8091 	bne.w	800564a <USB_EPStartXfer+0x1786>
 8005528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005544:	b29b      	uxth	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800554c:	4413      	add	r3, r2
 800554e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	011a      	lsls	r2, r3, #4
 8005560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005564:	4413      	add	r3, r2
 8005566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800556a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800556e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d116      	bne.n	80055ac <USB_EPStartXfer+0x16e8>
 800557e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800558a:	b29a      	uxth	r2, r3
 800558c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055a8:	801a      	strh	r2, [r3, #0]
 80055aa:	e07c      	b.n	80056a6 <USB_EPStartXfer+0x17e2>
 80055ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b3e      	cmp	r3, #62	; 0x3e
 80055ba:	d820      	bhi.n	80055fe <USB_EPStartXfer+0x173a>
 80055bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	085b      	lsrs	r3, r3, #1
 80055ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <USB_EPStartXfer+0x1728>
 80055e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055e6:	3301      	adds	r3, #1
 80055e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	029b      	lsls	r3, r3, #10
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	e053      	b.n	80056a6 <USB_EPStartXfer+0x17e2>
 80055fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <USB_EPStartXfer+0x176a>
 8005624:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005628:	3b01      	subs	r3, #1
 800562a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800562e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005632:	b29b      	uxth	r3, r3
 8005634:	029b      	lsls	r3, r3, #10
 8005636:	b29b      	uxth	r3, r3
 8005638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005640:	b29a      	uxth	r2, r3
 8005642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	e02d      	b.n	80056a6 <USB_EPStartXfer+0x17e2>
 800564a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d125      	bne.n	80056a6 <USB_EPStartXfer+0x17e2>
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005668:	b29b      	uxth	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005670:	4413      	add	r3, r2
 8005672:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	011a      	lsls	r2, r3, #4
 8005684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005688:	4413      	add	r3, r2
 800568a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800568e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	b29a      	uxth	r2, r3
 80056a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056a4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80056a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 81fe 	beq.w	8005ab4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80056b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80056dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <USB_EPStartXfer+0x182c>
 80056e4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056f0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80056f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 81db 	bne.w	8005ab4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 81d4 	bne.w	8005ab4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800570c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29b      	uxth	r3, r3
 800572a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005764:	b29b      	uxth	r3, r3
 8005766:	8013      	strh	r3, [r2, #0]
 8005768:	e1a4      	b.n	8005ab4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800576a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	78db      	ldrb	r3, [r3, #3]
 8005776:	2b01      	cmp	r3, #1
 8005778:	f040 819a 	bne.w	8005ab0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800577c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	429a      	cmp	r2, r3
 8005796:	d917      	bls.n	80057c8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80057a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b8:	1ad2      	subs	r2, r2, r3
 80057ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	619a      	str	r2, [r3, #24]
 80057c6:	e00e      	b.n	80057e6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80057c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80057d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80057e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d178      	bne.n	80058e8 <USB_EPStartXfer+0x1a24>
 80057f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005812:	b29b      	uxth	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800581a:	4413      	add	r3, r2
 800581c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	011a      	lsls	r2, r3, #4
 800582e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005832:	4413      	add	r3, r2
 8005834:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005838:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800583c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d116      	bne.n	8005872 <USB_EPStartXfer+0x19ae>
 8005844:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005850:	b29a      	uxth	r2, r3
 8005852:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005868:	b29a      	uxth	r2, r3
 800586a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	e06b      	b.n	800594a <USB_EPStartXfer+0x1a86>
 8005872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005876:	2b3e      	cmp	r3, #62	; 0x3e
 8005878:	d818      	bhi.n	80058ac <USB_EPStartXfer+0x19e8>
 800587a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <USB_EPStartXfer+0x19d6>
 8005890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005894:	3301      	adds	r3, #1
 8005896:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800589a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800589e:	b29b      	uxth	r3, r3
 80058a0:	029b      	lsls	r3, r3, #10
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	e04e      	b.n	800594a <USB_EPStartXfer+0x1a86>
 80058ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <USB_EPStartXfer+0x1a08>
 80058c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058c6:	3b01      	subs	r3, #1
 80058c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	029b      	lsls	r3, r3, #10
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	e030      	b.n	800594a <USB_EPStartXfer+0x1a86>
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d128      	bne.n	800594a <USB_EPStartXfer+0x1a86>
 80058f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005914:	b29b      	uxth	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591c:	4413      	add	r3, r2
 800591e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	011a      	lsls	r2, r3, #4
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	4413      	add	r3, r2
 8005936:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800593a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800593e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005942:	b29a      	uxth	r2, r3
 8005944:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d178      	bne.n	8005a5a <USB_EPStartXfer+0x1b96>
 8005968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005984:	b29b      	uxth	r3, r3
 8005986:	461a      	mov	r2, r3
 8005988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598c:	4413      	add	r3, r2
 800598e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	011a      	lsls	r2, r3, #4
 80059a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a4:	4413      	add	r3, r2
 80059a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d116      	bne.n	80059e4 <USB_EPStartXfer+0x1b20>
 80059b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059da:	b29a      	uxth	r2, r3
 80059dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	e067      	b.n	8005ab4 <USB_EPStartXfer+0x1bf0>
 80059e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e8:	2b3e      	cmp	r3, #62	; 0x3e
 80059ea:	d818      	bhi.n	8005a1e <USB_EPStartXfer+0x1b5a>
 80059ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d004      	beq.n	8005a0c <USB_EPStartXfer+0x1b48>
 8005a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a06:	3301      	adds	r3, #1
 8005a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	029b      	lsls	r3, r3, #10
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e04a      	b.n	8005ab4 <USB_EPStartXfer+0x1bf0>
 8005a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d104      	bne.n	8005a3e <USB_EPStartXfer+0x1b7a>
 8005a34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	029b      	lsls	r3, r3, #10
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a56:	801a      	strh	r2, [r3, #0]
 8005a58:	e02c      	b.n	8005ab4 <USB_EPStartXfer+0x1bf0>
 8005a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	785b      	ldrb	r3, [r3, #1]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d124      	bne.n	8005ab4 <USB_EPStartXfer+0x1bf0>
 8005a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a80:	4413      	add	r3, r2
 8005a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	011a      	lsls	r2, r3, #4
 8005a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a98:	4413      	add	r3, r2
 8005a9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e001      	b.n	8005ab4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e03a      	b.n	8005b2a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ada:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005ade:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ae2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ae6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005aea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005aee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005af2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	441a      	add	r2, r3
 8005b10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d020      	beq.n	8005b88 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5c:	81bb      	strh	r3, [r7, #12]
 8005b5e:	89bb      	ldrh	r3, [r7, #12]
 8005b60:	f083 0310 	eor.w	r3, r3, #16
 8005b64:	81bb      	strh	r3, [r7, #12]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	89bb      	ldrh	r3, [r7, #12]
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]
 8005b86:	e01f      	b.n	8005bc8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	81fb      	strh	r3, [r7, #14]
 8005ba0:	89fb      	ldrh	r3, [r7, #14]
 8005ba2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ba6:	81fb      	strh	r3, [r7, #14]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	89fb      	ldrh	r3, [r7, #14]
 8005bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr

08005bd4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	7b1b      	ldrb	r3, [r3, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f040 809d 	bne.w	8005d22 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d04c      	beq.n	8005c8a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	823b      	strh	r3, [r7, #16]
 8005bfe:	8a3b      	ldrh	r3, [r7, #16]
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <USB_EPClearStall+0x6c>
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	81fb      	strh	r3, [r7, #14]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	441a      	add	r2, r3
 8005c2a:	89fb      	ldrh	r3, [r7, #14]
 8005c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	78db      	ldrb	r3, [r3, #3]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d06c      	beq.n	8005d22 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5e:	81bb      	strh	r3, [r7, #12]
 8005c60:	89bb      	ldrh	r3, [r7, #12]
 8005c62:	f083 0320 	eor.w	r3, r3, #32
 8005c66:	81bb      	strh	r3, [r7, #12]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	441a      	add	r2, r3
 8005c72:	89bb      	ldrh	r3, [r7, #12]
 8005c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	8013      	strh	r3, [r2, #0]
 8005c88:	e04b      	b.n	8005d22 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	82fb      	strh	r3, [r7, #22]
 8005c98:	8afb      	ldrh	r3, [r7, #22]
 8005c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01b      	beq.n	8005cda <USB_EPClearStall+0x106>
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb8:	82bb      	strh	r3, [r7, #20]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	441a      	add	r2, r3
 8005cc4:	8abb      	ldrh	r3, [r7, #20]
 8005cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	827b      	strh	r3, [r7, #18]
 8005cf2:	8a7b      	ldrh	r3, [r7, #18]
 8005cf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cf8:	827b      	strh	r3, [r7, #18]
 8005cfa:	8a7b      	ldrh	r3, [r7, #18]
 8005cfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d00:	827b      	strh	r3, [r7, #18]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	441a      	add	r2, r3
 8005d0c:	8a7b      	ldrh	r3, [r7, #18]
 8005d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	460b      	mov	r3, r1
 8005d38:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2280      	movs	r2, #128	; 0x80
 8005d44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr

08005d54 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr

08005d68 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr

08005d7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr

08005db0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b08d      	sub	sp, #52	; 0x34
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	4611      	mov	r1, r2
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	80fb      	strh	r3, [r7, #6]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005dc6:	88bb      	ldrh	r3, [r7, #4]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	005a      	lsls	r2, r3, #1
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de8:	e01e      	b.n	8005e28 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	3301      	adds	r3, #1
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	3302      	adds	r3, #2
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	3302      	adds	r3, #2
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	3301      	adds	r3, #1
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	3b01      	subs	r3, #1
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1dd      	bne.n	8005dea <USB_WritePMA+0x3a>
  }
}
 8005e2e:	bf00      	nop
 8005e30:	bf00      	nop
 8005e32:	3734      	adds	r7, #52	; 0x34
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b08b      	sub	sp, #44	; 0x2c
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	4611      	mov	r1, r2
 8005e46:	461a      	mov	r2, r3
 8005e48:	460b      	mov	r3, r1
 8005e4a:	80fb      	strh	r3, [r7, #6]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005e50:	88bb      	ldrh	r3, [r7, #4]
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e60:	88fb      	ldrh	r3, [r7, #6]
 8005e62:	005a      	lsls	r2, r3, #1
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
 8005e72:	e01b      	b.n	8005eac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	3302      	adds	r3, #2
 8005e80:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	0a1b      	lsrs	r3, r3, #8
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e0      	bne.n	8005e74 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005eb2:	88bb      	ldrh	r3, [r7, #4]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d007      	beq.n	8005ece <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	701a      	strb	r2, [r3, #0]
  }
}
 8005ece:	bf00      	nop
 8005ed0:	372c      	adds	r7, #44	; 0x2c
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7c1b      	ldrb	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d115      	bne.n	8005f1c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	2181      	movs	r1, #129	; 0x81
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 fe8e 	bl	8007c1a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f08:	2202      	movs	r2, #2
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 fe84 	bl	8007c1a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005f1a:	e012      	b.n	8005f42 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	2202      	movs	r2, #2
 8005f20:	2181      	movs	r1, #129	; 0x81
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 fe79 	bl	8007c1a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f2e:	2340      	movs	r3, #64	; 0x40
 8005f30:	2202      	movs	r2, #2
 8005f32:	2101      	movs	r1, #1
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 fe70 	bl	8007c1a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f42:	2308      	movs	r3, #8
 8005f44:	2203      	movs	r2, #3
 8005f46:	2182      	movs	r1, #130	; 0x82
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 fe66 	bl	8007c1a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f58:	f001 ff86 	bl	8007e68 <USBD_static_malloc>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d102      	bne.n	8005f74 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	73fb      	strb	r3, [r7, #15]
 8005f72:	e026      	b.n	8005fc2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	7c1b      	ldrb	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa8:	2101      	movs	r1, #1
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 ff26 	bl	8007dfc <USBD_LL_PrepareReceive>
 8005fb0:	e007      	b.n	8005fc2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fb8:	2340      	movs	r3, #64	; 0x40
 8005fba:	2101      	movs	r1, #1
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 ff1d 	bl	8007dfc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005fdc:	2181      	movs	r1, #129	; 0x81
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f001 fe41 	bl	8007c66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005fea:	2101      	movs	r1, #1
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 fe3a 	bl	8007c66 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ffa:	2182      	movs	r1, #130	; 0x82
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 fe32 	bl	8007c66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00e      	beq.n	8006030 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006022:	4618      	mov	r0, r3
 8006024:	f001 ff2c 	bl	8007e80 <USBD_static_free>
    pdev->pClassData = NULL;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b086      	sub	sp, #24
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006060:	2b00      	cmp	r3, #0
 8006062:	d039      	beq.n	80060d8 <USBD_CDC_Setup+0x9e>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d17f      	bne.n	8006168 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	88db      	ldrh	r3, [r3, #6]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d029      	beq.n	80060c4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	b25b      	sxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	da11      	bge.n	800609e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006086:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	88d2      	ldrh	r2, [r2, #6]
 800608c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800608e:	6939      	ldr	r1, [r7, #16]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	88db      	ldrh	r3, [r3, #6]
 8006094:	461a      	mov	r2, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 fa09 	bl	80074ae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800609c:	e06b      	b.n	8006176 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	785a      	ldrb	r2, [r3, #1]
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	88db      	ldrh	r3, [r3, #6]
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060b4:	6939      	ldr	r1, [r7, #16]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	88db      	ldrh	r3, [r3, #6]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fa24 	bl	800750a <USBD_CtlPrepareRx>
      break;
 80060c2:	e058      	b.n	8006176 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	7850      	ldrb	r0, [r2, #1]
 80060d0:	2200      	movs	r2, #0
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	4798      	blx	r3
      break;
 80060d6:	e04e      	b.n	8006176 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b0b      	cmp	r3, #11
 80060de:	d02e      	beq.n	800613e <USBD_CDC_Setup+0x104>
 80060e0:	2b0b      	cmp	r3, #11
 80060e2:	dc38      	bgt.n	8006156 <USBD_CDC_Setup+0x11c>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <USBD_CDC_Setup+0xb4>
 80060e8:	2b0a      	cmp	r3, #10
 80060ea:	d014      	beq.n	8006116 <USBD_CDC_Setup+0xdc>
 80060ec:	e033      	b.n	8006156 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d107      	bne.n	8006108 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80060f8:	f107 030c 	add.w	r3, r7, #12
 80060fc:	2202      	movs	r2, #2
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 f9d4 	bl	80074ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006106:	e02e      	b.n	8006166 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 f965 	bl	80073da <USBD_CtlError>
            ret = USBD_FAIL;
 8006110:	2302      	movs	r3, #2
 8006112:	75fb      	strb	r3, [r7, #23]
          break;
 8006114:	e027      	b.n	8006166 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611c:	2b03      	cmp	r3, #3
 800611e:	d107      	bne.n	8006130 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006120:	f107 030f 	add.w	r3, r7, #15
 8006124:	2201      	movs	r2, #1
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f9c0 	bl	80074ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800612e:	e01a      	b.n	8006166 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 f951 	bl	80073da <USBD_CtlError>
            ret = USBD_FAIL;
 8006138:	2302      	movs	r3, #2
 800613a:	75fb      	strb	r3, [r7, #23]
          break;
 800613c:	e013      	b.n	8006166 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006144:	2b03      	cmp	r3, #3
 8006146:	d00d      	beq.n	8006164 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 f945 	bl	80073da <USBD_CtlError>
            ret = USBD_FAIL;
 8006150:	2302      	movs	r3, #2
 8006152:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006154:	e006      	b.n	8006164 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 f93e 	bl	80073da <USBD_CtlError>
          ret = USBD_FAIL;
 800615e:	2302      	movs	r3, #2
 8006160:	75fb      	strb	r3, [r7, #23]
          break;
 8006162:	e000      	b.n	8006166 <USBD_CDC_Setup+0x12c>
          break;
 8006164:	bf00      	nop
      }
      break;
 8006166:	e006      	b.n	8006176 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 f935 	bl	80073da <USBD_CtlError>
      ret = USBD_FAIL;
 8006170:	2302      	movs	r3, #2
 8006172:	75fb      	strb	r3, [r7, #23]
      break;
 8006174:	bf00      	nop
  }

  return ret;
 8006176:	7dfb      	ldrb	r3, [r7, #23]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006192:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800619a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d03a      	beq.n	800621c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061a6:	78fa      	ldrb	r2, [r7, #3]
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	331c      	adds	r3, #28
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d029      	beq.n	8006210 <USBD_CDC_DataIn+0x90>
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	331c      	adds	r3, #28
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	78f9      	ldrb	r1, [r7, #3]
 80061d0:	68b8      	ldr	r0, [r7, #8]
 80061d2:	460b      	mov	r3, r1
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4403      	add	r3, r0
 80061dc:	3338      	adds	r3, #56	; 0x38
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d110      	bne.n	8006210 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80061ee:	78fa      	ldrb	r2, [r7, #3]
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	331c      	adds	r3, #28
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006202:	78f9      	ldrb	r1, [r7, #3]
 8006204:	2300      	movs	r3, #0
 8006206:	2200      	movs	r2, #0
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 fdd4 	bl	8007db6 <USBD_LL_Transmit>
 800620e:	e003      	b.n	8006218 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	e000      	b.n	800621e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800621c:	2302      	movs	r3, #2
  }
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006238:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fdff 	bl	8007e42 <USBD_LL_GetRxDataSize>
 8006244:	4602      	mov	r2, r0
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00d      	beq.n	8006272 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800626a:	4611      	mov	r1, r2
 800626c:	4798      	blx	r3

    return USBD_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e000      	b.n	8006274 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006272:	2302      	movs	r3, #2
  }
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006292:	2b00      	cmp	r3, #0
 8006294:	d015      	beq.n	80062c2 <USBD_CDC_EP0_RxReady+0x46>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800629c:	2bff      	cmp	r3, #255	; 0xff
 800629e:	d010      	beq.n	80062c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80062ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062b6:	b292      	uxth	r2, r2
 80062b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	22ff      	movs	r2, #255	; 0xff
 80062be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2243      	movs	r2, #67	; 0x43
 80062d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80062da:	4b03      	ldr	r3, [pc, #12]	; (80062e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	200000e4 	.word	0x200000e4

080062ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2243      	movs	r2, #67	; 0x43
 80062f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80062fa:	4b03      	ldr	r3, [pc, #12]	; (8006308 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	200000a0 	.word	0x200000a0

0800630c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2243      	movs	r2, #67	; 0x43
 8006318:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800631a:	4b03      	ldr	r3, [pc, #12]	; (8006328 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800631c:	4618      	mov	r0, r3
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20000128 	.word	0x20000128

0800632c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	220a      	movs	r2, #10
 8006338:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800633a:	4b03      	ldr	r3, [pc, #12]	; (8006348 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	bc80      	pop	{r7}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	2000005c 	.word	0x2000005c

0800634c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006356:	2302      	movs	r3, #2
 8006358:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr

080063aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr

080063d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01c      	beq.n	8006424 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d115      	bne.n	8006420 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006412:	b29b      	uxth	r3, r3
 8006414:	2181      	movs	r1, #129	; 0x81
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f001 fccd 	bl	8007db6 <USBD_LL_Transmit>

      return USBD_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	e002      	b.n	8006426 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006424:	2302      	movs	r3, #2
  }
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d017      	beq.n	8006478 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	7c1b      	ldrb	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d109      	bne.n	8006464 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800645a:	2101      	movs	r1, #1
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fccd 	bl	8007dfc <USBD_LL_PrepareReceive>
 8006462:	e007      	b.n	8006474 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800646a:	2340      	movs	r3, #64	; 0x40
 800646c:	2101      	movs	r1, #1
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fcc4 	bl	8007dfc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	e000      	b.n	800647a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006478:	2302      	movs	r3, #2
  }
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	4613      	mov	r3, r2
 800648e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006496:	2302      	movs	r3, #2
 8006498:	e01a      	b.n	80064d0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	79fa      	ldrb	r2, [r7, #7]
 80064c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f001 fb31 	bl	8007b30 <USBD_LL_Init>

  return USBD_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d006      	beq.n	80064fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	73fb      	strb	r3, [r7, #15]
 80064f8:	e001      	b.n	80064fe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064fa:	2302      	movs	r3, #2
 80064fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr

0800650a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 fb66 	bl	8007be4 <USBD_LL_Start>

  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr

08006536 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006542:	2302      	movs	r3, #2
 8006544:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00c      	beq.n	800656a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	4611      	mov	r1, r2
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800656a:	7bfb      	ldrb	r3, [r7, #15]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	78fa      	ldrb	r2, [r7, #3]
 800658a:	4611      	mov	r1, r2
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4798      	blx	r3

  return USBD_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fed8 	bl	8007362 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80065c0:	461a      	mov	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d016      	beq.n	8006604 <USBD_LL_SetupStage+0x6a>
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d81c      	bhi.n	8006614 <USBD_LL_SetupStage+0x7a>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <USBD_LL_SetupStage+0x4a>
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d008      	beq.n	80065f4 <USBD_LL_SetupStage+0x5a>
 80065e2:	e017      	b.n	8006614 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f9cb 	bl	8006988 <USBD_StdDevReq>
      break;
 80065f2:	e01a      	b.n	800662a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fa2d 	bl	8006a5c <USBD_StdItfReq>
      break;
 8006602:	e012      	b.n	800662a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fa6d 	bl	8006aec <USBD_StdEPReq>
      break;
 8006612:	e00a      	b.n	800662a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800661a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800661e:	b2db      	uxtb	r3, r3
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 fb3e 	bl	8007ca4 <USBD_LL_StallEP>
      break;
 8006628:	bf00      	nop
  }

  return USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	460b      	mov	r3, r1
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006642:	7afb      	ldrb	r3, [r7, #11]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d14b      	bne.n	80066e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800664e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006656:	2b03      	cmp	r3, #3
 8006658:	d134      	bne.n	80066c4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	429a      	cmp	r2, r3
 8006664:	d919      	bls.n	800669a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	1ad2      	subs	r2, r2, r3
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800667c:	429a      	cmp	r2, r3
 800667e:	d203      	bcs.n	8006688 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006684:	b29b      	uxth	r3, r3
 8006686:	e002      	b.n	800668e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800668c:	b29b      	uxth	r3, r3
 800668e:	461a      	mov	r2, r3
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 ff57 	bl	8007546 <USBD_CtlContinueRx>
 8006698:	e038      	b.n	800670c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d105      	bne.n	80066bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 ff54 	bl	800756a <USBD_CtlSendStatus>
 80066c2:	e023      	b.n	800670c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d11e      	bne.n	800670c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80066d6:	2100      	movs	r1, #0
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f001 fae3 	bl	8007ca4 <USBD_LL_StallEP>
 80066de:	e015      	b.n	800670c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d108      	bne.n	8006708 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	7afa      	ldrb	r2, [r7, #11]
 8006700:	4611      	mov	r1, r2
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	4798      	blx	r3
 8006706:	e001      	b.n	800670c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006708:	2302      	movs	r3, #2
 800670a:	e000      	b.n	800670e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b086      	sub	sp, #24
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	460b      	mov	r3, r1
 8006720:	607a      	str	r2, [r7, #4]
 8006722:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d17f      	bne.n	800682a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3314      	adds	r3, #20
 800672e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006736:	2b02      	cmp	r3, #2
 8006738:	d15c      	bne.n	80067f4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	429a      	cmp	r2, r3
 8006744:	d915      	bls.n	8006772 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	b29b      	uxth	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fec1 	bl	80074e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006764:	2300      	movs	r3, #0
 8006766:	2200      	movs	r2, #0
 8006768:	2100      	movs	r1, #0
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f001 fb46 	bl	8007dfc <USBD_LL_PrepareReceive>
 8006770:	e04e      	b.n	8006810 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	6912      	ldr	r2, [r2, #16]
 800677a:	fbb3 f1f2 	udiv	r1, r3, r2
 800677e:	fb01 f202 	mul.w	r2, r1, r2
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d11c      	bne.n	80067c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006790:	429a      	cmp	r2, r3
 8006792:	d316      	bcc.n	80067c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800679e:	429a      	cmp	r2, r3
 80067a0:	d20f      	bcs.n	80067c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067a2:	2200      	movs	r2, #0
 80067a4:	2100      	movs	r1, #0
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fe9d 	bl	80074e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067b4:	2300      	movs	r3, #0
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f001 fb1e 	bl	8007dfc <USBD_LL_PrepareReceive>
 80067c0:	e026      	b.n	8006810 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d105      	bne.n	80067e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80067e4:	2180      	movs	r1, #128	; 0x80
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f001 fa5c 	bl	8007ca4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fecf 	bl	8007590 <USBD_CtlReceiveStatus>
 80067f2:	e00d      	b.n	8006810 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d004      	beq.n	8006808 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006808:	2180      	movs	r1, #128	; 0x80
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f001 fa4a 	bl	8007ca4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006816:	2b01      	cmp	r3, #1
 8006818:	d11d      	bne.n	8006856 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff fe81 	bl	8006522 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006828:	e015      	b.n	8006856 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00d      	beq.n	8006852 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800683c:	2b03      	cmp	r3, #3
 800683e:	d108      	bne.n	8006852 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	7afa      	ldrb	r2, [r7, #11]
 800684a:	4611      	mov	r1, r2
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	4798      	blx	r3
 8006850:	e001      	b.n	8006856 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006852:	2302      	movs	r3, #2
 8006854:	e000      	b.n	8006858 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006868:	2340      	movs	r3, #64	; 0x40
 800686a:	2200      	movs	r2, #0
 800686c:	2100      	movs	r1, #0
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 f9d3 	bl	8007c1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2240      	movs	r2, #64	; 0x40
 8006880:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006884:	2340      	movs	r3, #64	; 0x40
 8006886:	2200      	movs	r2, #0
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 f9c5 	bl	8007c1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2240      	movs	r2, #64	; 0x40
 800689a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d009      	beq.n	80068d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6852      	ldr	r2, [r2, #4]
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	4611      	mov	r1, r2
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
  }

  return USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2204      	movs	r2, #4
 8006918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006936:	2b04      	cmp	r3, #4
 8006938:	d105      	bne.n	8006946 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr

08006952 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006960:	2b03      	cmp	r3, #3
 8006962:	d10b      	bne.n	800697c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d005      	beq.n	80069ae <USBD_StdDevReq+0x26>
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	d84f      	bhi.n	8006a46 <USBD_StdDevReq+0xbe>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d009      	beq.n	80069be <USBD_StdDevReq+0x36>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d14b      	bne.n	8006a46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	4798      	blx	r3
      break;
 80069bc:	e048      	b.n	8006a50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	785b      	ldrb	r3, [r3, #1]
 80069c2:	2b09      	cmp	r3, #9
 80069c4:	d839      	bhi.n	8006a3a <USBD_StdDevReq+0xb2>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <USBD_StdDevReq+0x44>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	08006a1d 	.word	0x08006a1d
 80069d0:	08006a31 	.word	0x08006a31
 80069d4:	08006a3b 	.word	0x08006a3b
 80069d8:	08006a27 	.word	0x08006a27
 80069dc:	08006a3b 	.word	0x08006a3b
 80069e0:	080069ff 	.word	0x080069ff
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	08006a3b 	.word	0x08006a3b
 80069ec:	08006a13 	.word	0x08006a13
 80069f0:	08006a09 	.word	0x08006a09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9dc 	bl	8006db4 <USBD_GetDescriptor>
          break;
 80069fc:	e022      	b.n	8006a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fb3f 	bl	8007084 <USBD_SetAddress>
          break;
 8006a06:	e01d      	b.n	8006a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fb7e 	bl	800710c <USBD_SetConfig>
          break;
 8006a10:	e018      	b.n	8006a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fc07 	bl	8007228 <USBD_GetConfig>
          break;
 8006a1a:	e013      	b.n	8006a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fc37 	bl	8007292 <USBD_GetStatus>
          break;
 8006a24:	e00e      	b.n	8006a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fc65 	bl	80072f8 <USBD_SetFeature>
          break;
 8006a2e:	e009      	b.n	8006a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fc74 	bl	8007320 <USBD_ClrFeature>
          break;
 8006a38:	e004      	b.n	8006a44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fccc 	bl	80073da <USBD_CtlError>
          break;
 8006a42:	bf00      	nop
      }
      break;
 8006a44:	e004      	b.n	8006a50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fcc6 	bl	80073da <USBD_CtlError>
      break;
 8006a4e:	bf00      	nop
  }

  return ret;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop

08006a5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d005      	beq.n	8006a82 <USBD_StdItfReq+0x26>
 8006a76:	2b40      	cmp	r3, #64	; 0x40
 8006a78:	d82e      	bhi.n	8006ad8 <USBD_StdItfReq+0x7c>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <USBD_StdItfReq+0x26>
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d12a      	bne.n	8006ad8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d81d      	bhi.n	8006aca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	889b      	ldrh	r3, [r3, #4]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d813      	bhi.n	8006ac0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	88db      	ldrh	r3, [r3, #6]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d110      	bne.n	8006ad4 <USBD_StdItfReq+0x78>
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10d      	bne.n	8006ad4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fd56 	bl	800756a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006abe:	e009      	b.n	8006ad4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fc89 	bl	80073da <USBD_CtlError>
          break;
 8006ac8:	e004      	b.n	8006ad4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fc84 	bl	80073da <USBD_CtlError>
          break;
 8006ad2:	e000      	b.n	8006ad6 <USBD_StdItfReq+0x7a>
          break;
 8006ad4:	bf00      	nop
      }
      break;
 8006ad6:	e004      	b.n	8006ae2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fc7d 	bl	80073da <USBD_CtlError>
      break;
 8006ae0:	bf00      	nop
  }

  return USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	889b      	ldrh	r3, [r3, #4]
 8006afe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d007      	beq.n	8006b1c <USBD_StdEPReq+0x30>
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	f200 8146 	bhi.w	8006d9e <USBD_StdEPReq+0x2b2>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <USBD_StdEPReq+0x40>
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	f040 8141 	bne.w	8006d9e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	4798      	blx	r3
      break;
 8006b2a:	e13d      	b.n	8006da8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d10a      	bne.n	8006b4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	4798      	blx	r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	e12d      	b.n	8006daa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	785b      	ldrb	r3, [r3, #1]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d007      	beq.n	8006b66 <USBD_StdEPReq+0x7a>
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	f300 811b 	bgt.w	8006d92 <USBD_StdEPReq+0x2a6>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d072      	beq.n	8006c46 <USBD_StdEPReq+0x15a>
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d03a      	beq.n	8006bda <USBD_StdEPReq+0xee>
 8006b64:	e115      	b.n	8006d92 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d002      	beq.n	8006b76 <USBD_StdEPReq+0x8a>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d015      	beq.n	8006ba0 <USBD_StdEPReq+0xb4>
 8006b74:	e02b      	b.n	8006bce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00c      	beq.n	8006b96 <USBD_StdEPReq+0xaa>
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b80      	cmp	r3, #128	; 0x80
 8006b80:	d009      	beq.n	8006b96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 f88c 	bl	8007ca4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b8c:	2180      	movs	r1, #128	; 0x80
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 f888 	bl	8007ca4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b94:	e020      	b.n	8006bd8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fc1e 	bl	80073da <USBD_CtlError>
              break;
 8006b9e:	e01b      	b.n	8006bd8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	885b      	ldrh	r3, [r3, #2]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10e      	bne.n	8006bc6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <USBD_StdEPReq+0xda>
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b80      	cmp	r3, #128	; 0x80
 8006bb2:	d008      	beq.n	8006bc6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	88db      	ldrh	r3, [r3, #6]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f86f 	bl	8007ca4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fccf 	bl	800756a <USBD_CtlSendStatus>

              break;
 8006bcc:	e004      	b.n	8006bd8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fc02 	bl	80073da <USBD_CtlError>
              break;
 8006bd6:	bf00      	nop
          }
          break;
 8006bd8:	e0e0      	b.n	8006d9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d002      	beq.n	8006bea <USBD_StdEPReq+0xfe>
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d015      	beq.n	8006c14 <USBD_StdEPReq+0x128>
 8006be8:	e026      	b.n	8006c38 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00c      	beq.n	8006c0a <USBD_StdEPReq+0x11e>
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	2b80      	cmp	r3, #128	; 0x80
 8006bf4:	d009      	beq.n	8006c0a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 f852 	bl	8007ca4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c00:	2180      	movs	r1, #128	; 0x80
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 f84e 	bl	8007ca4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c08:	e01c      	b.n	8006c44 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fbe4 	bl	80073da <USBD_CtlError>
              break;
 8006c12:	e017      	b.n	8006c44 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	885b      	ldrh	r3, [r3, #2]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d112      	bne.n	8006c42 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d004      	beq.n	8006c30 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 f859 	bl	8007ce2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fc9a 	bl	800756a <USBD_CtlSendStatus>
              }
              break;
 8006c36:	e004      	b.n	8006c42 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fbcd 	bl	80073da <USBD_CtlError>
              break;
 8006c40:	e000      	b.n	8006c44 <USBD_StdEPReq+0x158>
              break;
 8006c42:	bf00      	nop
          }
          break;
 8006c44:	e0aa      	b.n	8006d9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d002      	beq.n	8006c56 <USBD_StdEPReq+0x16a>
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d032      	beq.n	8006cba <USBD_StdEPReq+0x1ce>
 8006c54:	e097      	b.n	8006d86 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d007      	beq.n	8006c6c <USBD_StdEPReq+0x180>
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d004      	beq.n	8006c6c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fbb8 	bl	80073da <USBD_CtlError>
                break;
 8006c6a:	e091      	b.n	8006d90 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	da0b      	bge.n	8006c8c <USBD_StdEPReq+0x1a0>
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	3310      	adds	r3, #16
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	4413      	add	r3, r2
 8006c88:	3304      	adds	r3, #4
 8006c8a:	e00b      	b.n	8006ca4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fbfb 	bl	80074ae <USBD_CtlSendData>
              break;
 8006cb8:	e06a      	b.n	8006d90 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	da11      	bge.n	8006ce6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	3318      	adds	r3, #24
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d117      	bne.n	8006d0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fb7b 	bl	80073da <USBD_CtlError>
                  break;
 8006ce4:	e054      	b.n	8006d90 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	f003 020f 	and.w	r2, r3, #15
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fb68 	bl	80073da <USBD_CtlError>
                  break;
 8006d0a:	e041      	b.n	8006d90 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	da0b      	bge.n	8006d2c <USBD_StdEPReq+0x240>
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	3310      	adds	r3, #16
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	4413      	add	r3, r2
 8006d28:	3304      	adds	r3, #4
 8006d2a:	e00b      	b.n	8006d44 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	4413      	add	r3, r2
 8006d42:	3304      	adds	r3, #4
 8006d44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <USBD_StdEPReq+0x266>
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	2b80      	cmp	r3, #128	; 0x80
 8006d50:	d103      	bne.n	8006d5a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	e00e      	b.n	8006d78 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 ffde 	bl	8007d20 <USBD_LL_IsStallEP>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e002      	b.n	8006d78 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fb95 	bl	80074ae <USBD_CtlSendData>
              break;
 8006d84:	e004      	b.n	8006d90 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fb26 	bl	80073da <USBD_CtlError>
              break;
 8006d8e:	bf00      	nop
          }
          break;
 8006d90:	e004      	b.n	8006d9c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fb20 	bl	80073da <USBD_CtlError>
          break;
 8006d9a:	bf00      	nop
      }
      break;
 8006d9c:	e004      	b.n	8006da8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fb1a 	bl	80073da <USBD_CtlError>
      break;
 8006da6:	bf00      	nop
  }

  return ret;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	0a1b      	lsrs	r3, r3, #8
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	2b06      	cmp	r3, #6
 8006dd6:	f200 8128 	bhi.w	800702a <USBD_GetDescriptor+0x276>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <USBD_GetDescriptor+0x2c>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006dfd 	.word	0x08006dfd
 8006de4:	08006e15 	.word	0x08006e15
 8006de8:	08006e55 	.word	0x08006e55
 8006dec:	0800702b 	.word	0x0800702b
 8006df0:	0800702b 	.word	0x0800702b
 8006df4:	08006fcb 	.word	0x08006fcb
 8006df8:	08006ff7 	.word	0x08006ff7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	7c12      	ldrb	r2, [r2, #16]
 8006e08:	f107 0108 	add.w	r1, r7, #8
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
 8006e10:	60f8      	str	r0, [r7, #12]
      break;
 8006e12:	e112      	b.n	800703a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	7c1b      	ldrb	r3, [r3, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10d      	bne.n	8006e38 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e24:	f107 0208 	add.w	r2, r7, #8
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3301      	adds	r3, #1
 8006e32:	2202      	movs	r2, #2
 8006e34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e36:	e100      	b.n	800703a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	f107 0208 	add.w	r2, r7, #8
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
 8006e48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	2202      	movs	r2, #2
 8006e50:	701a      	strb	r2, [r3, #0]
      break;
 8006e52:	e0f2      	b.n	800703a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	885b      	ldrh	r3, [r3, #2]
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b05      	cmp	r3, #5
 8006e5c:	f200 80ac 	bhi.w	8006fb8 <USBD_GetDescriptor+0x204>
 8006e60:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <USBD_GetDescriptor+0xb4>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e81 	.word	0x08006e81
 8006e6c:	08006eb5 	.word	0x08006eb5
 8006e70:	08006ee9 	.word	0x08006ee9
 8006e74:	08006f1d 	.word	0x08006f1d
 8006e78:	08006f51 	.word	0x08006f51
 8006e7c:	08006f85 	.word	0x08006f85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	7c12      	ldrb	r2, [r2, #16]
 8006e98:	f107 0108 	add.w	r1, r7, #8
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
 8006ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ea2:	e091      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa97 	bl	80073da <USBD_CtlError>
            err++;
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006eb2:	e089      	b.n	8006fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	7c12      	ldrb	r2, [r2, #16]
 8006ecc:	f107 0108 	add.w	r1, r7, #8
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
 8006ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ed6:	e077      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa7d 	bl	80073da <USBD_CtlError>
            err++;
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ee6:	e06f      	b.n	8006fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	7c12      	ldrb	r2, [r2, #16]
 8006f00:	f107 0108 	add.w	r1, r7, #8
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
 8006f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f0a:	e05d      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa63 	bl	80073da <USBD_CtlError>
            err++;
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	3301      	adds	r3, #1
 8006f18:	72fb      	strb	r3, [r7, #11]
          break;
 8006f1a:	e055      	b.n	8006fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	7c12      	ldrb	r2, [r2, #16]
 8006f34:	f107 0108 	add.w	r1, r7, #8
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f3e:	e043      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa49 	bl	80073da <USBD_CtlError>
            err++;
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f4e:	e03b      	b.n	8006fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7c12      	ldrb	r2, [r2, #16]
 8006f68:	f107 0108 	add.w	r1, r7, #8
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4798      	blx	r3
 8006f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f72:	e029      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa2f 	bl	80073da <USBD_CtlError>
            err++;
 8006f7c:	7afb      	ldrb	r3, [r7, #11]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	72fb      	strb	r3, [r7, #11]
          break;
 8006f82:	e021      	b.n	8006fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	7c12      	ldrb	r2, [r2, #16]
 8006f9c:	f107 0108 	add.w	r1, r7, #8
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4798      	blx	r3
 8006fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fa6:	e00f      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa15 	bl	80073da <USBD_CtlError>
            err++;
 8006fb0:	7afb      	ldrb	r3, [r7, #11]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fb6:	e007      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa0d 	bl	80073da <USBD_CtlError>
          err++;
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006fc6:	e038      	b.n	800703a <USBD_GetDescriptor+0x286>
 8006fc8:	e037      	b.n	800703a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	7c1b      	ldrb	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fda:	f107 0208 	add.w	r2, r7, #8
 8006fde:	4610      	mov	r0, r2
 8006fe0:	4798      	blx	r3
 8006fe2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fe4:	e029      	b.n	800703a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f9f6 	bl	80073da <USBD_CtlError>
        err++;
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ff4:	e021      	b.n	800703a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7c1b      	ldrb	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10d      	bne.n	800701a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	f107 0208 	add.w	r2, r7, #8
 800700a:	4610      	mov	r0, r2
 800700c:	4798      	blx	r3
 800700e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	2207      	movs	r2, #7
 8007016:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007018:	e00f      	b.n	800703a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f9dc 	bl	80073da <USBD_CtlError>
        err++;
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	3301      	adds	r3, #1
 8007026:	72fb      	strb	r3, [r7, #11]
      break;
 8007028:	e007      	b.n	800703a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f9d4 	bl	80073da <USBD_CtlError>
      err++;
 8007032:	7afb      	ldrb	r3, [r7, #11]
 8007034:	3301      	adds	r3, #1
 8007036:	72fb      	strb	r3, [r7, #11]
      break;
 8007038:	bf00      	nop
  }

  if (err != 0U)
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d11c      	bne.n	800707a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007040:	893b      	ldrh	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d011      	beq.n	800706a <USBD_GetDescriptor+0x2b6>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	88db      	ldrh	r3, [r3, #6]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00d      	beq.n	800706a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	88da      	ldrh	r2, [r3, #6]
 8007052:	893b      	ldrh	r3, [r7, #8]
 8007054:	4293      	cmp	r3, r2
 8007056:	bf28      	it	cs
 8007058:	4613      	movcs	r3, r2
 800705a:	b29b      	uxth	r3, r3
 800705c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800705e:	893b      	ldrh	r3, [r7, #8]
 8007060:	461a      	mov	r2, r3
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa22 	bl	80074ae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	88db      	ldrh	r3, [r3, #6]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d104      	bne.n	800707c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fa79 	bl	800756a <USBD_CtlSendStatus>
 8007078:	e000      	b.n	800707c <USBD_GetDescriptor+0x2c8>
    return;
 800707a:	bf00      	nop
    }
  }
}
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop

08007084 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	889b      	ldrh	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d130      	bne.n	80070f8 <USBD_SetAddress+0x74>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	88db      	ldrh	r3, [r3, #6]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d12c      	bne.n	80070f8 <USBD_SetAddress+0x74>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	885b      	ldrh	r3, [r3, #2]
 80070a2:	2b7f      	cmp	r3, #127	; 0x7f
 80070a4:	d828      	bhi.n	80070f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d104      	bne.n	80070c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f98b 	bl	80073da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c4:	e01d      	b.n	8007102 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	7bfa      	ldrb	r2, [r7, #15]
 80070ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fe50 	bl	8007d78 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fa46 	bl	800756a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ec:	e009      	b.n	8007102 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f6:	e004      	b.n	8007102 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f96d 	bl	80073da <USBD_CtlError>
  }
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	885b      	ldrh	r3, [r3, #2]
 800711a:	b2da      	uxtb	r2, r3
 800711c:	4b41      	ldr	r3, [pc, #260]	; (8007224 <USBD_SetConfig+0x118>)
 800711e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007120:	4b40      	ldr	r3, [pc, #256]	; (8007224 <USBD_SetConfig+0x118>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d904      	bls.n	8007132 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f955 	bl	80073da <USBD_CtlError>
 8007130:	e075      	b.n	800721e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007138:	2b02      	cmp	r3, #2
 800713a:	d002      	beq.n	8007142 <USBD_SetConfig+0x36>
 800713c:	2b03      	cmp	r3, #3
 800713e:	d023      	beq.n	8007188 <USBD_SetConfig+0x7c>
 8007140:	e062      	b.n	8007208 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007142:	4b38      	ldr	r3, [pc, #224]	; (8007224 <USBD_SetConfig+0x118>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01a      	beq.n	8007180 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800714a:	4b36      	ldr	r3, [pc, #216]	; (8007224 <USBD_SetConfig+0x118>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2203      	movs	r2, #3
 8007158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800715c:	4b31      	ldr	r3, [pc, #196]	; (8007224 <USBD_SetConfig+0x118>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff f9e7 	bl	8006536 <USBD_SetClassConfig>
 8007168:	4603      	mov	r3, r0
 800716a:	2b02      	cmp	r3, #2
 800716c:	d104      	bne.n	8007178 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f932 	bl	80073da <USBD_CtlError>
            return;
 8007176:	e052      	b.n	800721e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f9f6 	bl	800756a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800717e:	e04e      	b.n	800721e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f9f2 	bl	800756a <USBD_CtlSendStatus>
        break;
 8007186:	e04a      	b.n	800721e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007188:	4b26      	ldr	r3, [pc, #152]	; (8007224 <USBD_SetConfig+0x118>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d112      	bne.n	80071b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007198:	4b22      	ldr	r3, [pc, #136]	; (8007224 <USBD_SetConfig+0x118>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80071a2:	4b20      	ldr	r3, [pc, #128]	; (8007224 <USBD_SetConfig+0x118>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff f9e3 	bl	8006574 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9db 	bl	800756a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80071b4:	e033      	b.n	800721e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80071b6:	4b1b      	ldr	r3, [pc, #108]	; (8007224 <USBD_SetConfig+0x118>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d01d      	beq.n	8007200 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff f9d1 	bl	8006574 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80071d2:	4b14      	ldr	r3, [pc, #80]	; (8007224 <USBD_SetConfig+0x118>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071dc:	4b11      	ldr	r3, [pc, #68]	; (8007224 <USBD_SetConfig+0x118>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff f9a7 	bl	8006536 <USBD_SetClassConfig>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d104      	bne.n	80071f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f8f2 	bl	80073da <USBD_CtlError>
            return;
 80071f6:	e012      	b.n	800721e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f9b6 	bl	800756a <USBD_CtlSendStatus>
        break;
 80071fe:	e00e      	b.n	800721e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f9b2 	bl	800756a <USBD_CtlSendStatus>
        break;
 8007206:	e00a      	b.n	800721e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f8e5 	bl	80073da <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007210:	4b04      	ldr	r3, [pc, #16]	; (8007224 <USBD_SetConfig+0x118>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff f9ac 	bl	8006574 <USBD_ClrClassConfig>
        break;
 800721c:	bf00      	nop
    }
  }
}
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20000668 	.word	0x20000668

08007228 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	88db      	ldrh	r3, [r3, #6]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d004      	beq.n	8007244 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f8cc 	bl	80073da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007242:	e022      	b.n	800728a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724a:	2b02      	cmp	r3, #2
 800724c:	dc02      	bgt.n	8007254 <USBD_GetConfig+0x2c>
 800724e:	2b00      	cmp	r3, #0
 8007250:	dc03      	bgt.n	800725a <USBD_GetConfig+0x32>
 8007252:	e015      	b.n	8007280 <USBD_GetConfig+0x58>
 8007254:	2b03      	cmp	r3, #3
 8007256:	d00b      	beq.n	8007270 <USBD_GetConfig+0x48>
 8007258:	e012      	b.n	8007280 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3308      	adds	r3, #8
 8007264:	2201      	movs	r2, #1
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f920 	bl	80074ae <USBD_CtlSendData>
        break;
 800726e:	e00c      	b.n	800728a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3304      	adds	r3, #4
 8007274:	2201      	movs	r2, #1
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f918 	bl	80074ae <USBD_CtlSendData>
        break;
 800727e:	e004      	b.n	800728a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f8a9 	bl	80073da <USBD_CtlError>
        break;
 8007288:	bf00      	nop
}
 800728a:	bf00      	nop
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a2:	3b01      	subs	r3, #1
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d81e      	bhi.n	80072e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	88db      	ldrh	r3, [r3, #6]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d004      	beq.n	80072ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f891 	bl	80073da <USBD_CtlError>
        break;
 80072b8:	e01a      	b.n	80072f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f043 0202 	orr.w	r2, r3, #2
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	330c      	adds	r3, #12
 80072da:	2202      	movs	r2, #2
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f8e5 	bl	80074ae <USBD_CtlSendData>
      break;
 80072e4:	e004      	b.n	80072f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f876 	bl	80073da <USBD_CtlError>
      break;
 80072ee:	bf00      	nop
  }
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	885b      	ldrh	r3, [r3, #2]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d106      	bne.n	8007318 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f929 	bl	800756a <USBD_CtlSendStatus>
  }
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	3b01      	subs	r3, #1
 8007332:	2b02      	cmp	r3, #2
 8007334:	d80b      	bhi.n	800734e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	885b      	ldrh	r3, [r3, #2]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d10c      	bne.n	8007358 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f90f 	bl	800756a <USBD_CtlSendStatus>
      }
      break;
 800734c:	e004      	b.n	8007358 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f842 	bl	80073da <USBD_CtlError>
      break;
 8007356:	e000      	b.n	800735a <USBD_ClrFeature+0x3a>
      break;
 8007358:	bf00      	nop
  }
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781a      	ldrb	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	785a      	ldrb	r2, [r3, #1]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	3302      	adds	r3, #2
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	b29a      	uxth	r2, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	3303      	adds	r3, #3
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	b29b      	uxth	r3, r3
 8007390:	4413      	add	r3, r2
 8007392:	b29a      	uxth	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	3304      	adds	r3, #4
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	b29a      	uxth	r2, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	3305      	adds	r3, #5
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	4413      	add	r3, r2
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	3306      	adds	r3, #6
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	3307      	adds	r3, #7
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	4413      	add	r3, r2
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	80da      	strh	r2, [r3, #6]

}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80073e4:	2180      	movs	r1, #128	; 0x80
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fc5c 	bl	8007ca4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80073ec:	2100      	movs	r1, #0
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fc58 	bl	8007ca4 <USBD_LL_StallEP>
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d032      	beq.n	8007478 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 f834 	bl	8007480 <USBD_GetLen>
 8007418:	4603      	mov	r3, r0
 800741a:	3301      	adds	r3, #1
 800741c:	b29b      	uxth	r3, r3
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	75fa      	strb	r2, [r7, #23]
 800742c:	461a      	mov	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4413      	add	r3, r2
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	7812      	ldrb	r2, [r2, #0]
 8007436:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	75fa      	strb	r2, [r7, #23]
 800743e:	461a      	mov	r2, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4413      	add	r3, r2
 8007444:	2203      	movs	r2, #3
 8007446:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007448:	e012      	b.n	8007470 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	60fa      	str	r2, [r7, #12]
 8007450:	7dfa      	ldrb	r2, [r7, #23]
 8007452:	1c51      	adds	r1, r2, #1
 8007454:	75f9      	strb	r1, [r7, #23]
 8007456:	4611      	mov	r1, r2
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	440a      	add	r2, r1
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	75fa      	strb	r2, [r7, #23]
 8007466:	461a      	mov	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4413      	add	r3, r2
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e8      	bne.n	800744a <USBD_GetString+0x4e>
    }
  }
}
 8007478:	bf00      	nop
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800748c:	e005      	b.n	800749a <USBD_GetLen+0x1a>
  {
    len++;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	3301      	adds	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3301      	adds	r3, #1
 8007498:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f5      	bne.n	800748e <USBD_GetLen+0xe>
  }

  return len;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bc80      	pop	{r7}
 80074ac:	4770      	bx	lr

080074ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	4613      	mov	r3, r2
 80074ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2202      	movs	r2, #2
 80074c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074c4:	88fa      	ldrh	r2, [r7, #6]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074d0:	88fb      	ldrh	r3, [r7, #6]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	2100      	movs	r1, #0
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fc6d 	bl	8007db6 <USBD_LL_Transmit>

  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	4613      	mov	r3, r2
 80074f2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074f4:	88fb      	ldrh	r3, [r7, #6]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	2100      	movs	r1, #0
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fc5b 	bl	8007db6 <USBD_LL_Transmit>

  return USBD_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	4613      	mov	r3, r2
 8007516:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2203      	movs	r2, #3
 800751c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007520:	88fa      	ldrh	r2, [r7, #6]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	2100      	movs	r1, #0
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fc60 	bl	8007dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	4613      	mov	r3, r2
 8007552:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007554:	88fb      	ldrh	r3, [r7, #6]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	2100      	movs	r1, #0
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fc4e 	bl	8007dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2204      	movs	r2, #4
 8007576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800757a:	2300      	movs	r3, #0
 800757c:	2200      	movs	r2, #0
 800757e:	2100      	movs	r1, #0
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fc18 	bl	8007db6 <USBD_LL_Transmit>

  return USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2205      	movs	r2, #5
 800759c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075a0:	2300      	movs	r3, #0
 80075a2:	2200      	movs	r2, #0
 80075a4:	2100      	movs	r1, #0
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fc28 	bl	8007dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075bc:	2200      	movs	r2, #0
 80075be:	4912      	ldr	r1, [pc, #72]	; (8007608 <MX_USB_DEVICE_Init+0x50>)
 80075c0:	4812      	ldr	r0, [pc, #72]	; (800760c <MX_USB_DEVICE_Init+0x54>)
 80075c2:	f7fe ff5e 	bl	8006482 <USBD_Init>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075cc:	f7f8 ff9c 	bl	8000508 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075d0:	490f      	ldr	r1, [pc, #60]	; (8007610 <MX_USB_DEVICE_Init+0x58>)
 80075d2:	480e      	ldr	r0, [pc, #56]	; (800760c <MX_USB_DEVICE_Init+0x54>)
 80075d4:	f7fe ff80 	bl	80064d8 <USBD_RegisterClass>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075de:	f7f8 ff93 	bl	8000508 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075e2:	490c      	ldr	r1, [pc, #48]	; (8007614 <MX_USB_DEVICE_Init+0x5c>)
 80075e4:	4809      	ldr	r0, [pc, #36]	; (800760c <MX_USB_DEVICE_Init+0x54>)
 80075e6:	f7fe feb1 	bl	800634c <USBD_CDC_RegisterInterface>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075f0:	f7f8 ff8a 	bl	8000508 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075f4:	4805      	ldr	r0, [pc, #20]	; (800760c <MX_USB_DEVICE_Init+0x54>)
 80075f6:	f7fe ff88 	bl	800650a <USBD_Start>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007600:	f7f8 ff82 	bl	8000508 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007604:	bf00      	nop
 8007606:	bd80      	pop	{r7, pc}
 8007608:	2000017c 	.word	0x2000017c
 800760c:	2000066c 	.word	0x2000066c
 8007610:	20000068 	.word	0x20000068
 8007614:	2000016c 	.word	0x2000016c

08007618 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800761c:	2200      	movs	r2, #0
 800761e:	4905      	ldr	r1, [pc, #20]	; (8007634 <CDC_Init_FS+0x1c>)
 8007620:	4805      	ldr	r0, [pc, #20]	; (8007638 <CDC_Init_FS+0x20>)
 8007622:	f7fe fea9 	bl	8006378 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007626:	4905      	ldr	r1, [pc, #20]	; (800763c <CDC_Init_FS+0x24>)
 8007628:	4803      	ldr	r0, [pc, #12]	; (8007638 <CDC_Init_FS+0x20>)
 800762a:	f7fe febe 	bl	80063aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800762e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007630:	4618      	mov	r0, r3
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000d30 	.word	0x20000d30
 8007638:	2000066c 	.word	0x2000066c
 800763c:	20000930 	.word	0x20000930

08007640 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007644:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007646:	4618      	mov	r0, r3
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr
	...

08007650 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	6039      	str	r1, [r7, #0]
 800765a:	71fb      	strb	r3, [r7, #7]
 800765c:	4613      	mov	r3, r2
 800765e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	2b23      	cmp	r3, #35	; 0x23
 8007664:	d84a      	bhi.n	80076fc <CDC_Control_FS+0xac>
 8007666:	a201      	add	r2, pc, #4	; (adr r2, 800766c <CDC_Control_FS+0x1c>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	080076fd 	.word	0x080076fd
 8007670:	080076fd 	.word	0x080076fd
 8007674:	080076fd 	.word	0x080076fd
 8007678:	080076fd 	.word	0x080076fd
 800767c:	080076fd 	.word	0x080076fd
 8007680:	080076fd 	.word	0x080076fd
 8007684:	080076fd 	.word	0x080076fd
 8007688:	080076fd 	.word	0x080076fd
 800768c:	080076fd 	.word	0x080076fd
 8007690:	080076fd 	.word	0x080076fd
 8007694:	080076fd 	.word	0x080076fd
 8007698:	080076fd 	.word	0x080076fd
 800769c:	080076fd 	.word	0x080076fd
 80076a0:	080076fd 	.word	0x080076fd
 80076a4:	080076fd 	.word	0x080076fd
 80076a8:	080076fd 	.word	0x080076fd
 80076ac:	080076fd 	.word	0x080076fd
 80076b0:	080076fd 	.word	0x080076fd
 80076b4:	080076fd 	.word	0x080076fd
 80076b8:	080076fd 	.word	0x080076fd
 80076bc:	080076fd 	.word	0x080076fd
 80076c0:	080076fd 	.word	0x080076fd
 80076c4:	080076fd 	.word	0x080076fd
 80076c8:	080076fd 	.word	0x080076fd
 80076cc:	080076fd 	.word	0x080076fd
 80076d0:	080076fd 	.word	0x080076fd
 80076d4:	080076fd 	.word	0x080076fd
 80076d8:	080076fd 	.word	0x080076fd
 80076dc:	080076fd 	.word	0x080076fd
 80076e0:	080076fd 	.word	0x080076fd
 80076e4:	080076fd 	.word	0x080076fd
 80076e8:	080076fd 	.word	0x080076fd
 80076ec:	080076fd 	.word	0x080076fd
 80076f0:	080076fd 	.word	0x080076fd
 80076f4:	080076fd 	.word	0x080076fd
 80076f8:	080076fd 	.word	0x080076fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076fc:	bf00      	nop
  }

  return (USBD_OK);
 80076fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	bc80      	pop	{r7}
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop

0800770c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	4808      	ldr	r0, [pc, #32]	; (800773c <CDC_Receive_FS+0x30>)
 800771a:	f7fe fe46 	bl	80063aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800771e:	4807      	ldr	r0, [pc, #28]	; (800773c <CDC_Receive_FS+0x30>)
 8007720:	f7fe fe85 	bl	800642e <USBD_CDC_ReceivePacket>
  memcpy(usb_rx_buffer, Buf, (size_t)*Len);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	4804      	ldr	r0, [pc, #16]	; (8007740 <CDC_Receive_FS+0x34>)
 800772e:	f000 fc0b 	bl	8007f48 <memcpy>
  return (USBD_OK);
 8007732:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	2000066c 	.word	0x2000066c
 8007740:	20000264 	.word	0x20000264

08007744 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007754:	4b0d      	ldr	r3, [pc, #52]	; (800778c <CDC_Transmit_FS+0x48>)
 8007756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007766:	2301      	movs	r3, #1
 8007768:	e00b      	b.n	8007782 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800776a:	887b      	ldrh	r3, [r7, #2]
 800776c:	461a      	mov	r2, r3
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	4806      	ldr	r0, [pc, #24]	; (800778c <CDC_Transmit_FS+0x48>)
 8007772:	f7fe fe01 	bl	8006378 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007776:	4805      	ldr	r0, [pc, #20]	; (800778c <CDC_Transmit_FS+0x48>)
 8007778:	f7fe fe2a 	bl	80063d0 <USBD_CDC_TransmitPacket>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	2000066c 	.word	0x2000066c

08007790 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	6039      	str	r1, [r7, #0]
 800779a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2212      	movs	r2, #18
 80077a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077a2:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20000198 	.word	0x20000198

080077b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2204      	movs	r2, #4
 80077c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077c6:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	200001ac 	.word	0x200001ac

080077d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	4907      	ldr	r1, [pc, #28]	; (800780c <USBD_FS_ProductStrDescriptor+0x34>)
 80077ee:	4808      	ldr	r0, [pc, #32]	; (8007810 <USBD_FS_ProductStrDescriptor+0x38>)
 80077f0:	f7ff fe04 	bl	80073fc <USBD_GetString>
 80077f4:	e004      	b.n	8007800 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	4904      	ldr	r1, [pc, #16]	; (800780c <USBD_FS_ProductStrDescriptor+0x34>)
 80077fa:	4805      	ldr	r0, [pc, #20]	; (8007810 <USBD_FS_ProductStrDescriptor+0x38>)
 80077fc:	f7ff fdfe 	bl	80073fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007800:	4b02      	ldr	r3, [pc, #8]	; (800780c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20001130 	.word	0x20001130
 8007810:	08007f9c 	.word	0x08007f9c

08007814 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	6039      	str	r1, [r7, #0]
 800781e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	4904      	ldr	r1, [pc, #16]	; (8007834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007824:	4804      	ldr	r0, [pc, #16]	; (8007838 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007826:	f7ff fde9 	bl	80073fc <USBD_GetString>
  return USBD_StrDesc;
 800782a:	4b02      	ldr	r3, [pc, #8]	; (8007834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20001130 	.word	0x20001130
 8007838:	08007fc8 	.word	0x08007fc8

0800783c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	221a      	movs	r2, #26
 800784c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800784e:	f000 f843 	bl	80078d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007852:	4b02      	ldr	r3, [pc, #8]	; (800785c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	200001b0 	.word	0x200001b0

08007860 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	6039      	str	r1, [r7, #0]
 800786a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800786c:	79fb      	ldrb	r3, [r7, #7]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d105      	bne.n	800787e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	4907      	ldr	r1, [pc, #28]	; (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007876:	4808      	ldr	r0, [pc, #32]	; (8007898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007878:	f7ff fdc0 	bl	80073fc <USBD_GetString>
 800787c:	e004      	b.n	8007888 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	4904      	ldr	r1, [pc, #16]	; (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007882:	4805      	ldr	r0, [pc, #20]	; (8007898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007884:	f7ff fdba 	bl	80073fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007888:	4b02      	ldr	r3, [pc, #8]	; (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20001130 	.word	0x20001130
 8007898:	08007fdc 	.word	0x08007fdc

0800789c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d105      	bne.n	80078ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	4907      	ldr	r1, [pc, #28]	; (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078b2:	4808      	ldr	r0, [pc, #32]	; (80078d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078b4:	f7ff fda2 	bl	80073fc <USBD_GetString>
 80078b8:	e004      	b.n	80078c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	4904      	ldr	r1, [pc, #16]	; (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078be:	4805      	ldr	r0, [pc, #20]	; (80078d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078c0:	f7ff fd9c 	bl	80073fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80078c4:	4b02      	ldr	r3, [pc, #8]	; (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20001130 	.word	0x20001130
 80078d4:	08007fe8 	.word	0x08007fe8

080078d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078de:	4b0f      	ldr	r3, [pc, #60]	; (800791c <Get_SerialNum+0x44>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078e4:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <Get_SerialNum+0x48>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078ea:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <Get_SerialNum+0x4c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078fe:	2208      	movs	r2, #8
 8007900:	4909      	ldr	r1, [pc, #36]	; (8007928 <Get_SerialNum+0x50>)
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f814 	bl	8007930 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007908:	2204      	movs	r2, #4
 800790a:	4908      	ldr	r1, [pc, #32]	; (800792c <Get_SerialNum+0x54>)
 800790c:	68b8      	ldr	r0, [r7, #8]
 800790e:	f000 f80f 	bl	8007930 <IntToUnicode>
  }
}
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	1ffff7e8 	.word	0x1ffff7e8
 8007920:	1ffff7ec 	.word	0x1ffff7ec
 8007924:	1ffff7f0 	.word	0x1ffff7f0
 8007928:	200001b2 	.word	0x200001b2
 800792c:	200001c2 	.word	0x200001c2

08007930 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]
 8007946:	e027      	b.n	8007998 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	0f1b      	lsrs	r3, r3, #28
 800794c:	2b09      	cmp	r3, #9
 800794e:	d80b      	bhi.n	8007968 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	0f1b      	lsrs	r3, r3, #28
 8007954:	b2da      	uxtb	r2, r3
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	4619      	mov	r1, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	440b      	add	r3, r1
 8007960:	3230      	adds	r2, #48	; 0x30
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e00a      	b.n	800797e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	0f1b      	lsrs	r3, r3, #28
 800796c:	b2da      	uxtb	r2, r3
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	4619      	mov	r1, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	440b      	add	r3, r1
 8007978:	3237      	adds	r2, #55	; 0x37
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	011b      	lsls	r3, r3, #4
 8007982:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	3301      	adds	r3, #1
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	4413      	add	r3, r2
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	3301      	adds	r3, #1
 8007996:	75fb      	strb	r3, [r7, #23]
 8007998:	7dfa      	ldrb	r2, [r7, #23]
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	429a      	cmp	r2, r3
 800799e:	d3d3      	bcc.n	8007948 <IntToUnicode+0x18>
  }
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr

080079ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a0d      	ldr	r2, [pc, #52]	; (80079f0 <HAL_PCD_MspInit+0x44>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d113      	bne.n	80079e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80079be:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <HAL_PCD_MspInit+0x48>)
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	4a0c      	ldr	r2, [pc, #48]	; (80079f4 <HAL_PCD_MspInit+0x48>)
 80079c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079c8:	61d3      	str	r3, [r2, #28]
 80079ca:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <HAL_PCD_MspInit+0x48>)
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80079d6:	2200      	movs	r2, #0
 80079d8:	2100      	movs	r1, #0
 80079da:	2014      	movs	r0, #20
 80079dc:	f7f8 ffe3 	bl	80009a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80079e0:	2014      	movs	r0, #20
 80079e2:	f7f8 fffc 	bl	80009de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80079e6:	bf00      	nop
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	40005c00 	.word	0x40005c00
 80079f4:	40021000 	.word	0x40021000

080079f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f7fe fdc3 	bl	800659a <USBD_LL_SetupStage>
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	440b      	add	r3, r1
 8007a3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	4619      	mov	r1, r3
 8007a46:	f7fe fdf5 	bl	8006634 <USBD_LL_DataOutStage>
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007a64:	78fa      	ldrb	r2, [r7, #3]
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	440b      	add	r3, r1
 8007a72:	333c      	adds	r3, #60	; 0x3c
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	78fb      	ldrb	r3, [r7, #3]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f7fe fe4c 	bl	8006716 <USBD_LL_DataInStage>
}
 8007a7e:	bf00      	nop
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe ff5c 	bl	8006952 <USBD_LL_SOF>
}
 8007a9a:	bf00      	nop
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d001      	beq.n	8007aba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007ab6:	f7f8 fd27 	bl	8000508 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ac0:	7bfa      	ldrb	r2, [r7, #15]
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fe ff0c 	bl	80068e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe fec5 	bl	8006860 <USBD_LL_Reset>
}
 8007ad6:	bf00      	nop
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe ff06 	bl	8006900 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <HAL_PCD_SuspendCallback+0x30>)
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	4a03      	ldr	r2, [pc, #12]	; (8007b10 <HAL_PCD_SuspendCallback+0x30>)
 8007b02:	f043 0306 	orr.w	r3, r3, #6
 8007b06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	e000ed00 	.word	0xe000ed00

08007b14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe ff00 	bl	8006928 <USBD_LL_Resume>
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007b38:	4a28      	ldr	r2, [pc, #160]	; (8007bdc <USBD_LL_Init+0xac>)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a26      	ldr	r2, [pc, #152]	; (8007bdc <USBD_LL_Init+0xac>)
 8007b44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007b48:	4b24      	ldr	r3, [pc, #144]	; (8007bdc <USBD_LL_Init+0xac>)
 8007b4a:	4a25      	ldr	r2, [pc, #148]	; (8007be0 <USBD_LL_Init+0xb0>)
 8007b4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007b4e:	4b23      	ldr	r3, [pc, #140]	; (8007bdc <USBD_LL_Init+0xac>)
 8007b50:	2208      	movs	r2, #8
 8007b52:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007b54:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <USBD_LL_Init+0xac>)
 8007b56:	2202      	movs	r2, #2
 8007b58:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007b5a:	4b20      	ldr	r3, [pc, #128]	; (8007bdc <USBD_LL_Init+0xac>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007b60:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <USBD_LL_Init+0xac>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007b66:	4b1d      	ldr	r3, [pc, #116]	; (8007bdc <USBD_LL_Init+0xac>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007b6c:	481b      	ldr	r0, [pc, #108]	; (8007bdc <USBD_LL_Init+0xac>)
 8007b6e:	f7f9 fa67 	bl	8001040 <HAL_PCD_Init>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007b78:	f7f8 fcc6 	bl	8000508 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b82:	2318      	movs	r3, #24
 8007b84:	2200      	movs	r2, #0
 8007b86:	2100      	movs	r1, #0
 8007b88:	f7fa fedb 	bl	8002942 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b92:	2358      	movs	r3, #88	; 0x58
 8007b94:	2200      	movs	r2, #0
 8007b96:	2180      	movs	r1, #128	; 0x80
 8007b98:	f7fa fed3 	bl	8002942 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ba2:	23c0      	movs	r3, #192	; 0xc0
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2181      	movs	r1, #129	; 0x81
 8007ba8:	f7fa fecb 	bl	8002942 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bb2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2101      	movs	r1, #1
 8007bba:	f7fa fec2 	bl	8002942 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2182      	movs	r1, #130	; 0x82
 8007bcc:	f7fa feb9 	bl	8002942 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20001330 	.word	0x20001330
 8007be0:	40005c00 	.word	0x40005c00

08007be4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7f9 fb2b 	bl	8001256 <HAL_PCD_Start>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 f94e 	bl	8007ea8 <USBD_Get_USB_Status>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	4608      	mov	r0, r1
 8007c24:	4611      	mov	r1, r2
 8007c26:	461a      	mov	r2, r3
 8007c28:	4603      	mov	r3, r0
 8007c2a:	70fb      	strb	r3, [r7, #3]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70bb      	strb	r3, [r7, #2]
 8007c30:	4613      	mov	r3, r2
 8007c32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c42:	78bb      	ldrb	r3, [r7, #2]
 8007c44:	883a      	ldrh	r2, [r7, #0]
 8007c46:	78f9      	ldrb	r1, [r7, #3]
 8007c48:	f7f9 fca3 	bl	8001592 <HAL_PCD_EP_Open>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 f928 	bl	8007ea8 <USBD_Get_USB_Status>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c80:	78fa      	ldrb	r2, [r7, #3]
 8007c82:	4611      	mov	r1, r2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7f9 fcea 	bl	800165e <HAL_PCD_EP_Close>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 f909 	bl	8007ea8 <USBD_Get_USB_Status>
 8007c96:	4603      	mov	r3, r0
 8007c98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cbe:	78fa      	ldrb	r2, [r7, #3]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7f9 fdaa 	bl	800181c <HAL_PCD_EP_SetStall>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 f8ea 	bl	8007ea8 <USBD_Get_USB_Status>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cfc:	78fa      	ldrb	r2, [r7, #3]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7f9 fdeb 	bl	80018dc <HAL_PCD_EP_ClrStall>
 8007d06:	4603      	mov	r3, r0
 8007d08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 f8cb 	bl	8007ea8 <USBD_Get_USB_Status>
 8007d12:	4603      	mov	r3, r0
 8007d14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	da0c      	bge.n	8007d56 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d42:	68f9      	ldr	r1, [r7, #12]
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	440b      	add	r3, r1
 8007d50:	3302      	adds	r3, #2
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	e00b      	b.n	8007d6e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d5c:	68f9      	ldr	r1, [r7, #12]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	440b      	add	r3, r1
 8007d68:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007d6c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr

08007d78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d92:	78fa      	ldrb	r2, [r7, #3]
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7f9 fbd6 	bl	8001548 <HAL_PCD_SetAddress>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 f880 	bl	8007ea8 <USBD_Get_USB_Status>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	72fb      	strb	r3, [r7, #11]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dd8:	893b      	ldrh	r3, [r7, #8]
 8007dda:	7af9      	ldrb	r1, [r7, #11]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	f7f9 fcda 	bl	8001796 <HAL_PCD_EP_Transmit>
 8007de2:	4603      	mov	r3, r0
 8007de4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f85d 	bl	8007ea8 <USBD_Get_USB_Status>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007df2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	461a      	mov	r2, r3
 8007e08:	460b      	mov	r3, r1
 8007e0a:	72fb      	strb	r3, [r7, #11]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e1e:	893b      	ldrh	r3, [r7, #8]
 8007e20:	7af9      	ldrb	r1, [r7, #11]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	f7f9 fc63 	bl	80016ee <HAL_PCD_EP_Receive>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f83a 	bl	8007ea8 <USBD_Get_USB_Status>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e38:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e54:	78fa      	ldrb	r2, [r7, #3]
 8007e56:	4611      	mov	r1, r2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7f9 fc85 	bl	8001768 <HAL_PCD_EP_GetRxCount>
 8007e5e:	4603      	mov	r3, r0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e70:	4b02      	ldr	r3, [pc, #8]	; (8007e7c <USBD_static_malloc+0x14>)
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bc80      	pop	{r7}
 8007e7a:	4770      	bx	lr
 8007e7c:	2000161c 	.word	0x2000161c

08007e80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]

}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr

08007e92 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bc80      	pop	{r7}
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d817      	bhi.n	8007eec <USBD_Get_USB_Status+0x44>
 8007ebc:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <USBD_Get_USB_Status+0x1c>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007ed5 	.word	0x08007ed5
 8007ec8:	08007edb 	.word	0x08007edb
 8007ecc:	08007ee1 	.word	0x08007ee1
 8007ed0:	08007ee7 	.word	0x08007ee7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed8:	e00b      	b.n	8007ef2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007eda:	2302      	movs	r3, #2
 8007edc:	73fb      	strb	r3, [r7, #15]
    break;
 8007ede:	e008      	b.n	8007ef2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee4:	e005      	b.n	8007ef2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eea:	e002      	b.n	8007ef2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007eec:	2302      	movs	r3, #2
 8007eee:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef0:	bf00      	nop
  }
  return usb_status;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop

08007f00 <__libc_init_array>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	2600      	movs	r6, #0
 8007f04:	4d0c      	ldr	r5, [pc, #48]	; (8007f38 <__libc_init_array+0x38>)
 8007f06:	4c0d      	ldr	r4, [pc, #52]	; (8007f3c <__libc_init_array+0x3c>)
 8007f08:	1b64      	subs	r4, r4, r5
 8007f0a:	10a4      	asrs	r4, r4, #2
 8007f0c:	42a6      	cmp	r6, r4
 8007f0e:	d109      	bne.n	8007f24 <__libc_init_array+0x24>
 8007f10:	f000 f830 	bl	8007f74 <_init>
 8007f14:	2600      	movs	r6, #0
 8007f16:	4d0a      	ldr	r5, [pc, #40]	; (8007f40 <__libc_init_array+0x40>)
 8007f18:	4c0a      	ldr	r4, [pc, #40]	; (8007f44 <__libc_init_array+0x44>)
 8007f1a:	1b64      	subs	r4, r4, r5
 8007f1c:	10a4      	asrs	r4, r4, #2
 8007f1e:	42a6      	cmp	r6, r4
 8007f20:	d105      	bne.n	8007f2e <__libc_init_array+0x2e>
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f28:	4798      	blx	r3
 8007f2a:	3601      	adds	r6, #1
 8007f2c:	e7ee      	b.n	8007f0c <__libc_init_array+0xc>
 8007f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f32:	4798      	blx	r3
 8007f34:	3601      	adds	r6, #1
 8007f36:	e7f2      	b.n	8007f1e <__libc_init_array+0x1e>
 8007f38:	08008010 	.word	0x08008010
 8007f3c:	08008010 	.word	0x08008010
 8007f40:	08008010 	.word	0x08008010
 8007f44:	08008014 	.word	0x08008014

08007f48 <memcpy>:
 8007f48:	440a      	add	r2, r1
 8007f4a:	4291      	cmp	r1, r2
 8007f4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f50:	d100      	bne.n	8007f54 <memcpy+0xc>
 8007f52:	4770      	bx	lr
 8007f54:	b510      	push	{r4, lr}
 8007f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f5a:	4291      	cmp	r1, r2
 8007f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f60:	d1f9      	bne.n	8007f56 <memcpy+0xe>
 8007f62:	bd10      	pop	{r4, pc}

08007f64 <memset>:
 8007f64:	4603      	mov	r3, r0
 8007f66:	4402      	add	r2, r0
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d100      	bne.n	8007f6e <memset+0xa>
 8007f6c:	4770      	bx	lr
 8007f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f72:	e7f9      	b.n	8007f68 <memset+0x4>

08007f74 <_init>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	bf00      	nop
 8007f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7a:	bc08      	pop	{r3}
 8007f7c:	469e      	mov	lr, r3
 8007f7e:	4770      	bx	lr

08007f80 <_fini>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	bf00      	nop
 8007f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f86:	bc08      	pop	{r3}
 8007f88:	469e      	mov	lr, r3
 8007f8a:	4770      	bx	lr
